
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/debug/sifive-welcome.elf:     file format elf32-littleriscv
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/debug/sifive-welcome.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00004c38 memsz 0x00004c38 flags rwx
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x20404c38 align 2**12
         filesz 0x00001054 memsz 0x00001054 flags rw-
    LOAD off    0x00007054 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    NULL off    0x00000000 vaddr 0x80001054 paddr 0x80001054 align 2**2
         filesz 0x00000000 memsz 0x00002fac flags rw-
    NULL off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000134  20400000  20400000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000043bc  20400180  20400180  00001180  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000006f5  2040453c  2040453c  0000553c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20404c34  20404c34  00005c34  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .litimalign       00000000  20404c38  20404c38  00007054  2**0  CONTENTS
  5 .ditimalign       00000000  08000000  08000000  00007054  2**0  CONTENTS
  6 .lalign           00000000  20404c38  20404c38  00007054  2**0  CONTENTS
  7 .dalign           00000000  80000000  80000000  00007054  2**0  CONTENTS
  8 .data             00001054  80000000  20404c38  00006000  2**3  CONTENTS, ALLOC, LOAD, DATA
  9 .bss              0000004c  80001054  80001054  00000000  2**2  ALLOC
 10 .stack            00000400  800010a0  800010a0  00000000  2**0  ALLOC
 11 .heap             00002b60  800014a0  800014a0  00000000  2**0  ALLOC
 12 .debug_info       00011a18  00000000  00000000  00007054  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev     00002a09  00000000  00000000  00018a6c  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges    00000758  00000000  00000000  0001b478  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges     000005b0  00000000  00000000  0001bbd0  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line       00006ada  00000000  00000000  0001c180  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str        00002df0  00000000  00000000  00022c5a  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment          00000011  00000000  00000000  00025a4a  2**0  CONTENTS, READONLY
 19 .riscv.attributes 00000029  00000000  00000000  00025a5b  2**0  CONTENTS, READONLY
 20 .debug_frame      00001658  00000000  00000000  00025a84  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400180 l    d  .text	00000000 .text
2040453c l    d  .rodata	00000000 .rodata
20404c34 l    d  .init_array	00000000 .init_array
20404c38 l    d  .litimalign	00000000 .litimalign
08000000 l    d  .ditimalign	00000000 .ditimalign
20404c38 l    d  .lalign	00000000 .lalign
80000000 l    d  .dalign	00000000 .dalign
80000000 l    d  .data	00000000 .data
80001054 l    d  .bss	00000000 .bss
800010a0 l    d  .stack	00000000 .stack
800014a0 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20402100 l       .text	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 crt0.o
20404c20 l       .rodata	00000000 argv
20404c24 l       .rodata	00000000 envp
20404c28 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 sifive-welcome.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
204009a0 l     F .text	00000004 __fp_lock
204009a4 l     F .text	0000006a std
20400a1a l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 fixed-clock.c
00000000 l    df *ABS*	00000000 riscv,clint0.c
00000000 l    df *ABS*	00000000 riscv,cpu.c
00000000 l    df *ABS*	00000000 riscv,plic0.c
00000000 l    df *ABS*	00000000 sifive,gpio-leds.c
00000000 l    df *ABS*	00000000 sifive,gpio0.c
00000000 l    df *ABS*	00000000 sifive,uart0.c
20403c3c l     F .text	000000d0 pre_rate_change_callback
20403d0c l     F .text	0000002e post_rate_change_callback
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001048 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20404504 l     F .text	00000024 metal_tty_init
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
20404c38 l       .init_array	00000000 __init_array_end
20404c31 l       .init_array	00000000 __preinit_array_end
20404c34 l       .init_array	00000000 __init_array_start
20404c31 l       .init_array	00000000 __preinit_array_start
20400550 g     F .text	00000012 putchar
20404a54  w    O .rodata	0000001c __metal_driver_vtable_sifive_uart0
204037d8 g     F .text	0000003c __metal_driver_led_exist
20402086 g     F .text	00000026 metal_cpu_timer_get_interrupt_id
20401f62 g     F .text	00000032 _isatty_r
2040438e g     F .text	00000012 strcpy
204005c6 g     F .text	00000072 _puts_r
20401f94 g     F .text	00000036 _lseek_r
20403ba4 g     F .text	00000098 __metal_driver_sifive_uart0_set_baud_rate
20402b1e g     F .text	00000038 __metal_valid_interrupt_id
20403f10 g     F .text	00000040 metal_gpio_toggle_pin
80001830 g       .data	00000000 __global_pointer$
20402060 g     F .text	00000026 metal_cpu_timer_interrupt_controller
20402206 g     F .text	00000024 metal_led_off
204033b2 g     F .text	0000002c __metal_plic0_complete_interrupt
20402d4e g     F .text	00000148 __metal_driver_riscv_cpu_controller_interrupt_register
20401dee g     F .text	00000036 __sseek
20400a6e g     F .text	0000004e __sinit
20404a70  w    O .rodata	00000014 __metal_driver_vtable_sifive_led
20400658 g     F .text	000000b2 __swbuf_r
20400a1e g     F .text	00000048 __sfmoreglue
204019a8 g     F .text	00000002 __malloc_unlock
204020d2 g     F .text	0000002c metal_cpu_get
204021e2 g     F .text	00000024 metal_led_on
80000fb8  w    O .data	00000030 __metal_dt_serial_10013000
20404a00  w    O .rodata	0000001c __metal_driver_vtable_riscv_clint0
800010a0 g       .bss	00000000 metal_segment_bss_target_end
20402302 g     F .text	00000076 __metal_clint0_mtime_get
2040332a g     F .text	00000028 __metal_driver_cpu_get_instruction_length
204018b4 g     F .text	0000004a memmove
20400a66 g     F .text	00000008 _cleanup
2040390a g     F .text	00000040 __metal_driver_sifive_gpio0_disable_input
20404180 g     F .text	0000000c __errno
20402378 g     F .text	00000058 __metal_clint0_mtime_set
08000000 g       .ditimalign	00000000 metal_segment_itim_target_start
20403e68 g     F .text	00000040 metal_gpio_enable_output
80001054 g       .bss	00000000 metal_segment_bss_target_start
20401f2e g     F .text	00000034 _fstat_r
20402eea g     F .text	00000066 __metal_driver_riscv_cpu_controller_interrupt_enable_vector
8000109c g     O .bss	00000004 errno
20401d9c g     F .text	00000004 __seofread
00000400 g       *ABS*	00000000 __stack_size
20403dcc g     F .text	0000002e metal_clock_register_pre_rate_change_callback
2040385e g     F .text	0000003a __metal_driver_led_on
20404a1c  w    O .rodata	0000001c __metal_driver_vtable_riscv_plic0
204049c0  w    O .rodata	00000040 __metal_driver_vtable_cpu
2040054c g     F .text	00000004 _putchar_r
20403fba g     F .text	0000002e metal_uart_set_baud_rate
20403d3a g     F .text	00000092 __metal_driver_sifive_uart0_init
204017fe g     F .text	000000b6 memcpy
800014a0 g       .heap	00000000 metal_segment_heap_target_start
20400a0e g     F .text	0000000c _cleanup_r
80000870  w    O .data	00000010 __metal_dt_cpu_0
20400638 g     F .text	0000000e puts
20403ea8 g     F .text	00000068 metal_gpio_set_pin
204027e8 g     F .text	00000018 __metal_default_exception_handler
2040400a g     F .text	00000026 _fstat
20403408 g     F .text	00000048 __metal_plic0_set_priority
2040267e g     F .text	0000002c __metal_driver_cpu_get
204049a4  w    O .rodata	0000001c __metal_driver_vtable_riscv_cpu_intc
8000105c g     O .bss	00000004 __malloc_top_pad
204026dc g     F .text	00000018 __metal_interrupt_global_disable
204021be g     F .text	00000024 metal_led_enable
20400e28 g     F .text	000002de __sfvwrite_r
20401d3a g     F .text	00000032 _sbrk_r
20402c0c g     F .text	0000004e __metal_exception_register
20403796 g     F .text	00000042 __metal_driver_riscv_plic0_disable
2040222a g     F .text	00000096 metal_led_get_rgb
20401fca g     F .text	00000036 _read_r
2040312a g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
2040396e g     F .text	0000003a __metal_driver_sifive_gpio0_enable_output
20401e92 g     F .text	0000008e _fclose_r
20402fa8 g     F .text	00000072 __metal_driver_cpu_timer_get
2040097e g     F .text	00000022 fflush
80001058 g     O .bss	00000004 __malloc_max_sbrked_mem
20402818 g     F .text	00000064 __metal_default_sw_handler
20403dfa g     F .text	0000002e metal_clock_register_post_rate_change_callback
20403ac2 g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20404030 g     F .text	00000020 _isatty
20403a22 g     F .text	0000003a __metal_driver_sifive_gpio0_output_toggle
20402f50 g     F .text	0000003c __metal_driver_riscv_cpu_controller_interrupt_disable_vector
8000103c  w    O .data	00000008 __metal_driver_vtable_fixed_clock
80001050 g     O .data	00000004 _global_impure_ptr
204019aa g     F .text	00000390 _realloc_r
204041e2 g     F .text	0000006e __libc_init_array
20403898 g     F .text	0000003a __metal_driver_led_off
204039a8 g     F .text	0000003a __metal_driver_sifive_gpio0_output_set
20402e96 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
204040a4 g     F .text	00000064 _sbrk
20400b60 g     F .text	00000014 __fp_lock_all
20400132 g     F .init	00000002 _init
2040273e g     F .text	0000001a __metal_interrupt_timer_disable
204031f0 g     F .text	0000006a __metal_driver_cpu_clear_sw_ipi
20404a38  w    O .rodata	0000001c __metal_driver_vtable_sifive_gpio0
20403a5c g     F .text	00000066 __metal_driver_sifive_gpio0_enable_io
204041a8 g     F .text	0000003a __libc_fini_array
20403172 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .dalign	00000000 metal_segment_data_target_start
20402790 g     F .text	0000002c __metal_interrupt_local_enable
204044b0 g     F .text	00000054 metal_tty_putc
204034da g     F .text	00000018 __metal_plic0_default_handler
20400562 g     F .text	00000054 _putc_r
80000830  w    O .data	0000001c __metal_dt_clock_0
20404250 g     F .text	00000020 strcat
80001010  w    O .data	00000014 __metal_dt_led_0blue
00000400 g       *ABS*	00000000 __heap_size
20402000 g     F .text	0000002a metal_cpu_get_mtime
20402774 g     F .text	0000001c __metal_interrupt_external_disable
20403ae2 g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20402f8c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20402c5a g     F .text	000000f4 __metal_driver_riscv_cpu_controller_interrupt_init
204032e2 g     F .text	00000048 __metal_driver_cpu_exception_register
204026f4 g     F .text	00000018 __metal_interrupt_software_enable
20400b58 g     F .text	00000002 __sfp_lock_acquire
204017e4 g     F .text	0000001a memchr
20400c58 g     F .text	000001d0 _free_r
20404402 g     F .text	000000ae __call_exitprocs
20400054 g     F .init	00000000 _start
80001034 g     O .data	00000004 __malloc_sbrk_base
80000ffc  w    O .data	00000014 __metal_dt_led_0green
20404050 g     F .text	0000002a _lseek
204032c2 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403352 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402758 g     F .text	0000001c __metal_interrupt_external_enable
204043a0 g     F .text	00000062 __register_exitproc
20403b06 g     F .text	00000036 __metal_driver_sifive_uart0_putc
2040357c g     F .text	0000011a __metal_driver_riscv_plic0_init
20403754 g     F .text	00000042 __metal_driver_riscv_plic0_enable
2040394a g     F .text	00000024 __metal_driver_sifive_gpio0_output
80001060 g     O .bss	00000028 __malloc_current_mallinfo
204026aa g     F .text	0000001a __metal_myhart_id
20402ec0 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401e60 g     F .text	00000032 _close_r
20403b84 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
2040244e g     F .text	00000062 __metal_driver_riscv_clint0_register
20403e28 g     F .text	00000040 metal_gpio_disable_input
8000084c  w    O .data	00000024 __metal_dt_clint_2000000
2040071a g     F .text	000000dc __swsetup_r
80000fe8  w    O .data	00000014 __metal_dt_led_0red
20402124 g     F .text	0000003e metal_interrupt_register_handler
20400abc g     F .text	0000009c __sfp
80000428 g     O .data	00000408 __malloc_av_
20400b5e g     F .text	00000002 __sinit_lock_release
20401d6c g     F .text	00000030 __sread
204019a6 g     F .text	00000002 __malloc_lock
80001088 g     O .bss	00000004 tmr_intr
20400950 g     F .text	0000002e _fflush_r
20402b56 g     F .text	000000b6 __metal_local_interrupt_enable
2040255c g     F .text	00000122 __metal_driver_riscv_clint0_command_request
204018fe g     F .text	000000a8 memset
20400362 g     F .text	000001ea main
80001054 g     O .bss	00000004 __malloc_max_total_mem
80001054 g       .bss	00000000 metal_segment_data_target_end
2040070a g     F .text	00000010 __swbuf
20403186 g     F .text	0000006a __metal_driver_cpu_set_sw_ipi
2040325a g     F .text	00000068 __metal_driver_cpu_get_msip
20403f50 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403370 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
204038d2 g     F .text	00000038 __metal_driver_led_toggle
20403390 g     F .text	00000022 __metal_plic0_claim_interrupt
20401e24 g     F .text	00000006 __sclose
80001024  w    O .data	0000000c __metal_led_table
20401f20 g     F .text	0000000e fclose
204012d8 g     F .text	0000050c _malloc_r
800014a0 g       .stack	00000000 metal_segment_stack_end
20401106 g     F .text	00000062 _fwalk
20403814 g     F .text	0000004a __metal_driver_led_enable
2040301a g     F .text	00000034 __metal_driver_cpu_timebase_get
204005b6 g     F .text	00000010 putc
20400b88 g     F .text	000000d0 _malloc_trim_r
20400000 g       .init	00000000 _enter
20404270 g     F .text	0000011e strcmp
20404c38 g       .litimalign	00000000 metal_segment_itim_source_start
80001044  w    O .data	00000004 __metal_cpu_table
20400132 g     F .init	00000002 _fini
20400180 g     F .text	0000010c display_banner
204026c4 g     F .text	00000018 __metal_interrupt_global_enable
20404176 g     F .text	0000000a atexit
20401e2a g     F .text	00000036 _write_r
20402724 g     F .text	0000001a __metal_interrupt_timer_enable
204002c8 g     F .text	0000009a wait_for_timer
20403b3c g     F .text	00000048 __metal_driver_sifive_uart0_getc
20402506 g     F .text	00000056 __metal_driver_riscv_clint0_disable
80001030 g     O .data	00000004 _impure_ptr
204030bc g     F .text	0000006e __metal_driver_cpu_mtimecmp_set
204007f6 g     F .text	0000015a __sflush_r
20400b74 g     F .text	00000014 __fp_unlock_all
8000108c g     O .bss	00000004 cpu_intr
204022c0 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
204024b0 g     F .text	00000056 __metal_driver_riscv_clint0_enable
20404c38 g       .lalign	00000000 metal_segment_data_source_start
80004000 g       .heap	00000000 metal_segment_heap_target_end
20402a78 g     F .text	000000a6 __metal_controller_interrupt_vector
80000c40  w    O .data	00000320 __metal_dt_interrupt_controller_c000000
204011d4 g     F .text	00000066 __swhatbuf_r
204039e2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_clear
80000880  w    O .data	000003c0 __metal_dt_interrupt_controller
2040287c g     F .text	00000066 __metal_default_timer_handler
20404108 g     F .text	0000006e _write
204034f2 g     F .text	0000008a __metal_plic0_handler
204020ac g     F .text	00000026 metal_cpu_interrupt_controller
20402102 g     F .text	00000022 metal_interrupt_init
20401da0 g     F .text	0000004e __swrite
80001038 g     O .data	00000004 __malloc_trim_threshold
2040202a g     F .text	00000036 metal_cpu_set_mtimecmp
2040418c g     F .text	0000001c exit
20401168 g     F .text	0000006c _fwalk_reent
204022e0 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20400b5a g     F .text	00000002 __sfp_lock_release
80000f60  w    O .data	00000058 __metal_dt_gpio_10012000
20402800 g     F .text	00000018 __metal_default_interrupt_handler
20402162 g     F .text	0000002e metal_interrupt_enable
20403f88 g     F .text	00000032 metal_uart_putc
2040407a g     F .text	0000002a _read
20402900 g     F .text	0000014a __metal_exception_handler
20404528 g     F .text	00000014 _exit
2040028c g     F .text	0000003c timer_isr
2040304e g     F .text	0000006e __metal_driver_cpu_mtime_get
80001090 g     O .bss	00000004 cpu0
2040123a g     F .text	0000009e __smakebuf_r
20400646 g     F .text	00000012 strlen
80001094 g     O .bss	00000004 timer_isr_flag
204023d0 g     F .text	0000007e __metal_driver_riscv_clint0_init
80001098 g     O .bss	00000004 tmr_id
20403144 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403450 g     F .text	0000008a __metal_plic0_enable
20403158 g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
204027bc g     F .text	0000002c __metal_interrupt_local_disable
2040270c g     F .text	00000018 __metal_interrupt_software_disable
20403f5e g     F .text	0000002a metal_uart_init
204033de g     F .text	0000002a __metal_plic0_set_threshold
20403fe8 g     F .text	00000022 _close
20400b5c g     F .text	00000002 __sinit_lock_acquire
20403696 g     F .text	000000be __metal_driver_riscv_plic0_register
20402190 g     F .text	0000002e metal_interrupt_disable



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	83018193          	addi	gp,gp,-2000 # 80001830 <__global_pointer$>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00002297          	auipc	t0,0x2
2040000c:	0f828293          	addi	t0,t0,248 # 20402100 <early_trap_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:38
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400014:	dfc00117          	auipc	sp,0xdfc00
20400018:	fec10113          	addi	sp,sp,-20 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:47
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
2040001c:	dfc00097          	auipc	ra,0xdfc00
20400020:	fe408093          	addi	ra,ra,-28 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:48
    beqz ra, 1f
20400024:	00008363          	beqz	ra,2040002a <_enter+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:49
    jalr ra
20400028:	9082                	jalr	ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:55
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2040002a:	f1402573          	csrr	a0,mhartid
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:56
    li a1, 0
2040002e:	4581                	li	a1,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:57
    li a2, 0
20400030:	4601                	li	a2,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:58
    call _start
20400032:	200d                	jal	20400054 <_start>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:63

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400034:	dfc00097          	auipc	ra,0xdfc00
20400038:	fcc08093          	addi	ra,ra,-52 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:64
    beqz ra, 1f
2040003c:	00008363          	beqz	ra,20400042 <_enter+0x42>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:65
    jalr ra
20400040:	9082                	jalr	ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:70
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20400042:	00000297          	auipc	t0,0x0
20400046:	00c28293          	addi	t0,t0,12 # 2040004e <_enter+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:71
     csrw mtvec, t0
2040004a:	30529073          	csrw	mtvec,t0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:73
1:
     lw t1, 0(x0)
2040004e:	00002303          	lw	t1,0(zero) # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:74
     j 1b
20400052:	bff5                	j	2040004e <_enter+0x4e>

20400054 <_start>:
_start():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20400054:	8406                	mv	s0,ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400056:	5fc01197          	auipc	gp,0x5fc01
2040005a:	7da18193          	addi	gp,gp,2010 # 80001830 <__global_pointer$>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, metal_segment_stack_end
2040005e:	c7018113          	addi	sp,gp,-912 # 800014a0 <metal_segment_stack_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:52
  andi sp, sp, -16
20400062:	ff017113          	andi	sp,sp,-16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:57

  /* For now we only run on single-hart systems and assume that we're always on
   * hart 0. */
1:
  bnez a0, 1b
20400066:	e101                	bnez	a0,20400066 <_start+0x12>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20400068:	00005297          	auipc	t0,0x5
2040006c:	bd028293          	addi	t0,t0,-1072 # 20404c38 <__init_array_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:67
  la t1, metal_segment_data_target_start
20400070:	5fc00317          	auipc	t1,0x5fc00
20400074:	f9030313          	addi	t1,t1,-112 # 80000000 <metal_segment_data_target_start>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:68
  la t2, metal_segment_data_target_end
20400078:	5fc01397          	auipc	t2,0x5fc01
2040007c:	fdc38393          	addi	t2,t2,-36 # 80001054 <__malloc_max_total_mem>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:70

  beq t0, t1, 2f
20400080:	00628c63          	beq	t0,t1,20400098 <_start+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:71
  bge t1, t2, 2f
20400084:	00735a63          	bge	t1,t2,20400098 <_start+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:74

1:
  lw   a0, 0(t0)
20400088:	0002a503          	lw	a0,0(t0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
  addi t0, t0, 4
2040008c:	0291                	addi	t0,t0,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  sw   a0, 0(t1)
2040008e:	00a32023          	sw	a0,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  addi t1, t1, 4
20400092:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:78
  blt  t1, t2, 1b
20400094:	fe734ae3          	blt	t1,t2,20400088 <_start+0x34>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:82
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20400098:	00005297          	auipc	t0,0x5
2040009c:	ba028293          	addi	t0,t0,-1120 # 20404c38 <__init_array_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:83
  la t1, metal_segment_itim_target_start
204000a0:	e7c00317          	auipc	t1,0xe7c00
204000a4:	f6030313          	addi	t1,t1,-160 # 8000000 <metal_segment_itim_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:84
  la t2, metal_segment_itim_target_end
204000a8:	e7c00397          	auipc	t2,0xe7c00
204000ac:	f5838393          	addi	t2,t2,-168 # 8000000 <metal_segment_itim_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:86

  beq t0, t1, 2f
204000b0:	00628c63          	beq	t0,t1,204000c8 <_start+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  bge t1, t2, 2f
204000b4:	00735a63          	bge	t1,t2,204000c8 <_start+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:90

1:
  lw   a0, 0(t0)
204000b8:	0002a503          	lw	a0,0(t0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:91
  addi t0, t0, 4
204000bc:	0291                	addi	t0,t0,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:92
  sw   a0, 0(t1)
204000be:	00a32023          	sw	a0,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:93
  addi t1, t1, 4
204000c2:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:94
  blt  t1, t2, 1b
204000c4:	fe734ae3          	blt	t1,t2,204000b8 <_start+0x64>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:98
2:

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
204000c8:	5fc01317          	auipc	t1,0x5fc01
204000cc:	f8c30313          	addi	t1,t1,-116 # 80001054 <__malloc_max_total_mem>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  la t2, metal_segment_bss_target_end
204000d0:	5fc01397          	auipc	t2,0x5fc01
204000d4:	fd038393          	addi	t2,t2,-48 # 800010a0 <metal_segment_bss_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:101

  bge t1, t2, 2f
204000d8:	00735763          	bge	t1,t2,204000e6 <_start+0x92>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:104

1:
  sw   x0, 0(t1)
204000dc:	00032023          	sw	zero,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:105
  addi t1, t1, 4
204000e0:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:106
  blt  t1, t2, 1b
204000e2:	fe734de3          	blt	t1,t2,204000dc <_start+0x88>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
204000e6:	c211                	beqz	a2,204000ea <_start+0x96>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:113
  jalr a2
204000e8:	9602                	jalr	a2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:117
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
204000ea:	00004517          	auipc	a0,0x4
204000ee:	0be50513          	addi	a0,a0,190 # 204041a8 <__libc_fini_array>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:118
  call atexit
204000f2:	084040ef          	jal	ra,20404176 <atexit>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:119
  call __libc_init_array
204000f6:	0ec040ef          	jal	ra,204041e2 <__libc_init_array>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:122

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
204000fa:	301027f3          	csrr	a5,misa
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:123
  li   a4, 0x10028
204000fe:	00010737          	lui	a4,0x10
20400102:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xfc28>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
  and  a5, a5, a4
20400106:	8ff9                	and	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:125
  beqz a5, 1f
20400108:	c799                	beqz	a5,20400116 <_start+0xc2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:126
  csrr a5, mstatus
2040010a:	300027f3          	csrr	a5,mstatus
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:127
  lui  a4, 0x2
2040010e:	6709                	lui	a4,0x2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  or   a5, a5, a4
20400110:	8fd9                	or	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:129
  csrw mstatus, a5
20400112:	30079073          	csrw	mstatus,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400116:	4505                	li	a0,1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  la a1, argv  /* argv = {"libgloss", NULL} */
20400118:	00005597          	auipc	a1,0x5
2040011c:	b0858593          	addi	a1,a1,-1272 # 20404c20 <argv>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:137
  la a2, envp  /* envp = {NULL} */
20400120:	00005617          	auipc	a2,0x5
20400124:	b0460613          	addi	a2,a2,-1276 # 20404c24 <envp>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:138
  call main
20400128:	2c2d                	jal	20400362 <main>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:144

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040012a:	062040ef          	jal	ra,2040418c <exit>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:149

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
2040012e:	80a2                	mv	ra,s0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:150
  ret
20400130:	8082                	ret

20400132 <_fini>:
_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:162
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400132:	8082                	ret

Disassembly of section .text:

20400180 <display_banner>:
display_banner():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:15
struct metal_cpu *cpu0;
struct metal_interrupt *cpu_intr, *tmr_intr;
int tmr_id;
volatile uint32_t timer_isr_flag;

void display_banner (void) {
20400180:	1141                	addi	sp,sp,-16
20400182:	c606                	sw	ra,12(sp)
20400184:	c422                	sw	s0,8(sp)
20400186:	0800                	addi	s0,sp,16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:17

    printf("\n");
20400188:	4529                	li	a0,10
2040018a:	26d9                	jal	20400550 <putchar>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:18
    printf("\n");
2040018c:	4529                	li	a0,10
2040018e:	26c9                	jal	20400550 <putchar>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:19
    printf("                  SIFIVE, INC.\n");
20400190:	204047b7          	lui	a5,0x20404
20400194:	53c78513          	addi	a0,a5,1340 # 2040453c <_exit+0x14>
20400198:	2145                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:20
    printf("\n");
2040019a:	4529                	li	a0,10
2040019c:	2e55                	jal	20400550 <putchar>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:21
    printf("           5555555555555555555555555\n");
2040019e:	204047b7          	lui	a5,0x20404
204001a2:	55c78513          	addi	a0,a5,1372 # 2040455c <_exit+0x34>
204001a6:	2949                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:22
    printf("          5555                   5555\n");
204001a8:	204047b7          	lui	a5,0x20404
204001ac:	58478513          	addi	a0,a5,1412 # 20404584 <_exit+0x5c>
204001b0:	2161                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:23
    printf("         5555                     5555\n");
204001b2:	204047b7          	lui	a5,0x20404
204001b6:	5ac78513          	addi	a0,a5,1452 # 204045ac <_exit+0x84>
204001ba:	29bd                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:24
    printf("        5555                       5555\n");
204001bc:	204047b7          	lui	a5,0x20404
204001c0:	5d478513          	addi	a0,a5,1492 # 204045d4 <_exit+0xac>
204001c4:	2995                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:25
    printf("       5555       5555555555555555555555\n");
204001c6:	204047b7          	lui	a5,0x20404
204001ca:	5fc78513          	addi	a0,a5,1532 # 204045fc <_exit+0xd4>
204001ce:	21ad                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:26
    printf("      5555       555555555555555555555555\n");
204001d0:	204047b7          	lui	a5,0x20404
204001d4:	62878513          	addi	a0,a5,1576 # 20404628 <_exit+0x100>
204001d8:	2185                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:27
    printf("     5555                             5555\n");
204001da:	204047b7          	lui	a5,0x20404
204001de:	65478513          	addi	a0,a5,1620 # 20404654 <_exit+0x12c>
204001e2:	2999                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:28
    printf("    5555                               5555\n");
204001e4:	204047b7          	lui	a5,0x20404
204001e8:	68078513          	addi	a0,a5,1664 # 20404680 <_exit+0x158>
204001ec:	21b1                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:29
    printf("   5555                                 5555\n");
204001ee:	204047b7          	lui	a5,0x20404
204001f2:	6ac78513          	addi	a0,a5,1708 # 204046ac <_exit+0x184>
204001f6:	2189                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:30
    printf("  5555555555555555555555555555          55555\n");
204001f8:	204047b7          	lui	a5,0x20404
204001fc:	6dc78513          	addi	a0,a5,1756 # 204046dc <_exit+0x1b4>
20400200:	2925                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:31
    printf("   55555           555555555           55555\n");
20400202:	204047b7          	lui	a5,0x20404
20400206:	70c78513          	addi	a0,a5,1804 # 2040470c <_exit+0x1e4>
2040020a:	213d                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:32
    printf("     55555           55555           55555\n");
2040020c:	204047b7          	lui	a5,0x20404
20400210:	73c78513          	addi	a0,a5,1852 # 2040473c <_exit+0x214>
20400214:	2115                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:33
    printf("       55555           5           55555\n");
20400216:	204047b7          	lui	a5,0x20404
2040021a:	76878513          	addi	a0,a5,1896 # 20404768 <_exit+0x240>
2040021e:	2929                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:34
    printf("         55555                   55555\n");
20400220:	204047b7          	lui	a5,0x20404
20400224:	79478513          	addi	a0,a5,1940 # 20404794 <_exit+0x26c>
20400228:	2901                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:35
    printf("           55555               55555\n");
2040022a:	204047b7          	lui	a5,0x20404
2040022e:	7bc78513          	addi	a0,a5,1980 # 204047bc <_exit+0x294>
20400232:	2119                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:36
    printf("             55555           55555\n");
20400234:	204047b7          	lui	a5,0x20404
20400238:	7e478513          	addi	a0,a5,2020 # 204047e4 <_exit+0x2bc>
2040023c:	2ef5                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:37
    printf("               55555       55555\n");
2040023e:	204057b7          	lui	a5,0x20405
20400242:	80878513          	addi	a0,a5,-2040 # 20404808 <_exit+0x2e0>
20400246:	2ecd                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:38
    printf("                 55555   55555\n");
20400248:	204057b7          	lui	a5,0x20405
2040024c:	82c78513          	addi	a0,a5,-2004 # 2040482c <_exit+0x304>
20400250:	26e5                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:39
    printf("                   555555555\n");
20400252:	204057b7          	lui	a5,0x20405
20400256:	84c78513          	addi	a0,a5,-1972 # 2040484c <_exit+0x324>
2040025a:	2ef9                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:40
    printf("                     55555\n");
2040025c:	204057b7          	lui	a5,0x20405
20400260:	86c78513          	addi	a0,a5,-1940 # 2040486c <_exit+0x344>
20400264:	2ed1                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:41
    printf("                       5\n");
20400266:	204057b7          	lui	a5,0x20405
2040026a:	88878513          	addi	a0,a5,-1912 # 20404888 <_exit+0x360>
2040026e:	26e9                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:42
    printf("\n");
20400270:	4529                	li	a0,10
20400272:	2cf9                	jal	20400550 <putchar>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:44

    printf("\n");
20400274:	4529                	li	a0,10
20400276:	2ce9                	jal	20400550 <putchar>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:45
    printf("               Welcome to SiFive!\n");
20400278:	204057b7          	lui	a5,0x20405
2040027c:	8a478513          	addi	a0,a5,-1884 # 204048a4 <_exit+0x37c>
20400280:	2e65                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:47

}
20400282:	0001                	nop
20400284:	40b2                	lw	ra,12(sp)
20400286:	4422                	lw	s0,8(sp)
20400288:	0141                	addi	sp,sp,16
2040028a:	8082                	ret

2040028c <timer_isr>:
timer_isr():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:49

void timer_isr (int id, void *data) {
2040028c:	1101                	addi	sp,sp,-32
2040028e:	ce06                	sw	ra,28(sp)
20400290:	cc22                	sw	s0,24(sp)
20400292:	1000                	addi	s0,sp,32
20400294:	fea42623          	sw	a0,-20(s0)
20400298:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:52

    // Disable Timer interrupt
    metal_interrupt_disable(tmr_intr, tmr_id);
2040029c:	800017b7          	lui	a5,0x80001
204002a0:	0887a703          	lw	a4,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
204002a4:	800017b7          	lui	a5,0x80001
204002a8:	0987a783          	lw	a5,152(a5) # 80001098 <metal_segment_heap_target_end+0xffffd098>
204002ac:	85be                	mv	a1,a5
204002ae:	853a                	mv	a0,a4
204002b0:	6e1010ef          	jal	ra,20402190 <metal_interrupt_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:55

    // Flag showing we hit timer isr
    timer_isr_flag = 1;
204002b4:	800017b7          	lui	a5,0x80001
204002b8:	4705                	li	a4,1
204002ba:	08e7aa23          	sw	a4,148(a5) # 80001094 <metal_segment_heap_target_end+0xffffd094>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:56
}
204002be:	0001                	nop
204002c0:	40f2                	lw	ra,28(sp)
204002c2:	4462                	lw	s0,24(sp)
204002c4:	6105                	addi	sp,sp,32
204002c6:	8082                	ret

204002c8 <wait_for_timer>:
wait_for_timer():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:58

void wait_for_timer(struct metal_led *which_led) {
204002c8:	1101                	addi	sp,sp,-32
204002ca:	ce06                	sw	ra,28(sp)
204002cc:	cc22                	sw	s0,24(sp)
204002ce:	ca26                	sw	s1,20(sp)
204002d0:	1000                	addi	s0,sp,32
204002d2:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:61

    // clear global timer isr flag
    timer_isr_flag = 0;
204002d6:	800017b7          	lui	a5,0x80001
204002da:	0807aa23          	sw	zero,148(a5) # 80001094 <metal_segment_heap_target_end+0xffffd094>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:64

    // Turn on desired LED
    metal_led_on(which_led);
204002de:	fec42503          	lw	a0,-20(s0)
204002e2:	701010ef          	jal	ra,204021e2 <metal_led_on>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:67

    // Set timer
    metal_cpu_set_mtimecmp(cpu0, metal_cpu_get_mtime(cpu0) + RTC_FREQ);
204002e6:	800017b7          	lui	a5,0x80001
204002ea:	0907a483          	lw	s1,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
204002ee:	800017b7          	lui	a5,0x80001
204002f2:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
204002f6:	853e                	mv	a0,a5
204002f8:	509010ef          	jal	ra,20402000 <metal_cpu_get_mtime>
204002fc:	86aa                	mv	a3,a0
204002fe:	872e                	mv	a4,a1
20400300:	65a1                	lui	a1,0x8
20400302:	4601                	li	a2,0
20400304:	00b687b3          	add	a5,a3,a1
20400308:	853e                	mv	a0,a5
2040030a:	00d53533          	sltu	a0,a0,a3
2040030e:	00c70833          	add	a6,a4,a2
20400312:	01050733          	add	a4,a0,a6
20400316:	883a                	mv	a6,a4
20400318:	85be                	mv	a1,a5
2040031a:	8642                	mv	a2,a6
2040031c:	8526                	mv	a0,s1
2040031e:	50d010ef          	jal	ra,2040202a <metal_cpu_set_mtimecmp>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:70

    // Enable Timer interrupt
    metal_interrupt_enable(tmr_intr, tmr_id);
20400322:	800017b7          	lui	a5,0x80001
20400326:	0887a703          	lw	a4,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
2040032a:	800017b7          	lui	a5,0x80001
2040032e:	0987a783          	lw	a5,152(a5) # 80001098 <metal_segment_heap_target_end+0xffffd098>
20400332:	85be                	mv	a1,a5
20400334:	853a                	mv	a0,a4
20400336:	62d010ef          	jal	ra,20402162 <metal_interrupt_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:73

    // wait till timer triggers and isr is hit
    while (timer_isr_flag == 0){};
2040033a:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:73 (discriminator 1)
2040033c:	800017b7          	lui	a5,0x80001
20400340:	0947a783          	lw	a5,148(a5) # 80001094 <metal_segment_heap_target_end+0xffffd094>
20400344:	dfe5                	beqz	a5,2040033c <wait_for_timer+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:75

    timer_isr_flag = 0;
20400346:	800017b7          	lui	a5,0x80001
2040034a:	0807aa23          	sw	zero,148(a5) # 80001094 <metal_segment_heap_target_end+0xffffd094>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:78

    // Turn off this LED
    metal_led_off(which_led);
2040034e:	fec42503          	lw	a0,-20(s0)
20400352:	6b5010ef          	jal	ra,20402206 <metal_led_off>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:79
}
20400356:	0001                	nop
20400358:	40f2                	lw	ra,28(sp)
2040035a:	4462                	lw	s0,24(sp)
2040035c:	44d2                	lw	s1,20(sp)
2040035e:	6105                	addi	sp,sp,32
20400360:	8082                	ret

20400362 <main>:
main():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:83


int main (void)
{
20400362:	1101                	addi	sp,sp,-32
20400364:	ce06                	sw	ra,28(sp)
20400366:	cc22                	sw	s0,24(sp)
20400368:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:88
    int rc, up_cnt, dn_cnt;
    struct metal_led *led0_red, *led0_green, *led0_blue;

    // This demo will toggle LEDs colors so we define them here
    led0_red = metal_led_get_rgb("LD0", "red");
2040036a:	204057b7          	lui	a5,0x20405
2040036e:	8c878593          	addi	a1,a5,-1848 # 204048c8 <_exit+0x3a0>
20400372:	204057b7          	lui	a5,0x20405
20400376:	8cc78513          	addi	a0,a5,-1844 # 204048cc <_exit+0x3a4>
2040037a:	6b1010ef          	jal	ra,2040222a <metal_led_get_rgb>
2040037e:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:89
    led0_green = metal_led_get_rgb("LD0", "green");
20400382:	204057b7          	lui	a5,0x20405
20400386:	8d078593          	addi	a1,a5,-1840 # 204048d0 <_exit+0x3a8>
2040038a:	204057b7          	lui	a5,0x20405
2040038e:	8cc78513          	addi	a0,a5,-1844 # 204048cc <_exit+0x3a4>
20400392:	699010ef          	jal	ra,2040222a <metal_led_get_rgb>
20400396:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:90
    led0_blue = metal_led_get_rgb("LD0", "blue");
2040039a:	204057b7          	lui	a5,0x20405
2040039e:	8d878593          	addi	a1,a5,-1832 # 204048d8 <_exit+0x3b0>
204003a2:	204057b7          	lui	a5,0x20405
204003a6:	8cc78513          	addi	a0,a5,-1844 # 204048cc <_exit+0x3a4>
204003aa:	681010ef          	jal	ra,2040222a <metal_led_get_rgb>
204003ae:	fea42223          	sw	a0,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:91
    if ((led0_red == NULL) || (led0_green == NULL) || (led0_blue == NULL)) {
204003b2:	fec42783          	lw	a5,-20(s0)
204003b6:	c799                	beqz	a5,204003c4 <main+0x62>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:91 (discriminator 1)
204003b8:	fe842783          	lw	a5,-24(s0)
204003bc:	c781                	beqz	a5,204003c4 <main+0x62>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:91 (discriminator 2)
204003be:	fe442783          	lw	a5,-28(s0)
204003c2:	eb81                	bnez	a5,204003d2 <main+0x70>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:92
        printf("At least one of LEDs is null.\n");
204003c4:	204057b7          	lui	a5,0x20405
204003c8:	8e078513          	addi	a0,a5,-1824 # 204048e0 <_exit+0x3b8>
204003cc:	24b5                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:93
        return 1;
204003ce:	4785                	li	a5,1
204003d0:	aa8d                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:97
    }

    // Enable each LED
    metal_led_enable(led0_red);
204003d2:	fec42503          	lw	a0,-20(s0)
204003d6:	5e9010ef          	jal	ra,204021be <metal_led_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:98
    metal_led_enable(led0_green);
204003da:	fe842503          	lw	a0,-24(s0)
204003de:	5e1010ef          	jal	ra,204021be <metal_led_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:99
    metal_led_enable(led0_blue);
204003e2:	fe442503          	lw	a0,-28(s0)
204003e6:	5d9010ef          	jal	ra,204021be <metal_led_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:102

    // All Off
    metal_led_off(led0_red);
204003ea:	fec42503          	lw	a0,-20(s0)
204003ee:	619010ef          	jal	ra,20402206 <metal_led_off>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:103
    metal_led_off(led0_green);
204003f2:	fe842503          	lw	a0,-24(s0)
204003f6:	611010ef          	jal	ra,20402206 <metal_led_off>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:104
    metal_led_off(led0_blue);
204003fa:	fe442503          	lw	a0,-28(s0)
204003fe:	609010ef          	jal	ra,20402206 <metal_led_off>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:107

    // Lets get the CPU and and its interrupt
    cpu0 = metal_cpu_get(0);
20400402:	4501                	li	a0,0
20400404:	4cf010ef          	jal	ra,204020d2 <metal_cpu_get>
20400408:	872a                	mv	a4,a0
2040040a:	800017b7          	lui	a5,0x80001
2040040e:	08e7a823          	sw	a4,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:108
    if (cpu0 == NULL) {
20400412:	800017b7          	lui	a5,0x80001
20400416:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
2040041a:	eb81                	bnez	a5,2040042a <main+0xc8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:109
        printf("CPU null.\n");
2040041c:	204057b7          	lui	a5,0x20405
20400420:	90078513          	addi	a0,a5,-1792 # 20404900 <_exit+0x3d8>
20400424:	2c11                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:110
        return 2;
20400426:	4789                	li	a5,2
20400428:	aa29                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:112
    }
    cpu_intr = metal_cpu_interrupt_controller(cpu0);
2040042a:	800017b7          	lui	a5,0x80001
2040042e:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
20400432:	853e                	mv	a0,a5
20400434:	479010ef          	jal	ra,204020ac <metal_cpu_interrupt_controller>
20400438:	872a                	mv	a4,a0
2040043a:	800017b7          	lui	a5,0x80001
2040043e:	08e7a623          	sw	a4,140(a5) # 8000108c <metal_segment_heap_target_end+0xffffd08c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:113
    if (cpu_intr == NULL) {
20400442:	800017b7          	lui	a5,0x80001
20400446:	08c7a783          	lw	a5,140(a5) # 8000108c <metal_segment_heap_target_end+0xffffd08c>
2040044a:	eb81                	bnez	a5,2040045a <main+0xf8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:114
        printf("CPU interrupt controller is null.\n");
2040044c:	204057b7          	lui	a5,0x20405
20400450:	90c78513          	addi	a0,a5,-1780 # 2040490c <_exit+0x3e4>
20400454:	22d5                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:115
        return 3;
20400456:	478d                	li	a5,3
20400458:	a0ed                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:117
    }
    metal_interrupt_init(cpu_intr);
2040045a:	800017b7          	lui	a5,0x80001
2040045e:	08c7a783          	lw	a5,140(a5) # 8000108c <metal_segment_heap_target_end+0xffffd08c>
20400462:	853e                	mv	a0,a5
20400464:	49f010ef          	jal	ra,20402102 <metal_interrupt_init>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:120

    // display welcome banner
    display_banner();
20400468:	3b21                	jal	20400180 <display_banner>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:123

    // Setup Timer and its interrupt so we can toggle LEDs on 1s cadence
    tmr_intr = metal_cpu_timer_interrupt_controller(cpu0);
2040046a:	800017b7          	lui	a5,0x80001
2040046e:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
20400472:	853e                	mv	a0,a5
20400474:	3ed010ef          	jal	ra,20402060 <metal_cpu_timer_interrupt_controller>
20400478:	872a                	mv	a4,a0
2040047a:	800017b7          	lui	a5,0x80001
2040047e:	08e7a423          	sw	a4,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:124
    if (tmr_intr == NULL) {
20400482:	800017b7          	lui	a5,0x80001
20400486:	0887a783          	lw	a5,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
2040048a:	eb81                	bnez	a5,2040049a <main+0x138>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:125
        printf("TIMER interrupt controller is  null.\n");
2040048c:	204057b7          	lui	a5,0x20405
20400490:	93078513          	addi	a0,a5,-1744 # 20404930 <_exit+0x408>
20400494:	2255                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:126
        return 4;
20400496:	4791                	li	a5,4
20400498:	a06d                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:128
    }
    metal_interrupt_init(tmr_intr);
2040049a:	800017b7          	lui	a5,0x80001
2040049e:	0887a783          	lw	a5,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
204004a2:	853e                	mv	a0,a5
204004a4:	45f010ef          	jal	ra,20402102 <metal_interrupt_init>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:129
    tmr_id = metal_cpu_timer_get_interrupt_id(cpu0);
204004a8:	800017b7          	lui	a5,0x80001
204004ac:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
204004b0:	853e                	mv	a0,a5
204004b2:	3d5010ef          	jal	ra,20402086 <metal_cpu_timer_get_interrupt_id>
204004b6:	872a                	mv	a4,a0
204004b8:	800017b7          	lui	a5,0x80001
204004bc:	08e7ac23          	sw	a4,152(a5) # 80001098 <metal_segment_heap_target_end+0xffffd098>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:130
    rc = metal_interrupt_register_handler(tmr_intr, tmr_id, timer_isr, cpu0);
204004c0:	800017b7          	lui	a5,0x80001
204004c4:	0887a703          	lw	a4,136(a5) # 80001088 <metal_segment_heap_target_end+0xffffd088>
204004c8:	800017b7          	lui	a5,0x80001
204004cc:	0987a583          	lw	a1,152(a5) # 80001098 <metal_segment_heap_target_end+0xffffd098>
204004d0:	800017b7          	lui	a5,0x80001
204004d4:	0907a783          	lw	a5,144(a5) # 80001090 <metal_segment_heap_target_end+0xffffd090>
204004d8:	86be                	mv	a3,a5
204004da:	204007b7          	lui	a5,0x20400
204004de:	28c78613          	addi	a2,a5,652 # 2040028c <timer_isr>
204004e2:	853a                	mv	a0,a4
204004e4:	441010ef          	jal	ra,20402124 <metal_interrupt_register_handler>
204004e8:	fea42023          	sw	a0,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:131
    if (rc < 0) {
204004ec:	fe042783          	lw	a5,-32(s0)
204004f0:	0007dc63          	bgez	a5,20400508 <main+0x1a6>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:132
        printf("TIMER interrupt handler registration failed\n");
204004f4:	204057b7          	lui	a5,0x20405
204004f8:	95878513          	addi	a0,a5,-1704 # 20404958 <_exit+0x430>
204004fc:	2a35                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:133
        return (rc * -1);
204004fe:	fe042783          	lw	a5,-32(s0)
20400502:	40f007b3          	neg	a5,a5
20400506:	a835                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:137
    }

    // Lastly CPU interrupt
    if (metal_interrupt_enable(cpu_intr, 0) == -1) {
20400508:	800017b7          	lui	a5,0x80001
2040050c:	08c7a783          	lw	a5,140(a5) # 8000108c <metal_segment_heap_target_end+0xffffd08c>
20400510:	4581                	li	a1,0
20400512:	853e                	mv	a0,a5
20400514:	44f010ef          	jal	ra,20402162 <metal_interrupt_enable>
20400518:	872a                	mv	a4,a0
2040051a:	57fd                	li	a5,-1
2040051c:	00f71963          	bne	a4,a5,2040052e <main+0x1cc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:138
        printf("CPU interrupt enable failed\n");
20400520:	204057b7          	lui	a5,0x20405
20400524:	98478513          	addi	a0,a5,-1660 # 20404984 <_exit+0x45c>
20400528:	2a01                	jal	20400638 <puts>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:139
        return 6;
2040052a:	4799                	li	a5,6
2040052c:	a819                	j	20400542 <main+0x1e0>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:146 (discriminator 1)

    // Red -> Green -> Blue, repeat
    while (1) {

        // Turn on RED
        wait_for_timer(led0_red);
2040052e:	fec42503          	lw	a0,-20(s0)
20400532:	3b59                	jal	204002c8 <wait_for_timer>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:149 (discriminator 1)

        // Turn on Green
        wait_for_timer(led0_green);
20400534:	fe842503          	lw	a0,-24(s0)
20400538:	3b41                	jal	204002c8 <wait_for_timer>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:152 (discriminator 1)

        // Turn on Blue
        wait_for_timer(led0_blue);
2040053a:	fe442503          	lw	a0,-28(s0)
2040053e:	3369                	jal	204002c8 <wait_for_timer>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:146 (discriminator 1)
        wait_for_timer(led0_red);
20400540:	b7fd                	j	2040052e <main+0x1cc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/sifive-welcome/sifive-welcome.c:159

    //getchar();

    // return
    return 0;
}
20400542:	853e                	mv	a0,a5
20400544:	40f2                	lw	ra,28(sp)
20400546:	4462                	lw	s0,24(sp)
20400548:	6105                	addi	sp,sp,32
2040054a:	8082                	ret

2040054c <_putchar_r>:
_putchar_r():
2040054c:	4510                	lw	a2,8(a0)
2040054e:	a811                	j	20400562 <_putc_r>

20400550 <putchar>:
putchar():
20400550:	5fc01797          	auipc	a5,0x5fc01
20400554:	ae078793          	addi	a5,a5,-1312 # 80001030 <_impure_ptr>
20400558:	439c                	lw	a5,0(a5)
2040055a:	85aa                	mv	a1,a0
2040055c:	4790                	lw	a2,8(a5)
2040055e:	853e                	mv	a0,a5
20400560:	a009                	j	20400562 <_putc_r>

20400562 <_putc_r>:
_putc_r():
20400562:	1101                	addi	sp,sp,-32
20400564:	cc22                	sw	s0,24(sp)
20400566:	ce06                	sw	ra,28(sp)
20400568:	842a                	mv	s0,a0
2040056a:	c901                	beqz	a0,2040057a <_putc_r+0x18>
2040056c:	5d1c                	lw	a5,56(a0)
2040056e:	e791                	bnez	a5,2040057a <_putc_r+0x18>
20400570:	c632                	sw	a2,12(sp)
20400572:	c42e                	sw	a1,8(sp)
20400574:	29ed                	jal	20400a6e <__sinit>
20400576:	4632                	lw	a2,12(sp)
20400578:	45a2                	lw	a1,8(sp)
2040057a:	461c                	lw	a5,8(a2)
2040057c:	17fd                	addi	a5,a5,-1
2040057e:	c61c                	sw	a5,8(a2)
20400580:	0007df63          	bgez	a5,2040059e <_putc_r+0x3c>
20400584:	4e18                	lw	a4,24(a2)
20400586:	00e7c763          	blt	a5,a4,20400594 <_putc_r+0x32>
2040058a:	0ff5f793          	andi	a5,a1,255
2040058e:	4729                	li	a4,10
20400590:	00e79763          	bne	a5,a4,2040059e <_putc_r+0x3c>
20400594:	8522                	mv	a0,s0
20400596:	4462                	lw	s0,24(sp)
20400598:	40f2                	lw	ra,28(sp)
2040059a:	6105                	addi	sp,sp,32
2040059c:	a875                	j	20400658 <__swbuf_r>
2040059e:	421c                	lw	a5,0(a2)
204005a0:	0ff5f513          	andi	a0,a1,255
204005a4:	00178713          	addi	a4,a5,1
204005a8:	c218                	sw	a4,0(a2)
204005aa:	00b78023          	sb	a1,0(a5)
204005ae:	40f2                	lw	ra,28(sp)
204005b0:	4462                	lw	s0,24(sp)
204005b2:	6105                	addi	sp,sp,32
204005b4:	8082                	ret

204005b6 <putc>:
putc():
204005b6:	5fc01797          	auipc	a5,0x5fc01
204005ba:	a7a78793          	addi	a5,a5,-1414 # 80001030 <_impure_ptr>
204005be:	862e                	mv	a2,a1
204005c0:	85aa                	mv	a1,a0
204005c2:	4388                	lw	a0,0(a5)
204005c4:	bf79                	j	20400562 <_putc_r>

204005c6 <_puts_r>:
_puts_r():
204005c6:	7139                	addi	sp,sp,-64
204005c8:	dc22                	sw	s0,56(sp)
204005ca:	842a                	mv	s0,a0
204005cc:	852e                	mv	a0,a1
204005ce:	c62e                	sw	a1,12(sp)
204005d0:	de06                	sw	ra,60(sp)
204005d2:	2895                	jal	20400646 <strlen>
204005d4:	00004797          	auipc	a5,0x4
204005d8:	3cc78793          	addi	a5,a5,972 # 204049a0 <_exit+0x478>
204005dc:	d43e                	sw	a5,40(sp)
204005de:	4785                	li	a5,1
204005e0:	d63e                	sw	a5,44(sp)
204005e2:	101c                	addi	a5,sp,32
204005e4:	45b2                	lw	a1,12(sp)
204005e6:	ca3e                	sw	a5,20(sp)
204005e8:	4789                	li	a5,2
204005ea:	cc3e                	sw	a5,24(sp)
204005ec:	5c1c                	lw	a5,56(s0)
204005ee:	d22a                	sw	a0,36(sp)
204005f0:	0505                	addi	a0,a0,1
204005f2:	d02e                	sw	a1,32(sp)
204005f4:	ce2a                	sw	a0,28(sp)
204005f6:	440c                	lw	a1,8(s0)
204005f8:	e789                	bnez	a5,20400602 <_puts_r+0x3c>
204005fa:	8522                	mv	a0,s0
204005fc:	c62e                	sw	a1,12(sp)
204005fe:	2985                	jal	20400a6e <__sinit>
20400600:	45b2                	lw	a1,12(sp)
20400602:	00c59783          	lh	a5,12(a1) # 800c <__heap_size+0x7c0c>
20400606:	01279713          	slli	a4,a5,0x12
2040060a:	00074b63          	bltz	a4,20400620 <_puts_r+0x5a>
2040060e:	6689                	lui	a3,0x2
20400610:	51f8                	lw	a4,100(a1)
20400612:	8fd5                	or	a5,a5,a3
20400614:	00f59623          	sh	a5,12(a1)
20400618:	77f9                	lui	a5,0xffffe
2040061a:	17fd                	addi	a5,a5,-1
2040061c:	8ff9                	and	a5,a5,a4
2040061e:	d1fc                	sw	a5,100(a1)
20400620:	0850                	addi	a2,sp,20
20400622:	8522                	mv	a0,s0
20400624:	005000ef          	jal	ra,20400e28 <__sfvwrite_r>
20400628:	57fd                	li	a5,-1
2040062a:	e111                	bnez	a0,2040062e <_puts_r+0x68>
2040062c:	47a9                	li	a5,10
2040062e:	50f2                	lw	ra,60(sp)
20400630:	5462                	lw	s0,56(sp)
20400632:	853e                	mv	a0,a5
20400634:	6121                	addi	sp,sp,64
20400636:	8082                	ret

20400638 <puts>:
puts():
20400638:	5fc01797          	auipc	a5,0x5fc01
2040063c:	9f878793          	addi	a5,a5,-1544 # 80001030 <_impure_ptr>
20400640:	85aa                	mv	a1,a0
20400642:	4388                	lw	a0,0(a5)
20400644:	b749                	j	204005c6 <_puts_r>

20400646 <strlen>:
strlen():
20400646:	87aa                	mv	a5,a0
20400648:	0785                	addi	a5,a5,1
2040064a:	fff7c703          	lbu	a4,-1(a5)
2040064e:	ff6d                	bnez	a4,20400648 <strlen+0x2>
20400650:	40a78533          	sub	a0,a5,a0
20400654:	157d                	addi	a0,a0,-1
20400656:	8082                	ret

20400658 <__swbuf_r>:
__swbuf_r():
20400658:	1101                	addi	sp,sp,-32
2040065a:	cc22                	sw	s0,24(sp)
2040065c:	ca26                	sw	s1,20(sp)
2040065e:	c84a                	sw	s2,16(sp)
20400660:	ce06                	sw	ra,28(sp)
20400662:	c64e                	sw	s3,12(sp)
20400664:	892a                	mv	s2,a0
20400666:	84ae                	mv	s1,a1
20400668:	8432                	mv	s0,a2
2040066a:	c501                	beqz	a0,20400672 <__swbuf_r+0x1a>
2040066c:	5d1c                	lw	a5,56(a0)
2040066e:	e391                	bnez	a5,20400672 <__swbuf_r+0x1a>
20400670:	2efd                	jal	20400a6e <__sinit>
20400672:	4c1c                	lw	a5,24(s0)
20400674:	c41c                	sw	a5,8(s0)
20400676:	00c45783          	lhu	a5,12(s0)
2040067a:	8ba1                	andi	a5,a5,8
2040067c:	c7bd                	beqz	a5,204006ea <__swbuf_r+0x92>
2040067e:	481c                	lw	a5,16(s0)
20400680:	c7ad                	beqz	a5,204006ea <__swbuf_r+0x92>
20400682:	00c41783          	lh	a5,12(s0)
20400686:	0ff4f993          	andi	s3,s1,255
2040068a:	0ff4f493          	andi	s1,s1,255
2040068e:	01279713          	slli	a4,a5,0x12
20400692:	06075263          	bgez	a4,204006f6 <__swbuf_r+0x9e>
20400696:	481c                	lw	a5,16(s0)
20400698:	4008                	lw	a0,0(s0)
2040069a:	8d1d                	sub	a0,a0,a5
2040069c:	485c                	lw	a5,20(s0)
2040069e:	00f54663          	blt	a0,a5,204006aa <__swbuf_r+0x52>
204006a2:	85a2                	mv	a1,s0
204006a4:	854a                	mv	a0,s2
204006a6:	246d                	jal	20400950 <_fflush_r>
204006a8:	e529                	bnez	a0,204006f2 <__swbuf_r+0x9a>
204006aa:	441c                	lw	a5,8(s0)
204006ac:	0505                	addi	a0,a0,1
204006ae:	17fd                	addi	a5,a5,-1
204006b0:	c41c                	sw	a5,8(s0)
204006b2:	401c                	lw	a5,0(s0)
204006b4:	00178713          	addi	a4,a5,1
204006b8:	c018                	sw	a4,0(s0)
204006ba:	01378023          	sb	s3,0(a5)
204006be:	485c                	lw	a5,20(s0)
204006c0:	00a78963          	beq	a5,a0,204006d2 <__swbuf_r+0x7a>
204006c4:	00c45783          	lhu	a5,12(s0)
204006c8:	8b85                	andi	a5,a5,1
204006ca:	cb81                	beqz	a5,204006da <__swbuf_r+0x82>
204006cc:	47a9                	li	a5,10
204006ce:	00f49663          	bne	s1,a5,204006da <__swbuf_r+0x82>
204006d2:	85a2                	mv	a1,s0
204006d4:	854a                	mv	a0,s2
204006d6:	2cad                	jal	20400950 <_fflush_r>
204006d8:	ed09                	bnez	a0,204006f2 <__swbuf_r+0x9a>
204006da:	40f2                	lw	ra,28(sp)
204006dc:	4462                	lw	s0,24(sp)
204006de:	8526                	mv	a0,s1
204006e0:	4942                	lw	s2,16(sp)
204006e2:	44d2                	lw	s1,20(sp)
204006e4:	49b2                	lw	s3,12(sp)
204006e6:	6105                	addi	sp,sp,32
204006e8:	8082                	ret
204006ea:	85a2                	mv	a1,s0
204006ec:	854a                	mv	a0,s2
204006ee:	2035                	jal	2040071a <__swsetup_r>
204006f0:	d949                	beqz	a0,20400682 <__swbuf_r+0x2a>
204006f2:	54fd                	li	s1,-1
204006f4:	b7dd                	j	204006da <__swbuf_r+0x82>
204006f6:	6709                	lui	a4,0x2
204006f8:	8fd9                	or	a5,a5,a4
204006fa:	00f41623          	sh	a5,12(s0)
204006fe:	507c                	lw	a5,100(s0)
20400700:	7779                	lui	a4,0xffffe
20400702:	177d                	addi	a4,a4,-1
20400704:	8ff9                	and	a5,a5,a4
20400706:	d07c                	sw	a5,100(s0)
20400708:	b779                	j	20400696 <__swbuf_r+0x3e>

2040070a <__swbuf>:
__swbuf():
2040070a:	5fc01797          	auipc	a5,0x5fc01
2040070e:	92678793          	addi	a5,a5,-1754 # 80001030 <_impure_ptr>
20400712:	862e                	mv	a2,a1
20400714:	85aa                	mv	a1,a0
20400716:	4388                	lw	a0,0(a5)
20400718:	b781                	j	20400658 <__swbuf_r>

2040071a <__swsetup_r>:
__swsetup_r():
2040071a:	1141                	addi	sp,sp,-16
2040071c:	5fc01797          	auipc	a5,0x5fc01
20400720:	91478793          	addi	a5,a5,-1772 # 80001030 <_impure_ptr>
20400724:	c226                	sw	s1,4(sp)
20400726:	84aa                	mv	s1,a0
20400728:	4388                	lw	a0,0(a5)
2040072a:	c422                	sw	s0,8(sp)
2040072c:	c606                	sw	ra,12(sp)
2040072e:	842e                	mv	s0,a1
20400730:	c501                	beqz	a0,20400738 <__swsetup_r+0x1e>
20400732:	5d1c                	lw	a5,56(a0)
20400734:	e391                	bnez	a5,20400738 <__swsetup_r+0x1e>
20400736:	2e25                	jal	20400a6e <__sinit>
20400738:	00c41703          	lh	a4,12(s0)
2040073c:	01071793          	slli	a5,a4,0x10
20400740:	83c1                	srli	a5,a5,0x10
20400742:	0087f693          	andi	a3,a5,8
20400746:	eea1                	bnez	a3,2040079e <__swsetup_r+0x84>
20400748:	0107f693          	andi	a3,a5,16
2040074c:	ee89                	bnez	a3,20400766 <__swsetup_r+0x4c>
2040074e:	47a5                	li	a5,9
20400750:	c09c                	sw	a5,0(s1)
20400752:	04076713          	ori	a4,a4,64
20400756:	00e41623          	sh	a4,12(s0)
2040075a:	557d                	li	a0,-1
2040075c:	40b2                	lw	ra,12(sp)
2040075e:	4422                	lw	s0,8(sp)
20400760:	4492                	lw	s1,4(sp)
20400762:	0141                	addi	sp,sp,16
20400764:	8082                	ret
20400766:	8b91                	andi	a5,a5,4
20400768:	c78d                	beqz	a5,20400792 <__swsetup_r+0x78>
2040076a:	580c                	lw	a1,48(s0)
2040076c:	c989                	beqz	a1,2040077e <__swsetup_r+0x64>
2040076e:	04040793          	addi	a5,s0,64
20400772:	00f58463          	beq	a1,a5,2040077a <__swsetup_r+0x60>
20400776:	8526                	mv	a0,s1
20400778:	21c5                	jal	20400c58 <_free_r>
2040077a:	02042823          	sw	zero,48(s0)
2040077e:	00c45783          	lhu	a5,12(s0)
20400782:	00042223          	sw	zero,4(s0)
20400786:	fdb7f793          	andi	a5,a5,-37
2040078a:	00f41623          	sh	a5,12(s0)
2040078e:	481c                	lw	a5,16(s0)
20400790:	c01c                	sw	a5,0(s0)
20400792:	00c45783          	lhu	a5,12(s0)
20400796:	0087e793          	ori	a5,a5,8
2040079a:	00f41623          	sh	a5,12(s0)
2040079e:	481c                	lw	a5,16(s0)
204007a0:	ef89                	bnez	a5,204007ba <__swsetup_r+0xa0>
204007a2:	00c45783          	lhu	a5,12(s0)
204007a6:	20000713          	li	a4,512
204007aa:	2807f793          	andi	a5,a5,640
204007ae:	00e78663          	beq	a5,a4,204007ba <__swsetup_r+0xa0>
204007b2:	85a2                	mv	a1,s0
204007b4:	8526                	mv	a0,s1
204007b6:	285000ef          	jal	ra,2040123a <__smakebuf_r>
204007ba:	00c45783          	lhu	a5,12(s0)
204007be:	0017f713          	andi	a4,a5,1
204007c2:	c705                	beqz	a4,204007ea <__swsetup_r+0xd0>
204007c4:	485c                	lw	a5,20(s0)
204007c6:	00042423          	sw	zero,8(s0)
204007ca:	40f007b3          	neg	a5,a5
204007ce:	cc1c                	sw	a5,24(s0)
204007d0:	481c                	lw	a5,16(s0)
204007d2:	4501                	li	a0,0
204007d4:	f7c1                	bnez	a5,2040075c <__swsetup_r+0x42>
204007d6:	00c41783          	lh	a5,12(s0)
204007da:	0807f713          	andi	a4,a5,128
204007de:	df3d                	beqz	a4,2040075c <__swsetup_r+0x42>
204007e0:	0407e793          	ori	a5,a5,64
204007e4:	00f41623          	sh	a5,12(s0)
204007e8:	bf8d                	j	2040075a <__swsetup_r+0x40>
204007ea:	8b89                	andi	a5,a5,2
204007ec:	4701                	li	a4,0
204007ee:	e391                	bnez	a5,204007f2 <__swsetup_r+0xd8>
204007f0:	4858                	lw	a4,20(s0)
204007f2:	c418                	sw	a4,8(s0)
204007f4:	bff1                	j	204007d0 <__swsetup_r+0xb6>

204007f6 <__sflush_r>:
__sflush_r():
204007f6:	00c59783          	lh	a5,12(a1)
204007fa:	1101                	addi	sp,sp,-32
204007fc:	cc22                	sw	s0,24(sp)
204007fe:	01079713          	slli	a4,a5,0x10
20400802:	8341                	srli	a4,a4,0x10
20400804:	ca26                	sw	s1,20(sp)
20400806:	ce06                	sw	ra,28(sp)
20400808:	c84a                	sw	s2,16(sp)
2040080a:	c64e                	sw	s3,12(sp)
2040080c:	00877693          	andi	a3,a4,8
20400810:	84aa                	mv	s1,a0
20400812:	842e                	mv	s0,a1
20400814:	eee5                	bnez	a3,2040090c <__sflush_r+0x116>
20400816:	6705                	lui	a4,0x1
20400818:	80070713          	addi	a4,a4,-2048 # 800 <__heap_size+0x400>
2040081c:	8fd9                	or	a5,a5,a4
2040081e:	41d8                	lw	a4,4(a1)
20400820:	00f59623          	sh	a5,12(a1)
20400824:	00e04d63          	bgtz	a4,2040083e <__sflush_r+0x48>
20400828:	5dd8                	lw	a4,60(a1)
2040082a:	00e04a63          	bgtz	a4,2040083e <__sflush_r+0x48>
2040082e:	4501                	li	a0,0
20400830:	40f2                	lw	ra,28(sp)
20400832:	4462                	lw	s0,24(sp)
20400834:	44d2                	lw	s1,20(sp)
20400836:	4942                	lw	s2,16(sp)
20400838:	49b2                	lw	s3,12(sp)
2040083a:	6105                	addi	sp,sp,32
2040083c:	8082                	ret
2040083e:	5418                	lw	a4,40(s0)
20400840:	d77d                	beqz	a4,2040082e <__sflush_r+0x38>
20400842:	0004a903          	lw	s2,0(s1)
20400846:	01379693          	slli	a3,a5,0x13
2040084a:	0004a023          	sw	zero,0(s1)
2040084e:	0806d563          	bgez	a3,204008d8 <__sflush_r+0xe2>
20400852:	4830                	lw	a2,80(s0)
20400854:	00c45783          	lhu	a5,12(s0)
20400858:	8b91                	andi	a5,a5,4
2040085a:	c799                	beqz	a5,20400868 <__sflush_r+0x72>
2040085c:	405c                	lw	a5,4(s0)
2040085e:	8e1d                	sub	a2,a2,a5
20400860:	581c                	lw	a5,48(s0)
20400862:	c399                	beqz	a5,20400868 <__sflush_r+0x72>
20400864:	5c5c                	lw	a5,60(s0)
20400866:	8e1d                	sub	a2,a2,a5
20400868:	541c                	lw	a5,40(s0)
2040086a:	4c4c                	lw	a1,28(s0)
2040086c:	4681                	li	a3,0
2040086e:	8526                	mv	a0,s1
20400870:	9782                	jalr	a5
20400872:	57fd                	li	a5,-1
20400874:	00c45683          	lhu	a3,12(s0)
20400878:	00f51d63          	bne	a0,a5,20400892 <__sflush_r+0x9c>
2040087c:	409c                	lw	a5,0(s1)
2040087e:	4775                	li	a4,29
20400880:	08f76063          	bltu	a4,a5,20400900 <__sflush_r+0x10a>
20400884:	20400737          	lui	a4,0x20400
20400888:	0705                	addi	a4,a4,1
2040088a:	00f75733          	srl	a4,a4,a5
2040088e:	8b05                	andi	a4,a4,1
20400890:	cb25                	beqz	a4,20400900 <__sflush_r+0x10a>
20400892:	77fd                	lui	a5,0xfffff
20400894:	7ff78793          	addi	a5,a5,2047 # fffff7ff <metal_segment_heap_target_end+0x7fffb7ff>
20400898:	4818                	lw	a4,16(s0)
2040089a:	8ff5                	and	a5,a5,a3
2040089c:	07c2                	slli	a5,a5,0x10
2040089e:	87c1                	srai	a5,a5,0x10
204008a0:	c018                	sw	a4,0(s0)
204008a2:	00f41623          	sh	a5,12(s0)
204008a6:	00042223          	sw	zero,4(s0)
204008aa:	01379713          	slli	a4,a5,0x13
204008ae:	00075863          	bgez	a4,204008be <__sflush_r+0xc8>
204008b2:	57fd                	li	a5,-1
204008b4:	00f51463          	bne	a0,a5,204008bc <__sflush_r+0xc6>
204008b8:	409c                	lw	a5,0(s1)
204008ba:	e391                	bnez	a5,204008be <__sflush_r+0xc8>
204008bc:	c828                	sw	a0,80(s0)
204008be:	580c                	lw	a1,48(s0)
204008c0:	0124a023          	sw	s2,0(s1)
204008c4:	d5ad                	beqz	a1,2040082e <__sflush_r+0x38>
204008c6:	04040793          	addi	a5,s0,64
204008ca:	00f58463          	beq	a1,a5,204008d2 <__sflush_r+0xdc>
204008ce:	8526                	mv	a0,s1
204008d0:	2661                	jal	20400c58 <_free_r>
204008d2:	02042823          	sw	zero,48(s0)
204008d6:	bfa1                	j	2040082e <__sflush_r+0x38>
204008d8:	4c4c                	lw	a1,28(s0)
204008da:	4601                	li	a2,0
204008dc:	4685                	li	a3,1
204008de:	8526                	mv	a0,s1
204008e0:	9702                	jalr	a4
204008e2:	57fd                	li	a5,-1
204008e4:	862a                	mv	a2,a0
204008e6:	f6f517e3          	bne	a0,a5,20400854 <__sflush_r+0x5e>
204008ea:	409c                	lw	a5,0(s1)
204008ec:	d7a5                	beqz	a5,20400854 <__sflush_r+0x5e>
204008ee:	4775                	li	a4,29
204008f0:	00e78563          	beq	a5,a4,204008fa <__sflush_r+0x104>
204008f4:	4759                	li	a4,22
204008f6:	04e79463          	bne	a5,a4,2040093e <__sflush_r+0x148>
204008fa:	0124a023          	sw	s2,0(s1)
204008fe:	bf05                	j	2040082e <__sflush_r+0x38>
20400900:	0406e793          	ori	a5,a3,64
20400904:	00f41623          	sh	a5,12(s0)
20400908:	557d                	li	a0,-1
2040090a:	b71d                	j	20400830 <__sflush_r+0x3a>
2040090c:	0105a983          	lw	s3,16(a1)
20400910:	f0098fe3          	beqz	s3,2040082e <__sflush_r+0x38>
20400914:	0005a903          	lw	s2,0(a1)
20400918:	8b0d                	andi	a4,a4,3
2040091a:	0135a023          	sw	s3,0(a1)
2040091e:	41390933          	sub	s2,s2,s3
20400922:	4781                	li	a5,0
20400924:	e311                	bnez	a4,20400928 <__sflush_r+0x132>
20400926:	49dc                	lw	a5,20(a1)
20400928:	c41c                	sw	a5,8(s0)
2040092a:	f12052e3          	blez	s2,2040082e <__sflush_r+0x38>
2040092e:	505c                	lw	a5,36(s0)
20400930:	4c4c                	lw	a1,28(s0)
20400932:	86ca                	mv	a3,s2
20400934:	864e                	mv	a2,s3
20400936:	8526                	mv	a0,s1
20400938:	9782                	jalr	a5
2040093a:	00a04763          	bgtz	a0,20400948 <__sflush_r+0x152>
2040093e:	00c45783          	lhu	a5,12(s0)
20400942:	0407e793          	ori	a5,a5,64
20400946:	bf7d                	j	20400904 <__sflush_r+0x10e>
20400948:	99aa                	add	s3,s3,a0
2040094a:	40a90933          	sub	s2,s2,a0
2040094e:	bff1                	j	2040092a <__sflush_r+0x134>

20400950 <_fflush_r>:
_fflush_r():
20400950:	1101                	addi	sp,sp,-32
20400952:	cc22                	sw	s0,24(sp)
20400954:	ce06                	sw	ra,28(sp)
20400956:	842a                	mv	s0,a0
20400958:	c511                	beqz	a0,20400964 <_fflush_r+0x14>
2040095a:	5d1c                	lw	a5,56(a0)
2040095c:	e781                	bnez	a5,20400964 <_fflush_r+0x14>
2040095e:	c62e                	sw	a1,12(sp)
20400960:	2239                	jal	20400a6e <__sinit>
20400962:	45b2                	lw	a1,12(sp)
20400964:	00c59783          	lh	a5,12(a1)
20400968:	c791                	beqz	a5,20400974 <_fflush_r+0x24>
2040096a:	8522                	mv	a0,s0
2040096c:	4462                	lw	s0,24(sp)
2040096e:	40f2                	lw	ra,28(sp)
20400970:	6105                	addi	sp,sp,32
20400972:	b551                	j	204007f6 <__sflush_r>
20400974:	40f2                	lw	ra,28(sp)
20400976:	4462                	lw	s0,24(sp)
20400978:	4501                	li	a0,0
2040097a:	6105                	addi	sp,sp,32
2040097c:	8082                	ret

2040097e <fflush>:
fflush():
2040097e:	85aa                	mv	a1,a0
20400980:	e911                	bnez	a0,20400994 <fflush+0x16>
20400982:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
20400986:	4388                	lw	a0,0(a5)
20400988:	00000597          	auipc	a1,0x0
2040098c:	fc858593          	addi	a1,a1,-56 # 20400950 <_fflush_r>
20400990:	7d80006f          	j	20401168 <_fwalk_reent>
20400994:	5fc00797          	auipc	a5,0x5fc00
20400998:	69c78793          	addi	a5,a5,1692 # 80001030 <_impure_ptr>
2040099c:	4388                	lw	a0,0(a5)
2040099e:	bf4d                	j	20400950 <_fflush_r>

204009a0 <__fp_lock>:
__fp_lock():
204009a0:	4501                	li	a0,0
204009a2:	8082                	ret

204009a4 <std>:
std():
204009a4:	1141                	addi	sp,sp,-16
204009a6:	c422                	sw	s0,8(sp)
204009a8:	c606                	sw	ra,12(sp)
204009aa:	842a                	mv	s0,a0
204009ac:	00b51623          	sh	a1,12(a0)
204009b0:	00c51723          	sh	a2,14(a0)
204009b4:	00052023          	sw	zero,0(a0)
204009b8:	00052223          	sw	zero,4(a0)
204009bc:	00052423          	sw	zero,8(a0)
204009c0:	06052223          	sw	zero,100(a0)
204009c4:	00052823          	sw	zero,16(a0)
204009c8:	00052a23          	sw	zero,20(a0)
204009cc:	00052c23          	sw	zero,24(a0)
204009d0:	4621                	li	a2,8
204009d2:	4581                	li	a1,0
204009d4:	05c50513          	addi	a0,a0,92
204009d8:	727000ef          	jal	ra,204018fe <memset>
204009dc:	00001797          	auipc	a5,0x1
204009e0:	39078793          	addi	a5,a5,912 # 20401d6c <__sread>
204009e4:	d01c                	sw	a5,32(s0)
204009e6:	00001797          	auipc	a5,0x1
204009ea:	3ba78793          	addi	a5,a5,954 # 20401da0 <__swrite>
204009ee:	d05c                	sw	a5,36(s0)
204009f0:	00001797          	auipc	a5,0x1
204009f4:	3fe78793          	addi	a5,a5,1022 # 20401dee <__sseek>
204009f8:	d41c                	sw	a5,40(s0)
204009fa:	00001797          	auipc	a5,0x1
204009fe:	42a78793          	addi	a5,a5,1066 # 20401e24 <__sclose>
20400a02:	cc40                	sw	s0,28(s0)
20400a04:	d45c                	sw	a5,44(s0)
20400a06:	40b2                	lw	ra,12(sp)
20400a08:	4422                	lw	s0,8(sp)
20400a0a:	0141                	addi	sp,sp,16
20400a0c:	8082                	ret

20400a0e <_cleanup_r>:
_cleanup_r():
20400a0e:	00001597          	auipc	a1,0x1
20400a12:	48458593          	addi	a1,a1,1156 # 20401e92 <_fclose_r>
20400a16:	7520006f          	j	20401168 <_fwalk_reent>

20400a1a <__fp_unlock>:
__fp_unlock():
20400a1a:	4501                	li	a0,0
20400a1c:	8082                	ret

20400a1e <__sfmoreglue>:
__sfmoreglue():
20400a1e:	1141                	addi	sp,sp,-16
20400a20:	c226                	sw	s1,4(sp)
20400a22:	06800613          	li	a2,104
20400a26:	fff58493          	addi	s1,a1,-1
20400a2a:	02c484b3          	mul	s1,s1,a2
20400a2e:	c04a                	sw	s2,0(sp)
20400a30:	892e                	mv	s2,a1
20400a32:	c422                	sw	s0,8(sp)
20400a34:	c606                	sw	ra,12(sp)
20400a36:	07448593          	addi	a1,s1,116
20400a3a:	09f000ef          	jal	ra,204012d8 <_malloc_r>
20400a3e:	842a                	mv	s0,a0
20400a40:	cd01                	beqz	a0,20400a58 <__sfmoreglue+0x3a>
20400a42:	00052023          	sw	zero,0(a0)
20400a46:	01252223          	sw	s2,4(a0)
20400a4a:	0531                	addi	a0,a0,12
20400a4c:	c408                	sw	a0,8(s0)
20400a4e:	06848613          	addi	a2,s1,104
20400a52:	4581                	li	a1,0
20400a54:	6ab000ef          	jal	ra,204018fe <memset>
20400a58:	8522                	mv	a0,s0
20400a5a:	40b2                	lw	ra,12(sp)
20400a5c:	4422                	lw	s0,8(sp)
20400a5e:	4492                	lw	s1,4(sp)
20400a60:	4902                	lw	s2,0(sp)
20400a62:	0141                	addi	sp,sp,16
20400a64:	8082                	ret

20400a66 <_cleanup>:
_cleanup():
20400a66:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
20400a6a:	4388                	lw	a0,0(a5)
20400a6c:	b74d                	j	20400a0e <_cleanup_r>

20400a6e <__sinit>:
__sinit():
20400a6e:	5d1c                	lw	a5,56(a0)
20400a70:	e7a9                	bnez	a5,20400aba <__sinit+0x4c>
20400a72:	1141                	addi	sp,sp,-16
20400a74:	c606                	sw	ra,12(sp)
20400a76:	c422                	sw	s0,8(sp)
20400a78:	00000797          	auipc	a5,0x0
20400a7c:	f9678793          	addi	a5,a5,-106 # 20400a0e <_cleanup_r>
20400a80:	dd5c                	sw	a5,60(a0)
20400a82:	478d                	li	a5,3
20400a84:	2ef52223          	sw	a5,740(a0)
20400a88:	2ec50793          	addi	a5,a0,748
20400a8c:	842a                	mv	s0,a0
20400a8e:	2ef52423          	sw	a5,744(a0)
20400a92:	2e052023          	sw	zero,736(a0)
20400a96:	4148                	lw	a0,4(a0)
20400a98:	4601                	li	a2,0
20400a9a:	4591                	li	a1,4
20400a9c:	3721                	jal	204009a4 <std>
20400a9e:	4408                	lw	a0,8(s0)
20400aa0:	4605                	li	a2,1
20400aa2:	45a5                	li	a1,9
20400aa4:	3701                	jal	204009a4 <std>
20400aa6:	4448                	lw	a0,12(s0)
20400aa8:	4609                	li	a2,2
20400aaa:	45c9                	li	a1,18
20400aac:	3de5                	jal	204009a4 <std>
20400aae:	4785                	li	a5,1
20400ab0:	dc1c                	sw	a5,56(s0)
20400ab2:	40b2                	lw	ra,12(sp)
20400ab4:	4422                	lw	s0,8(sp)
20400ab6:	0141                	addi	sp,sp,16
20400ab8:	8082                	ret
20400aba:	8082                	ret

20400abc <__sfp>:
__sfp():
20400abc:	1141                	addi	sp,sp,-16
20400abe:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
20400ac2:	c226                	sw	s1,4(sp)
20400ac4:	4384                	lw	s1,0(a5)
20400ac6:	c04a                	sw	s2,0(sp)
20400ac8:	c606                	sw	ra,12(sp)
20400aca:	5c9c                	lw	a5,56(s1)
20400acc:	c422                	sw	s0,8(sp)
20400ace:	892a                	mv	s2,a0
20400ad0:	e399                	bnez	a5,20400ad6 <__sfp+0x1a>
20400ad2:	8526                	mv	a0,s1
20400ad4:	3f69                	jal	20400a6e <__sinit>
20400ad6:	2e048493          	addi	s1,s1,736
20400ada:	4480                	lw	s0,8(s1)
20400adc:	40dc                	lw	a5,4(s1)
20400ade:	17fd                	addi	a5,a5,-1
20400ae0:	0007d663          	bgez	a5,20400aec <__sfp+0x30>
20400ae4:	409c                	lw	a5,0(s1)
20400ae6:	cfb9                	beqz	a5,20400b44 <__sfp+0x88>
20400ae8:	4084                	lw	s1,0(s1)
20400aea:	bfc5                	j	20400ada <__sfp+0x1e>
20400aec:	00c41703          	lh	a4,12(s0)
20400af0:	e739                	bnez	a4,20400b3e <__sfp+0x82>
20400af2:	77c1                	lui	a5,0xffff0
20400af4:	0785                	addi	a5,a5,1
20400af6:	06042223          	sw	zero,100(s0)
20400afa:	00042023          	sw	zero,0(s0)
20400afe:	00042223          	sw	zero,4(s0)
20400b02:	00042423          	sw	zero,8(s0)
20400b06:	c45c                	sw	a5,12(s0)
20400b08:	00042823          	sw	zero,16(s0)
20400b0c:	00042a23          	sw	zero,20(s0)
20400b10:	00042c23          	sw	zero,24(s0)
20400b14:	4621                	li	a2,8
20400b16:	4581                	li	a1,0
20400b18:	05c40513          	addi	a0,s0,92
20400b1c:	5e3000ef          	jal	ra,204018fe <memset>
20400b20:	02042823          	sw	zero,48(s0)
20400b24:	02042a23          	sw	zero,52(s0)
20400b28:	04042223          	sw	zero,68(s0)
20400b2c:	04042423          	sw	zero,72(s0)
20400b30:	8522                	mv	a0,s0
20400b32:	40b2                	lw	ra,12(sp)
20400b34:	4422                	lw	s0,8(sp)
20400b36:	4492                	lw	s1,4(sp)
20400b38:	4902                	lw	s2,0(sp)
20400b3a:	0141                	addi	sp,sp,16
20400b3c:	8082                	ret
20400b3e:	06840413          	addi	s0,s0,104
20400b42:	bf71                	j	20400ade <__sfp+0x22>
20400b44:	4591                	li	a1,4
20400b46:	854a                	mv	a0,s2
20400b48:	3dd9                	jal	20400a1e <__sfmoreglue>
20400b4a:	c088                	sw	a0,0(s1)
20400b4c:	fd51                	bnez	a0,20400ae8 <__sfp+0x2c>
20400b4e:	47b1                	li	a5,12
20400b50:	00f92023          	sw	a5,0(s2)
20400b54:	4401                	li	s0,0
20400b56:	bfe9                	j	20400b30 <__sfp+0x74>

20400b58 <__sfp_lock_acquire>:
__sfp_lock_acquire():
20400b58:	8082                	ret

20400b5a <__sfp_lock_release>:
__sfp_lock_release():
20400b5a:	8082                	ret

20400b5c <__sinit_lock_acquire>:
__sinit_lock_acquire():
20400b5c:	8082                	ret

20400b5e <__sinit_lock_release>:
__sinit_lock_release():
20400b5e:	8082                	ret

20400b60 <__fp_lock_all>:
__fp_lock_all():
20400b60:	5fc00797          	auipc	a5,0x5fc00
20400b64:	4d078793          	addi	a5,a5,1232 # 80001030 <_impure_ptr>
20400b68:	4388                	lw	a0,0(a5)
20400b6a:	00000597          	auipc	a1,0x0
20400b6e:	e3658593          	addi	a1,a1,-458 # 204009a0 <__fp_lock>
20400b72:	ab51                	j	20401106 <_fwalk>

20400b74 <__fp_unlock_all>:
__fp_unlock_all():
20400b74:	5fc00797          	auipc	a5,0x5fc00
20400b78:	4bc78793          	addi	a5,a5,1212 # 80001030 <_impure_ptr>
20400b7c:	4388                	lw	a0,0(a5)
20400b7e:	00000597          	auipc	a1,0x0
20400b82:	e9c58593          	addi	a1,a1,-356 # 20400a1a <__fp_unlock>
20400b86:	a341                	j	20401106 <_fwalk>

20400b88 <_malloc_trim_r>:
_malloc_trim_r():
20400b88:	1101                	addi	sp,sp,-32
20400b8a:	cc22                	sw	s0,24(sp)
20400b8c:	ca26                	sw	s1,20(sp)
20400b8e:	c84a                	sw	s2,16(sp)
20400b90:	c64e                	sw	s3,12(sp)
20400b92:	842e                	mv	s0,a1
20400b94:	ce06                	sw	ra,28(sp)
20400b96:	892a                	mv	s2,a0
20400b98:	5fc00997          	auipc	s3,0x5fc00
20400b9c:	89098993          	addi	s3,s3,-1904 # 80000428 <__malloc_av_>
20400ba0:	607000ef          	jal	ra,204019a6 <__malloc_lock>
20400ba4:	0089a783          	lw	a5,8(s3)
20400ba8:	6705                	lui	a4,0x1
20400baa:	43c4                	lw	s1,4(a5)
20400bac:	fef70793          	addi	a5,a4,-17 # fef <__heap_size+0xbef>
20400bb0:	40878433          	sub	s0,a5,s0
20400bb4:	98f1                	andi	s1,s1,-4
20400bb6:	9426                	add	s0,s0,s1
20400bb8:	8031                	srli	s0,s0,0xc
20400bba:	147d                	addi	s0,s0,-1
20400bbc:	0432                	slli	s0,s0,0xc
20400bbe:	00e45d63          	bge	s0,a4,20400bd8 <_malloc_trim_r+0x50>
20400bc2:	854a                	mv	a0,s2
20400bc4:	5e5000ef          	jal	ra,204019a8 <__malloc_unlock>
20400bc8:	4501                	li	a0,0
20400bca:	40f2                	lw	ra,28(sp)
20400bcc:	4462                	lw	s0,24(sp)
20400bce:	44d2                	lw	s1,20(sp)
20400bd0:	4942                	lw	s2,16(sp)
20400bd2:	49b2                	lw	s3,12(sp)
20400bd4:	6105                	addi	sp,sp,32
20400bd6:	8082                	ret
20400bd8:	4581                	li	a1,0
20400bda:	854a                	mv	a0,s2
20400bdc:	15e010ef          	jal	ra,20401d3a <_sbrk_r>
20400be0:	0089a783          	lw	a5,8(s3)
20400be4:	97a6                	add	a5,a5,s1
20400be6:	fcf51ee3          	bne	a0,a5,20400bc2 <_malloc_trim_r+0x3a>
20400bea:	408005b3          	neg	a1,s0
20400bee:	854a                	mv	a0,s2
20400bf0:	14a010ef          	jal	ra,20401d3a <_sbrk_r>
20400bf4:	57fd                	li	a5,-1
20400bf6:	02f51b63          	bne	a0,a5,20400c2c <_malloc_trim_r+0xa4>
20400bfa:	4581                	li	a1,0
20400bfc:	854a                	mv	a0,s2
20400bfe:	13c010ef          	jal	ra,20401d3a <_sbrk_r>
20400c02:	0089a703          	lw	a4,8(s3)
20400c06:	46bd                	li	a3,15
20400c08:	40e507b3          	sub	a5,a0,a4
20400c0c:	faf6dbe3          	bge	a3,a5,20400bc2 <_malloc_trim_r+0x3a>
20400c10:	5fc00697          	auipc	a3,0x5fc00
20400c14:	42468693          	addi	a3,a3,1060 # 80001034 <__malloc_sbrk_base>
20400c18:	4294                	lw	a3,0(a3)
20400c1a:	0017e793          	ori	a5,a5,1
20400c1e:	c35c                	sw	a5,4(a4)
20400c20:	8d15                	sub	a0,a0,a3
20400c22:	5fc00697          	auipc	a3,0x5fc00
20400c26:	42a6af23          	sw	a0,1086(a3) # 80001060 <__malloc_current_mallinfo>
20400c2a:	bf61                	j	20400bc2 <_malloc_trim_r+0x3a>
20400c2c:	0089a783          	lw	a5,8(s3)
20400c30:	8c81                	sub	s1,s1,s0
20400c32:	0014e493          	ori	s1,s1,1
20400c36:	c3c4                	sw	s1,4(a5)
20400c38:	5fc00797          	auipc	a5,0x5fc00
20400c3c:	42878793          	addi	a5,a5,1064 # 80001060 <__malloc_current_mallinfo>
20400c40:	439c                	lw	a5,0(a5)
20400c42:	854a                	mv	a0,s2
20400c44:	40878433          	sub	s0,a5,s0
20400c48:	5fc00797          	auipc	a5,0x5fc00
20400c4c:	4087ac23          	sw	s0,1048(a5) # 80001060 <__malloc_current_mallinfo>
20400c50:	559000ef          	jal	ra,204019a8 <__malloc_unlock>
20400c54:	4505                	li	a0,1
20400c56:	bf95                	j	20400bca <_malloc_trim_r+0x42>

20400c58 <_free_r>:
_free_r():
20400c58:	1c058763          	beqz	a1,20400e26 <_free_r+0x1ce>
20400c5c:	1141                	addi	sp,sp,-16
20400c5e:	c422                	sw	s0,8(sp)
20400c60:	c226                	sw	s1,4(sp)
20400c62:	842a                	mv	s0,a0
20400c64:	84ae                	mv	s1,a1
20400c66:	c606                	sw	ra,12(sp)
20400c68:	53f000ef          	jal	ra,204019a6 <__malloc_lock>
20400c6c:	ffc4a583          	lw	a1,-4(s1)
20400c70:	ff848693          	addi	a3,s1,-8
20400c74:	5fbff517          	auipc	a0,0x5fbff
20400c78:	7b450513          	addi	a0,a0,1972 # 80000428 <__malloc_av_>
20400c7c:	ffe5f793          	andi	a5,a1,-2
20400c80:	00f68633          	add	a2,a3,a5
20400c84:	4258                	lw	a4,4(a2)
20400c86:	00852803          	lw	a6,8(a0)
20400c8a:	8985                	andi	a1,a1,1
20400c8c:	9b71                	andi	a4,a4,-4
20400c8e:	04c81863          	bne	a6,a2,20400cde <_free_r+0x86>
20400c92:	97ba                	add	a5,a5,a4
20400c94:	e989                	bnez	a1,20400ca6 <_free_r+0x4e>
20400c96:	ff84a703          	lw	a4,-8(s1)
20400c9a:	8e99                	sub	a3,a3,a4
20400c9c:	4690                	lw	a2,8(a3)
20400c9e:	97ba                	add	a5,a5,a4
20400ca0:	46d8                	lw	a4,12(a3)
20400ca2:	c658                	sw	a4,12(a2)
20400ca4:	c710                	sw	a2,8(a4)
20400ca6:	0017e713          	ori	a4,a5,1
20400caa:	c2d8                	sw	a4,4(a3)
20400cac:	5fbff717          	auipc	a4,0x5fbff
20400cb0:	78d72223          	sw	a3,1924(a4) # 80000430 <__malloc_av_+0x8>
20400cb4:	5fc00717          	auipc	a4,0x5fc00
20400cb8:	38470713          	addi	a4,a4,900 # 80001038 <__malloc_trim_threshold>
20400cbc:	4318                	lw	a4,0(a4)
20400cbe:	00e7e963          	bltu	a5,a4,20400cd0 <_free_r+0x78>
20400cc2:	5fc00797          	auipc	a5,0x5fc00
20400cc6:	39a78793          	addi	a5,a5,922 # 8000105c <__malloc_top_pad>
20400cca:	438c                	lw	a1,0(a5)
20400ccc:	8522                	mv	a0,s0
20400cce:	3d6d                	jal	20400b88 <_malloc_trim_r>
20400cd0:	8522                	mv	a0,s0
20400cd2:	4422                	lw	s0,8(sp)
20400cd4:	40b2                	lw	ra,12(sp)
20400cd6:	4492                	lw	s1,4(sp)
20400cd8:	0141                	addi	sp,sp,16
20400cda:	4cf0006f          	j	204019a8 <__malloc_unlock>
20400cde:	c258                	sw	a4,4(a2)
20400ce0:	4801                	li	a6,0
20400ce2:	e195                	bnez	a1,20400d06 <_free_r+0xae>
20400ce4:	ff84a583          	lw	a1,-8(s1)
20400ce8:	5fbff897          	auipc	a7,0x5fbff
20400cec:	74888893          	addi	a7,a7,1864 # 80000430 <__malloc_av_+0x8>
20400cf0:	8e8d                	sub	a3,a3,a1
20400cf2:	97ae                	add	a5,a5,a1
20400cf4:	468c                	lw	a1,8(a3)
20400cf6:	09158563          	beq	a1,a7,20400d80 <_free_r+0x128>
20400cfa:	00c6a883          	lw	a7,12(a3)
20400cfe:	0115a623          	sw	a7,12(a1)
20400d02:	00b8a423          	sw	a1,8(a7)
20400d06:	00e605b3          	add	a1,a2,a4
20400d0a:	41cc                	lw	a1,4(a1)
20400d0c:	8985                	andi	a1,a1,1
20400d0e:	e595                	bnez	a1,20400d3a <_free_r+0xe2>
20400d10:	97ba                	add	a5,a5,a4
20400d12:	4618                	lw	a4,8(a2)
20400d14:	06081863          	bnez	a6,20400d84 <_free_r+0x12c>
20400d18:	5fbff597          	auipc	a1,0x5fbff
20400d1c:	71858593          	addi	a1,a1,1816 # 80000430 <__malloc_av_+0x8>
20400d20:	06b71263          	bne	a4,a1,20400d84 <_free_r+0x12c>
20400d24:	5fbff617          	auipc	a2,0x5fbff
20400d28:	70d62c23          	sw	a3,1816(a2) # 8000043c <__malloc_av_+0x14>
20400d2c:	5fbff617          	auipc	a2,0x5fbff
20400d30:	70d62623          	sw	a3,1804(a2) # 80000438 <__malloc_av_+0x10>
20400d34:	c6d8                	sw	a4,12(a3)
20400d36:	c698                	sw	a4,8(a3)
20400d38:	4805                	li	a6,1
20400d3a:	0017e713          	ori	a4,a5,1
20400d3e:	c2d8                	sw	a4,4(a3)
20400d40:	00f68733          	add	a4,a3,a5
20400d44:	c31c                	sw	a5,0(a4)
20400d46:	f80815e3          	bnez	a6,20400cd0 <_free_r+0x78>
20400d4a:	1ff00713          	li	a4,511
20400d4e:	02f76f63          	bltu	a4,a5,20400d8c <_free_r+0x134>
20400d52:	838d                	srli	a5,a5,0x3
20400d54:	4027d613          	srai	a2,a5,0x2
20400d58:	4705                	li	a4,1
20400d5a:	00c71733          	sll	a4,a4,a2
20400d5e:	4150                	lw	a2,4(a0)
20400d60:	0785                	addi	a5,a5,1
20400d62:	078e                	slli	a5,a5,0x3
20400d64:	8f51                	or	a4,a4,a2
20400d66:	97aa                	add	a5,a5,a0
20400d68:	5fbff617          	auipc	a2,0x5fbff
20400d6c:	6ce62223          	sw	a4,1732(a2) # 8000042c <__malloc_av_+0x4>
20400d70:	4398                	lw	a4,0(a5)
20400d72:	ff878613          	addi	a2,a5,-8
20400d76:	c6d0                	sw	a2,12(a3)
20400d78:	c698                	sw	a4,8(a3)
20400d7a:	c394                	sw	a3,0(a5)
20400d7c:	c754                	sw	a3,12(a4)
20400d7e:	bf89                	j	20400cd0 <_free_r+0x78>
20400d80:	4805                	li	a6,1
20400d82:	b751                	j	20400d06 <_free_r+0xae>
20400d84:	4650                	lw	a2,12(a2)
20400d86:	c750                	sw	a2,12(a4)
20400d88:	c618                	sw	a4,8(a2)
20400d8a:	bf45                	j	20400d3a <_free_r+0xe2>
20400d8c:	0097d613          	srli	a2,a5,0x9
20400d90:	4711                	li	a4,4
20400d92:	02c76e63          	bltu	a4,a2,20400dce <_free_r+0x176>
20400d96:	0067d713          	srli	a4,a5,0x6
20400d9a:	03870713          	addi	a4,a4,56
20400d9e:	00170613          	addi	a2,a4,1
20400da2:	060e                	slli	a2,a2,0x3
20400da4:	962a                	add	a2,a2,a0
20400da6:	ff860593          	addi	a1,a2,-8
20400daa:	4210                	lw	a2,0(a2)
20400dac:	06c59763          	bne	a1,a2,20400e1a <_free_r+0x1c2>
20400db0:	4785                	li	a5,1
20400db2:	8709                	srai	a4,a4,0x2
20400db4:	00e79733          	sll	a4,a5,a4
20400db8:	415c                	lw	a5,4(a0)
20400dba:	8f5d                	or	a4,a4,a5
20400dbc:	5fbff797          	auipc	a5,0x5fbff
20400dc0:	66e7a823          	sw	a4,1648(a5) # 8000042c <__malloc_av_+0x4>
20400dc4:	c6cc                	sw	a1,12(a3)
20400dc6:	c690                	sw	a2,8(a3)
20400dc8:	c594                	sw	a3,8(a1)
20400dca:	c654                	sw	a3,12(a2)
20400dcc:	b711                	j	20400cd0 <_free_r+0x78>
20400dce:	4751                	li	a4,20
20400dd0:	00c76563          	bltu	a4,a2,20400dda <_free_r+0x182>
20400dd4:	05b60713          	addi	a4,a2,91
20400dd8:	b7d9                	j	20400d9e <_free_r+0x146>
20400dda:	05400713          	li	a4,84
20400dde:	00c76763          	bltu	a4,a2,20400dec <_free_r+0x194>
20400de2:	00c7d713          	srli	a4,a5,0xc
20400de6:	06e70713          	addi	a4,a4,110
20400dea:	bf55                	j	20400d9e <_free_r+0x146>
20400dec:	15400713          	li	a4,340
20400df0:	00c76763          	bltu	a4,a2,20400dfe <_free_r+0x1a6>
20400df4:	00f7d713          	srli	a4,a5,0xf
20400df8:	07770713          	addi	a4,a4,119
20400dfc:	b74d                	j	20400d9e <_free_r+0x146>
20400dfe:	55400593          	li	a1,1364
20400e02:	07e00713          	li	a4,126
20400e06:	f8c5ece3          	bltu	a1,a2,20400d9e <_free_r+0x146>
20400e0a:	0127d713          	srli	a4,a5,0x12
20400e0e:	07c70713          	addi	a4,a4,124
20400e12:	b771                	j	20400d9e <_free_r+0x146>
20400e14:	4610                	lw	a2,8(a2)
20400e16:	00c58663          	beq	a1,a2,20400e22 <_free_r+0x1ca>
20400e1a:	4258                	lw	a4,4(a2)
20400e1c:	9b71                	andi	a4,a4,-4
20400e1e:	fee7ebe3          	bltu	a5,a4,20400e14 <_free_r+0x1bc>
20400e22:	464c                	lw	a1,12(a2)
20400e24:	b745                	j	20400dc4 <_free_r+0x16c>
20400e26:	8082                	ret

20400e28 <__sfvwrite_r>:
__sfvwrite_r():
20400e28:	461c                	lw	a5,8(a2)
20400e2a:	e781                	bnez	a5,20400e32 <__sfvwrite_r+0xa>
20400e2c:	4781                	li	a5,0
20400e2e:	853e                	mv	a0,a5
20400e30:	8082                	ret
20400e32:	00c5d783          	lhu	a5,12(a1)
20400e36:	715d                	addi	sp,sp,-80
20400e38:	c4a2                	sw	s0,72(sp)
20400e3a:	c0ca                	sw	s2,64(sp)
20400e3c:	da56                	sw	s5,52(sp)
20400e3e:	c686                	sw	ra,76(sp)
20400e40:	c2a6                	sw	s1,68(sp)
20400e42:	de4e                	sw	s3,60(sp)
20400e44:	dc52                	sw	s4,56(sp)
20400e46:	d85a                	sw	s6,48(sp)
20400e48:	d65e                	sw	s7,44(sp)
20400e4a:	d462                	sw	s8,40(sp)
20400e4c:	d266                	sw	s9,36(sp)
20400e4e:	d06a                	sw	s10,32(sp)
20400e50:	ce6e                	sw	s11,28(sp)
20400e52:	8ba1                	andi	a5,a5,8
20400e54:	8ab2                	mv	s5,a2
20400e56:	842e                	mv	s0,a1
20400e58:	892a                	mv	s2,a0
20400e5a:	cfc9                	beqz	a5,20400ef4 <__sfvwrite_r+0xcc>
20400e5c:	499c                	lw	a5,16(a1)
20400e5e:	cbd9                	beqz	a5,20400ef4 <__sfvwrite_r+0xcc>
20400e60:	00c45783          	lhu	a5,12(s0)
20400e64:	000aaa03          	lw	s4,0(s5)
20400e68:	0027f713          	andi	a4,a5,2
20400e6c:	0e071663          	bnez	a4,20400f58 <__sfvwrite_r+0x130>
20400e70:	8b85                	andi	a5,a5,1
20400e72:	14078e63          	beqz	a5,20400fce <__sfvwrite_r+0x1a6>
20400e76:	4b81                	li	s7,0
20400e78:	4501                	li	a0,0
20400e7a:	4b01                	li	s6,0
20400e7c:	4981                	li	s3,0
20400e7e:	24098563          	beqz	s3,204010c8 <__sfvwrite_r+0x2a0>
20400e82:	ed01                	bnez	a0,20400e9a <__sfvwrite_r+0x72>
20400e84:	864e                	mv	a2,s3
20400e86:	45a9                	li	a1,10
20400e88:	855a                	mv	a0,s6
20400e8a:	15b000ef          	jal	ra,204017e4 <memchr>
20400e8e:	00198b93          	addi	s7,s3,1
20400e92:	c501                	beqz	a0,20400e9a <__sfvwrite_r+0x72>
20400e94:	0505                	addi	a0,a0,1
20400e96:	41650bb3          	sub	s7,a0,s6
20400e9a:	8c5e                	mv	s8,s7
20400e9c:	0179f363          	bgeu	s3,s7,20400ea2 <__sfvwrite_r+0x7a>
20400ea0:	8c4e                	mv	s8,s3
20400ea2:	4008                	lw	a0,0(s0)
20400ea4:	481c                	lw	a5,16(s0)
20400ea6:	4854                	lw	a3,20(s0)
20400ea8:	22a7f763          	bgeu	a5,a0,204010d6 <__sfvwrite_r+0x2ae>
20400eac:	4404                	lw	s1,8(s0)
20400eae:	94b6                	add	s1,s1,a3
20400eb0:	2384d363          	bge	s1,s8,204010d6 <__sfvwrite_r+0x2ae>
20400eb4:	85da                	mv	a1,s6
20400eb6:	8626                	mv	a2,s1
20400eb8:	1fd000ef          	jal	ra,204018b4 <memmove>
20400ebc:	401c                	lw	a5,0(s0)
20400ebe:	85a2                	mv	a1,s0
20400ec0:	854a                	mv	a0,s2
20400ec2:	97a6                	add	a5,a5,s1
20400ec4:	c01c                	sw	a5,0(s0)
20400ec6:	3469                	jal	20400950 <_fflush_r>
20400ec8:	0e051b63          	bnez	a0,20400fbe <__sfvwrite_r+0x196>
20400ecc:	409b8bb3          	sub	s7,s7,s1
20400ed0:	4505                	li	a0,1
20400ed2:	000b9663          	bnez	s7,20400ede <__sfvwrite_r+0xb6>
20400ed6:	85a2                	mv	a1,s0
20400ed8:	854a                	mv	a0,s2
20400eda:	3c9d                	jal	20400950 <_fflush_r>
20400edc:	e16d                	bnez	a0,20400fbe <__sfvwrite_r+0x196>
20400ede:	008aa783          	lw	a5,8(s5)
20400ee2:	9b26                	add	s6,s6,s1
20400ee4:	409989b3          	sub	s3,s3,s1
20400ee8:	409784b3          	sub	s1,a5,s1
20400eec:	009aa423          	sw	s1,8(s5)
20400ef0:	f4d9                	bnez	s1,20400e7e <__sfvwrite_r+0x56>
20400ef2:	a091                	j	20400f36 <__sfvwrite_r+0x10e>
20400ef4:	85a2                	mv	a1,s0
20400ef6:	854a                	mv	a0,s2
20400ef8:	823ff0ef          	jal	ra,2040071a <__swsetup_r>
20400efc:	57fd                	li	a5,-1
20400efe:	d12d                	beqz	a0,20400e60 <__sfvwrite_r+0x38>
20400f00:	a825                	j	20400f38 <__sfvwrite_r+0x110>
20400f02:	000a2983          	lw	s3,0(s4)
20400f06:	004a2483          	lw	s1,4(s4)
20400f0a:	0a21                	addi	s4,s4,8
20400f0c:	d8fd                	beqz	s1,20400f02 <__sfvwrite_r+0xda>
20400f0e:	86a6                	mv	a3,s1
20400f10:	009b7363          	bgeu	s6,s1,20400f16 <__sfvwrite_r+0xee>
20400f14:	86da                	mv	a3,s6
20400f16:	505c                	lw	a5,36(s0)
20400f18:	4c4c                	lw	a1,28(s0)
20400f1a:	864e                	mv	a2,s3
20400f1c:	854a                	mv	a0,s2
20400f1e:	9782                	jalr	a5
20400f20:	08a05f63          	blez	a0,20400fbe <__sfvwrite_r+0x196>
20400f24:	008aa783          	lw	a5,8(s5)
20400f28:	99aa                	add	s3,s3,a0
20400f2a:	8c89                	sub	s1,s1,a0
20400f2c:	40a78533          	sub	a0,a5,a0
20400f30:	00aaa423          	sw	a0,8(s5)
20400f34:	fd61                	bnez	a0,20400f0c <__sfvwrite_r+0xe4>
20400f36:	4781                	li	a5,0
20400f38:	40b6                	lw	ra,76(sp)
20400f3a:	4426                	lw	s0,72(sp)
20400f3c:	4496                	lw	s1,68(sp)
20400f3e:	4906                	lw	s2,64(sp)
20400f40:	59f2                	lw	s3,60(sp)
20400f42:	5a62                	lw	s4,56(sp)
20400f44:	5ad2                	lw	s5,52(sp)
20400f46:	5b42                	lw	s6,48(sp)
20400f48:	5bb2                	lw	s7,44(sp)
20400f4a:	5c22                	lw	s8,40(sp)
20400f4c:	5c92                	lw	s9,36(sp)
20400f4e:	5d02                	lw	s10,32(sp)
20400f50:	4df2                	lw	s11,28(sp)
20400f52:	853e                	mv	a0,a5
20400f54:	6161                	addi	sp,sp,80
20400f56:	8082                	ret
20400f58:	80000b37          	lui	s6,0x80000
20400f5c:	4981                	li	s3,0
20400f5e:	4481                	li	s1,0
20400f60:	c00b4b13          	xori	s6,s6,-1024
20400f64:	b765                	j	20400f0c <__sfvwrite_r+0xe4>
20400f66:	000a2b03          	lw	s6,0(s4)
20400f6a:	004a2483          	lw	s1,4(s4)
20400f6e:	0a21                	addi	s4,s4,8
20400f70:	d8fd                	beqz	s1,20400f66 <__sfvwrite_r+0x13e>
20400f72:	00c45703          	lhu	a4,12(s0)
20400f76:	441c                	lw	a5,8(s0)
20400f78:	4008                	lw	a0,0(s0)
20400f7a:	20077693          	andi	a3,a4,512
20400f7e:	0e068863          	beqz	a3,2040106e <__sfvwrite_r+0x246>
20400f82:	08f4e963          	bltu	s1,a5,20401014 <__sfvwrite_r+0x1ec>
20400f86:	48077693          	andi	a3,a4,1152
20400f8a:	c6c9                	beqz	a3,20401014 <__sfvwrite_r+0x1ec>
20400f8c:	01442d83          	lw	s11,20(s0)
20400f90:	480c                	lw	a1,16(s0)
20400f92:	03bc8db3          	mul	s11,s9,s11
20400f96:	40b509b3          	sub	s3,a0,a1
20400f9a:	00198793          	addi	a5,s3,1
20400f9e:	97a6                	add	a5,a5,s1
20400fa0:	03adcdb3          	div	s11,s11,s10
20400fa4:	00fdf363          	bgeu	s11,a5,20400faa <__sfvwrite_r+0x182>
20400fa8:	8dbe                	mv	s11,a5
20400faa:	40077713          	andi	a4,a4,1024
20400fae:	c345                	beqz	a4,2040104e <__sfvwrite_r+0x226>
20400fb0:	85ee                	mv	a1,s11
20400fb2:	854a                	mv	a0,s2
20400fb4:	2615                	jal	204012d8 <_malloc_r>
20400fb6:	e51d                	bnez	a0,20400fe4 <__sfvwrite_r+0x1bc>
20400fb8:	47b1                	li	a5,12
20400fba:	00f92023          	sw	a5,0(s2)
20400fbe:	00c45783          	lhu	a5,12(s0)
20400fc2:	0407e793          	ori	a5,a5,64
20400fc6:	00f41623          	sh	a5,12(s0)
20400fca:	57fd                	li	a5,-1
20400fcc:	b7b5                	j	20400f38 <__sfvwrite_r+0x110>
20400fce:	80000bb7          	lui	s7,0x80000
20400fd2:	ffebcc13          	xori	s8,s7,-2
20400fd6:	4b01                	li	s6,0
20400fd8:	4481                	li	s1,0
20400fda:	fffbcb93          	not	s7,s7
20400fde:	4c8d                	li	s9,3
20400fe0:	4d09                	li	s10,2
20400fe2:	b779                	j	20400f70 <__sfvwrite_r+0x148>
20400fe4:	480c                	lw	a1,16(s0)
20400fe6:	864e                	mv	a2,s3
20400fe8:	c62a                	sw	a0,12(sp)
20400fea:	015000ef          	jal	ra,204017fe <memcpy>
20400fee:	00c45703          	lhu	a4,12(s0)
20400ff2:	47b2                	lw	a5,12(sp)
20400ff4:	b7f77713          	andi	a4,a4,-1153
20400ff8:	08076713          	ori	a4,a4,128
20400ffc:	00e41623          	sh	a4,12(s0)
20401000:	c81c                	sw	a5,16(s0)
20401002:	01b42a23          	sw	s11,20(s0)
20401006:	97ce                	add	a5,a5,s3
20401008:	413d8db3          	sub	s11,s11,s3
2040100c:	c01c                	sw	a5,0(s0)
2040100e:	01b42423          	sw	s11,8(s0)
20401012:	87a6                	mv	a5,s1
20401014:	89a6                	mv	s3,s1
20401016:	00f4f363          	bgeu	s1,a5,2040101c <__sfvwrite_r+0x1f4>
2040101a:	87a6                	mv	a5,s1
2040101c:	4008                	lw	a0,0(s0)
2040101e:	863e                	mv	a2,a5
20401020:	85da                	mv	a1,s6
20401022:	c63e                	sw	a5,12(sp)
20401024:	091000ef          	jal	ra,204018b4 <memmove>
20401028:	4418                	lw	a4,8(s0)
2040102a:	47b2                	lw	a5,12(sp)
2040102c:	8f1d                	sub	a4,a4,a5
2040102e:	c418                	sw	a4,8(s0)
20401030:	4018                	lw	a4,0(s0)
20401032:	97ba                	add	a5,a5,a4
20401034:	c01c                	sw	a5,0(s0)
20401036:	008aa783          	lw	a5,8(s5)
2040103a:	9b4e                	add	s6,s6,s3
2040103c:	413484b3          	sub	s1,s1,s3
20401040:	413789b3          	sub	s3,a5,s3
20401044:	013aa423          	sw	s3,8(s5)
20401048:	f20994e3          	bnez	s3,20400f70 <__sfvwrite_r+0x148>
2040104c:	b5ed                	j	20400f36 <__sfvwrite_r+0x10e>
2040104e:	866e                	mv	a2,s11
20401050:	854a                	mv	a0,s2
20401052:	159000ef          	jal	ra,204019aa <_realloc_r>
20401056:	87aa                	mv	a5,a0
20401058:	f545                	bnez	a0,20401000 <__sfvwrite_r+0x1d8>
2040105a:	480c                	lw	a1,16(s0)
2040105c:	854a                	mv	a0,s2
2040105e:	3eed                	jal	20400c58 <_free_r>
20401060:	00c45783          	lhu	a5,12(s0)
20401064:	f7f7f793          	andi	a5,a5,-129
20401068:	00f41623          	sh	a5,12(s0)
2040106c:	b7b1                	j	20400fb8 <__sfvwrite_r+0x190>
2040106e:	4818                	lw	a4,16(s0)
20401070:	00a76563          	bltu	a4,a0,2040107a <__sfvwrite_r+0x252>
20401074:	4854                	lw	a3,20(s0)
20401076:	02d4f863          	bgeu	s1,a3,204010a6 <__sfvwrite_r+0x27e>
2040107a:	89be                	mv	s3,a5
2040107c:	00f4f363          	bgeu	s1,a5,20401082 <__sfvwrite_r+0x25a>
20401080:	89a6                	mv	s3,s1
20401082:	864e                	mv	a2,s3
20401084:	85da                	mv	a1,s6
20401086:	02f000ef          	jal	ra,204018b4 <memmove>
2040108a:	441c                	lw	a5,8(s0)
2040108c:	4018                	lw	a4,0(s0)
2040108e:	413787b3          	sub	a5,a5,s3
20401092:	974e                	add	a4,a4,s3
20401094:	c41c                	sw	a5,8(s0)
20401096:	c018                	sw	a4,0(s0)
20401098:	ffd9                	bnez	a5,20401036 <__sfvwrite_r+0x20e>
2040109a:	85a2                	mv	a1,s0
2040109c:	854a                	mv	a0,s2
2040109e:	8b3ff0ef          	jal	ra,20400950 <_fflush_r>
204010a2:	d951                	beqz	a0,20401036 <__sfvwrite_r+0x20e>
204010a4:	bf29                	j	20400fbe <__sfvwrite_r+0x196>
204010a6:	87a6                	mv	a5,s1
204010a8:	009c7363          	bgeu	s8,s1,204010ae <__sfvwrite_r+0x286>
204010ac:	87de                	mv	a5,s7
204010ae:	02d7c7b3          	div	a5,a5,a3
204010b2:	5058                	lw	a4,36(s0)
204010b4:	4c4c                	lw	a1,28(s0)
204010b6:	865a                	mv	a2,s6
204010b8:	854a                	mv	a0,s2
204010ba:	02d786b3          	mul	a3,a5,a3
204010be:	9702                	jalr	a4
204010c0:	89aa                	mv	s3,a0
204010c2:	f6a04ae3          	bgtz	a0,20401036 <__sfvwrite_r+0x20e>
204010c6:	bde5                	j	20400fbe <__sfvwrite_r+0x196>
204010c8:	000a2b03          	lw	s6,0(s4)
204010cc:	004a2983          	lw	s3,4(s4)
204010d0:	4501                	li	a0,0
204010d2:	0a21                	addi	s4,s4,8
204010d4:	b36d                	j	20400e7e <__sfvwrite_r+0x56>
204010d6:	00dc4b63          	blt	s8,a3,204010ec <__sfvwrite_r+0x2c4>
204010da:	505c                	lw	a5,36(s0)
204010dc:	4c4c                	lw	a1,28(s0)
204010de:	865a                	mv	a2,s6
204010e0:	854a                	mv	a0,s2
204010e2:	9782                	jalr	a5
204010e4:	84aa                	mv	s1,a0
204010e6:	dea043e3          	bgtz	a0,20400ecc <__sfvwrite_r+0xa4>
204010ea:	bdd1                	j	20400fbe <__sfvwrite_r+0x196>
204010ec:	8662                	mv	a2,s8
204010ee:	85da                	mv	a1,s6
204010f0:	7c4000ef          	jal	ra,204018b4 <memmove>
204010f4:	441c                	lw	a5,8(s0)
204010f6:	84e2                	mv	s1,s8
204010f8:	418787b3          	sub	a5,a5,s8
204010fc:	c41c                	sw	a5,8(s0)
204010fe:	401c                	lw	a5,0(s0)
20401100:	97e2                	add	a5,a5,s8
20401102:	c01c                	sw	a5,0(s0)
20401104:	b3e1                	j	20400ecc <__sfvwrite_r+0xa4>

20401106 <_fwalk>:
_fwalk():
20401106:	7179                	addi	sp,sp,-48
20401108:	d422                	sw	s0,40(sp)
2040110a:	d04a                	sw	s2,32(sp)
2040110c:	cc52                	sw	s4,24(sp)
2040110e:	ca56                	sw	s5,20(sp)
20401110:	d606                	sw	ra,44(sp)
20401112:	d226                	sw	s1,36(sp)
20401114:	ce4e                	sw	s3,28(sp)
20401116:	2e050413          	addi	s0,a0,736
2040111a:	4901                	li	s2,0
2040111c:	4a05                	li	s4,1
2040111e:	5afd                	li	s5,-1
20401120:	e819                	bnez	s0,20401136 <_fwalk+0x30>
20401122:	50b2                	lw	ra,44(sp)
20401124:	5422                	lw	s0,40(sp)
20401126:	854a                	mv	a0,s2
20401128:	5492                	lw	s1,36(sp)
2040112a:	5902                	lw	s2,32(sp)
2040112c:	49f2                	lw	s3,28(sp)
2040112e:	4a62                	lw	s4,24(sp)
20401130:	4ad2                	lw	s5,20(sp)
20401132:	6145                	addi	sp,sp,48
20401134:	8082                	ret
20401136:	4404                	lw	s1,8(s0)
20401138:	00442983          	lw	s3,4(s0)
2040113c:	19fd                	addi	s3,s3,-1
2040113e:	0009d463          	bgez	s3,20401146 <_fwalk+0x40>
20401142:	4000                	lw	s0,0(s0)
20401144:	bff1                	j	20401120 <_fwalk+0x1a>
20401146:	00c4d783          	lhu	a5,12(s1)
2040114a:	00fa7c63          	bgeu	s4,a5,20401162 <_fwalk+0x5c>
2040114e:	00e49783          	lh	a5,14(s1)
20401152:	01578863          	beq	a5,s5,20401162 <_fwalk+0x5c>
20401156:	8526                	mv	a0,s1
20401158:	c62e                	sw	a1,12(sp)
2040115a:	9582                	jalr	a1
2040115c:	45b2                	lw	a1,12(sp)
2040115e:	00a96933          	or	s2,s2,a0
20401162:	06848493          	addi	s1,s1,104
20401166:	bfd9                	j	2040113c <_fwalk+0x36>

20401168 <_fwalk_reent>:
_fwalk_reent():
20401168:	7179                	addi	sp,sp,-48
2040116a:	d422                	sw	s0,40(sp)
2040116c:	d04a                	sw	s2,32(sp)
2040116e:	cc52                	sw	s4,24(sp)
20401170:	ca56                	sw	s5,20(sp)
20401172:	c85a                	sw	s6,16(sp)
20401174:	c65e                	sw	s7,12(sp)
20401176:	d606                	sw	ra,44(sp)
20401178:	d226                	sw	s1,36(sp)
2040117a:	ce4e                	sw	s3,28(sp)
2040117c:	8a2a                	mv	s4,a0
2040117e:	8aae                	mv	s5,a1
20401180:	2e050413          	addi	s0,a0,736
20401184:	4901                	li	s2,0
20401186:	4b05                	li	s6,1
20401188:	5bfd                	li	s7,-1
2040118a:	ec09                	bnez	s0,204011a4 <_fwalk_reent+0x3c>
2040118c:	50b2                	lw	ra,44(sp)
2040118e:	5422                	lw	s0,40(sp)
20401190:	854a                	mv	a0,s2
20401192:	5492                	lw	s1,36(sp)
20401194:	5902                	lw	s2,32(sp)
20401196:	49f2                	lw	s3,28(sp)
20401198:	4a62                	lw	s4,24(sp)
2040119a:	4ad2                	lw	s5,20(sp)
2040119c:	4b42                	lw	s6,16(sp)
2040119e:	4bb2                	lw	s7,12(sp)
204011a0:	6145                	addi	sp,sp,48
204011a2:	8082                	ret
204011a4:	4404                	lw	s1,8(s0)
204011a6:	00442983          	lw	s3,4(s0)
204011aa:	19fd                	addi	s3,s3,-1
204011ac:	0009d463          	bgez	s3,204011b4 <_fwalk_reent+0x4c>
204011b0:	4000                	lw	s0,0(s0)
204011b2:	bfe1                	j	2040118a <_fwalk_reent+0x22>
204011b4:	00c4d783          	lhu	a5,12(s1)
204011b8:	00fb7b63          	bgeu	s6,a5,204011ce <_fwalk_reent+0x66>
204011bc:	00e49783          	lh	a5,14(s1)
204011c0:	01778763          	beq	a5,s7,204011ce <_fwalk_reent+0x66>
204011c4:	85a6                	mv	a1,s1
204011c6:	8552                	mv	a0,s4
204011c8:	9a82                	jalr	s5
204011ca:	00a96933          	or	s2,s2,a0
204011ce:	06848493          	addi	s1,s1,104
204011d2:	bfe1                	j	204011aa <_fwalk_reent+0x42>

204011d4 <__swhatbuf_r>:
__swhatbuf_r():
204011d4:	7119                	addi	sp,sp,-128
204011d6:	daa6                	sw	s1,116(sp)
204011d8:	84ae                	mv	s1,a1
204011da:	00e59583          	lh	a1,14(a1)
204011de:	dca2                	sw	s0,120(sp)
204011e0:	de86                	sw	ra,124(sp)
204011e2:	8432                	mv	s0,a2
204011e4:	0005dc63          	bgez	a1,204011fc <__swhatbuf_r+0x28>
204011e8:	00c4d783          	lhu	a5,12(s1)
204011ec:	0006a023          	sw	zero,0(a3)
204011f0:	0807f793          	andi	a5,a5,128
204011f4:	eb95                	bnez	a5,20401228 <__swhatbuf_r+0x54>
204011f6:	40000793          	li	a5,1024
204011fa:	a80d                	j	2040122c <__swhatbuf_r+0x58>
204011fc:	0830                	addi	a2,sp,24
204011fe:	c636                	sw	a3,12(sp)
20401200:	52f000ef          	jal	ra,20401f2e <_fstat_r>
20401204:	46b2                	lw	a3,12(sp)
20401206:	fe0541e3          	bltz	a0,204011e8 <__swhatbuf_r+0x14>
2040120a:	4772                	lw	a4,28(sp)
2040120c:	67bd                	lui	a5,0xf
2040120e:	6505                	lui	a0,0x1
20401210:	8ff9                	and	a5,a5,a4
20401212:	7779                	lui	a4,0xffffe
20401214:	97ba                	add	a5,a5,a4
20401216:	0017b793          	seqz	a5,a5
2040121a:	c29c                	sw	a5,0(a3)
2040121c:	40000793          	li	a5,1024
20401220:	c01c                	sw	a5,0(s0)
20401222:	80050513          	addi	a0,a0,-2048 # 800 <__heap_size+0x400>
20401226:	a029                	j	20401230 <__swhatbuf_r+0x5c>
20401228:	04000793          	li	a5,64
2040122c:	c01c                	sw	a5,0(s0)
2040122e:	4501                	li	a0,0
20401230:	50f6                	lw	ra,124(sp)
20401232:	5466                	lw	s0,120(sp)
20401234:	54d6                	lw	s1,116(sp)
20401236:	6109                	addi	sp,sp,128
20401238:	8082                	ret

2040123a <__smakebuf_r>:
__smakebuf_r():
2040123a:	00c5d783          	lhu	a5,12(a1)
2040123e:	1101                	addi	sp,sp,-32
20401240:	cc22                	sw	s0,24(sp)
20401242:	ce06                	sw	ra,28(sp)
20401244:	ca26                	sw	s1,20(sp)
20401246:	c84a                	sw	s2,16(sp)
20401248:	8b89                	andi	a5,a5,2
2040124a:	842e                	mv	s0,a1
2040124c:	cf89                	beqz	a5,20401266 <__smakebuf_r+0x2c>
2040124e:	04340793          	addi	a5,s0,67
20401252:	c01c                	sw	a5,0(s0)
20401254:	c81c                	sw	a5,16(s0)
20401256:	4785                	li	a5,1
20401258:	c85c                	sw	a5,20(s0)
2040125a:	40f2                	lw	ra,28(sp)
2040125c:	4462                	lw	s0,24(sp)
2040125e:	44d2                	lw	s1,20(sp)
20401260:	4942                	lw	s2,16(sp)
20401262:	6105                	addi	sp,sp,32
20401264:	8082                	ret
20401266:	0074                	addi	a3,sp,12
20401268:	0030                	addi	a2,sp,8
2040126a:	84aa                	mv	s1,a0
2040126c:	37a5                	jal	204011d4 <__swhatbuf_r>
2040126e:	45a2                	lw	a1,8(sp)
20401270:	892a                	mv	s2,a0
20401272:	8526                	mv	a0,s1
20401274:	2095                	jal	204012d8 <_malloc_r>
20401276:	ed01                	bnez	a0,2040128e <__smakebuf_r+0x54>
20401278:	00c41783          	lh	a5,12(s0)
2040127c:	2007f713          	andi	a4,a5,512
20401280:	ff69                	bnez	a4,2040125a <__smakebuf_r+0x20>
20401282:	9bf1                	andi	a5,a5,-4
20401284:	0027e793          	ori	a5,a5,2
20401288:	00f41623          	sh	a5,12(s0)
2040128c:	b7c9                	j	2040124e <__smakebuf_r+0x14>
2040128e:	fffff797          	auipc	a5,0xfffff
20401292:	78078793          	addi	a5,a5,1920 # 20400a0e <_cleanup_r>
20401296:	dcdc                	sw	a5,60(s1)
20401298:	00c45783          	lhu	a5,12(s0)
2040129c:	c008                	sw	a0,0(s0)
2040129e:	c808                	sw	a0,16(s0)
204012a0:	0807e793          	ori	a5,a5,128
204012a4:	00f41623          	sh	a5,12(s0)
204012a8:	47a2                	lw	a5,8(sp)
204012aa:	c85c                	sw	a5,20(s0)
204012ac:	47b2                	lw	a5,12(sp)
204012ae:	cf91                	beqz	a5,204012ca <__smakebuf_r+0x90>
204012b0:	00e41583          	lh	a1,14(s0)
204012b4:	8526                	mv	a0,s1
204012b6:	4ad000ef          	jal	ra,20401f62 <_isatty_r>
204012ba:	c901                	beqz	a0,204012ca <__smakebuf_r+0x90>
204012bc:	00c45783          	lhu	a5,12(s0)
204012c0:	9bf1                	andi	a5,a5,-4
204012c2:	0017e793          	ori	a5,a5,1
204012c6:	00f41623          	sh	a5,12(s0)
204012ca:	00c45783          	lhu	a5,12(s0)
204012ce:	00f96933          	or	s2,s2,a5
204012d2:	01241623          	sh	s2,12(s0)
204012d6:	b751                	j	2040125a <__smakebuf_r+0x20>

204012d8 <_malloc_r>:
_malloc_r():
204012d8:	7179                	addi	sp,sp,-48
204012da:	d606                	sw	ra,44(sp)
204012dc:	d422                	sw	s0,40(sp)
204012de:	d226                	sw	s1,36(sp)
204012e0:	d04a                	sw	s2,32(sp)
204012e2:	ce4e                	sw	s3,28(sp)
204012e4:	cc52                	sw	s4,24(sp)
204012e6:	ca56                	sw	s5,20(sp)
204012e8:	c85a                	sw	s6,16(sp)
204012ea:	c65e                	sw	s7,12(sp)
204012ec:	c462                	sw	s8,8(sp)
204012ee:	c266                	sw	s9,4(sp)
204012f0:	00b58793          	addi	a5,a1,11
204012f4:	4759                	li	a4,22
204012f6:	02f77663          	bgeu	a4,a5,20401322 <_malloc_r+0x4a>
204012fa:	ff87f493          	andi	s1,a5,-8
204012fe:	0204d363          	bgez	s1,20401324 <_malloc_r+0x4c>
20401302:	47b1                	li	a5,12
20401304:	c11c                	sw	a5,0(a0)
20401306:	4501                	li	a0,0
20401308:	50b2                	lw	ra,44(sp)
2040130a:	5422                	lw	s0,40(sp)
2040130c:	5492                	lw	s1,36(sp)
2040130e:	5902                	lw	s2,32(sp)
20401310:	49f2                	lw	s3,28(sp)
20401312:	4a62                	lw	s4,24(sp)
20401314:	4ad2                	lw	s5,20(sp)
20401316:	4b42                	lw	s6,16(sp)
20401318:	4bb2                	lw	s7,12(sp)
2040131a:	4c22                	lw	s8,8(sp)
2040131c:	4c92                	lw	s9,4(sp)
2040131e:	6145                	addi	sp,sp,48
20401320:	8082                	ret
20401322:	44c1                	li	s1,16
20401324:	fcb4efe3          	bltu	s1,a1,20401302 <_malloc_r+0x2a>
20401328:	892a                	mv	s2,a0
2040132a:	2db5                	jal	204019a6 <__malloc_lock>
2040132c:	1f700793          	li	a5,503
20401330:	5fbff997          	auipc	s3,0x5fbff
20401334:	0f898993          	addi	s3,s3,248 # 80000428 <__malloc_av_>
20401338:	0297ec63          	bltu	a5,s1,20401370 <_malloc_r+0x98>
2040133c:	00848713          	addi	a4,s1,8
20401340:	974e                	add	a4,a4,s3
20401342:	4340                	lw	s0,4(a4)
20401344:	ff870693          	addi	a3,a4,-8 # ffffdff8 <metal_segment_heap_target_end+0x7fff9ff8>
20401348:	0034d793          	srli	a5,s1,0x3
2040134c:	00d41663          	bne	s0,a3,20401358 <_malloc_r+0x80>
20401350:	4740                	lw	s0,12(a4)
20401352:	0789                	addi	a5,a5,2
20401354:	04870c63          	beq	a4,s0,204013ac <_malloc_r+0xd4>
20401358:	405c                	lw	a5,4(s0)
2040135a:	4458                	lw	a4,12(s0)
2040135c:	4414                	lw	a3,8(s0)
2040135e:	9bf1                	andi	a5,a5,-4
20401360:	97a2                	add	a5,a5,s0
20401362:	c6d8                	sw	a4,12(a3)
20401364:	c714                	sw	a3,8(a4)
20401366:	43d8                	lw	a4,4(a5)
20401368:	00176713          	ori	a4,a4,1
2040136c:	c3d8                	sw	a4,4(a5)
2040136e:	a051                	j	204013f2 <_malloc_r+0x11a>
20401370:	0094d713          	srli	a4,s1,0x9
20401374:	03f00793          	li	a5,63
20401378:	cb01                	beqz	a4,20401388 <_malloc_r+0xb0>
2040137a:	4791                	li	a5,4
2040137c:	08e7e063          	bltu	a5,a4,204013fc <_malloc_r+0x124>
20401380:	0064d793          	srli	a5,s1,0x6
20401384:	03878793          	addi	a5,a5,56
20401388:	00178713          	addi	a4,a5,1
2040138c:	070e                	slli	a4,a4,0x3
2040138e:	974e                	add	a4,a4,s3
20401390:	4340                	lw	s0,4(a4)
20401392:	ff870593          	addi	a1,a4,-8
20401396:	453d                	li	a0,15
20401398:	00b40963          	beq	s0,a1,204013aa <_malloc_r+0xd2>
2040139c:	4058                	lw	a4,4(s0)
2040139e:	9b71                	andi	a4,a4,-4
204013a0:	40970633          	sub	a2,a4,s1
204013a4:	08c55f63          	bge	a0,a2,20401442 <_malloc_r+0x16a>
204013a8:	17fd                	addi	a5,a5,-1
204013aa:	0785                	addi	a5,a5,1
204013ac:	0109a403          	lw	s0,16(s3)
204013b0:	5fbff597          	auipc	a1,0x5fbff
204013b4:	08058593          	addi	a1,a1,128 # 80000430 <__malloc_av_+0x8>
204013b8:	0eb40c63          	beq	s0,a1,204014b0 <_malloc_r+0x1d8>
204013bc:	4058                	lw	a4,4(s0)
204013be:	46bd                	li	a3,15
204013c0:	9b71                	andi	a4,a4,-4
204013c2:	40970633          	sub	a2,a4,s1
204013c6:	08c6d963          	bge	a3,a2,20401458 <_malloc_r+0x180>
204013ca:	0014e793          	ori	a5,s1,1
204013ce:	c05c                	sw	a5,4(s0)
204013d0:	009406b3          	add	a3,s0,s1
204013d4:	5fbff797          	auipc	a5,0x5fbff
204013d8:	06d7a423          	sw	a3,104(a5) # 8000043c <__malloc_av_+0x14>
204013dc:	5fbff797          	auipc	a5,0x5fbff
204013e0:	04d7ae23          	sw	a3,92(a5) # 80000438 <__malloc_av_+0x10>
204013e4:	00166793          	ori	a5,a2,1
204013e8:	c6cc                	sw	a1,12(a3)
204013ea:	c68c                	sw	a1,8(a3)
204013ec:	c2dc                	sw	a5,4(a3)
204013ee:	9722                	add	a4,a4,s0
204013f0:	c310                	sw	a2,0(a4)
204013f2:	854a                	mv	a0,s2
204013f4:	2b55                	jal	204019a8 <__malloc_unlock>
204013f6:	00840513          	addi	a0,s0,8
204013fa:	b739                	j	20401308 <_malloc_r+0x30>
204013fc:	47d1                	li	a5,20
204013fe:	00e7e563          	bltu	a5,a4,20401408 <_malloc_r+0x130>
20401402:	05b70793          	addi	a5,a4,91
20401406:	b749                	j	20401388 <_malloc_r+0xb0>
20401408:	05400793          	li	a5,84
2040140c:	00e7e763          	bltu	a5,a4,2040141a <_malloc_r+0x142>
20401410:	00c4d793          	srli	a5,s1,0xc
20401414:	06e78793          	addi	a5,a5,110
20401418:	bf85                	j	20401388 <_malloc_r+0xb0>
2040141a:	15400793          	li	a5,340
2040141e:	00e7e763          	bltu	a5,a4,2040142c <_malloc_r+0x154>
20401422:	00f4d793          	srli	a5,s1,0xf
20401426:	07778793          	addi	a5,a5,119
2040142a:	bfb9                	j	20401388 <_malloc_r+0xb0>
2040142c:	55400693          	li	a3,1364
20401430:	07e00793          	li	a5,126
20401434:	f4e6eae3          	bltu	a3,a4,20401388 <_malloc_r+0xb0>
20401438:	0124d793          	srli	a5,s1,0x12
2040143c:	07c78793          	addi	a5,a5,124
20401440:	b7a1                	j	20401388 <_malloc_r+0xb0>
20401442:	4454                	lw	a3,12(s0)
20401444:	00064863          	bltz	a2,20401454 <_malloc_r+0x17c>
20401448:	441c                	lw	a5,8(s0)
2040144a:	c7d4                	sw	a3,12(a5)
2040144c:	c69c                	sw	a5,8(a3)
2040144e:	00e407b3          	add	a5,s0,a4
20401452:	bf11                	j	20401366 <_malloc_r+0x8e>
20401454:	8436                	mv	s0,a3
20401456:	b789                	j	20401398 <_malloc_r+0xc0>
20401458:	5fbff697          	auipc	a3,0x5fbff
2040145c:	feb6a223          	sw	a1,-28(a3) # 8000043c <__malloc_av_+0x14>
20401460:	5fbff697          	auipc	a3,0x5fbff
20401464:	fcb6ac23          	sw	a1,-40(a3) # 80000438 <__malloc_av_+0x10>
20401468:	00064863          	bltz	a2,20401478 <_malloc_r+0x1a0>
2040146c:	9722                	add	a4,a4,s0
2040146e:	435c                	lw	a5,4(a4)
20401470:	0017e793          	ori	a5,a5,1
20401474:	c35c                	sw	a5,4(a4)
20401476:	bfb5                	j	204013f2 <_malloc_r+0x11a>
20401478:	1ff00693          	li	a3,511
2040147c:	0049a803          	lw	a6,4(s3)
20401480:	14e6e863          	bltu	a3,a4,204015d0 <_malloc_r+0x2f8>
20401484:	830d                	srli	a4,a4,0x3
20401486:	40275613          	srai	a2,a4,0x2
2040148a:	4685                	li	a3,1
2040148c:	0705                	addi	a4,a4,1
2040148e:	00c696b3          	sll	a3,a3,a2
20401492:	070e                	slli	a4,a4,0x3
20401494:	974e                	add	a4,a4,s3
20401496:	0106e6b3          	or	a3,a3,a6
2040149a:	5fbff617          	auipc	a2,0x5fbff
2040149e:	f8d62923          	sw	a3,-110(a2) # 8000042c <__malloc_av_+0x4>
204014a2:	4314                	lw	a3,0(a4)
204014a4:	ff870613          	addi	a2,a4,-8
204014a8:	c450                	sw	a2,12(s0)
204014aa:	c414                	sw	a3,8(s0)
204014ac:	c300                	sw	s0,0(a4)
204014ae:	c6c0                	sw	s0,12(a3)
204014b0:	4027d713          	srai	a4,a5,0x2
204014b4:	4305                	li	t1,1
204014b6:	00e31333          	sll	t1,t1,a4
204014ba:	0049a703          	lw	a4,4(s3)
204014be:	04676e63          	bltu	a4,t1,2040151a <_malloc_r+0x242>
204014c2:	006776b3          	and	a3,a4,t1
204014c6:	e699                	bnez	a3,204014d4 <_malloc_r+0x1fc>
204014c8:	9bf1                	andi	a5,a5,-4
204014ca:	0306                	slli	t1,t1,0x1
204014cc:	006776b3          	and	a3,a4,t1
204014d0:	0791                	addi	a5,a5,4
204014d2:	dee5                	beqz	a3,204014ca <_malloc_r+0x1f2>
204014d4:	4e3d                	li	t3,15
204014d6:	00379693          	slli	a3,a5,0x3
204014da:	96ce                	add	a3,a3,s3
204014dc:	8836                	mv	a6,a3
204014de:	853e                	mv	a0,a5
204014e0:	00c82403          	lw	s0,12(a6)
204014e4:	19041363          	bne	s0,a6,2040166a <_malloc_r+0x392>
204014e8:	0505                	addi	a0,a0,1
204014ea:	00357713          	andi	a4,a0,3
204014ee:	0821                	addi	a6,a6,8
204014f0:	fb65                	bnez	a4,204014e0 <_malloc_r+0x208>
204014f2:	0037f713          	andi	a4,a5,3
204014f6:	1c071763          	bnez	a4,204016c4 <_malloc_r+0x3ec>
204014fa:	0049a703          	lw	a4,4(s3)
204014fe:	fff34793          	not	a5,t1
20401502:	8ff9                	and	a5,a5,a4
20401504:	5fbff717          	auipc	a4,0x5fbff
20401508:	f2f72423          	sw	a5,-216(a4) # 8000042c <__malloc_av_+0x4>
2040150c:	0049a703          	lw	a4,4(s3)
20401510:	0306                	slli	t1,t1,0x1
20401512:	00676463          	bltu	a4,t1,2040151a <_malloc_r+0x242>
20401516:	1c031363          	bnez	t1,204016dc <_malloc_r+0x404>
2040151a:	0089ab83          	lw	s7,8(s3)
2040151e:	004ba403          	lw	s0,4(s7) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20401522:	ffc47a93          	andi	s5,s0,-4
20401526:	009ae763          	bltu	s5,s1,20401534 <_malloc_r+0x25c>
2040152a:	409a8733          	sub	a4,s5,s1
2040152e:	47bd                	li	a5,15
20401530:	28e7ce63          	blt	a5,a4,204017cc <_malloc_r+0x4f4>
20401534:	5fc00797          	auipc	a5,0x5fc00
20401538:	b2878793          	addi	a5,a5,-1240 # 8000105c <__malloc_top_pad>
2040153c:	5fc00717          	auipc	a4,0x5fc00
20401540:	af870713          	addi	a4,a4,-1288 # 80001034 <__malloc_sbrk_base>
20401544:	4380                	lw	s0,0(a5)
20401546:	4314                	lw	a3,0(a4)
20401548:	57fd                	li	a5,-1
2040154a:	015b8c33          	add	s8,s7,s5
2040154e:	9426                	add	s0,s0,s1
20401550:	8a3a                	mv	s4,a4
20401552:	18f69763          	bne	a3,a5,204016e0 <_malloc_r+0x408>
20401556:	0441                	addi	s0,s0,16
20401558:	85a2                	mv	a1,s0
2040155a:	854a                	mv	a0,s2
2040155c:	7de000ef          	jal	ra,20401d3a <_sbrk_r>
20401560:	57fd                	li	a5,-1
20401562:	8b2a                	mv	s6,a0
20401564:	20f50863          	beq	a0,a5,20401774 <_malloc_r+0x49c>
20401568:	01857463          	bgeu	a0,s8,20401570 <_malloc_r+0x298>
2040156c:	213b9463          	bne	s7,s3,20401774 <_malloc_r+0x49c>
20401570:	5fc00c97          	auipc	s9,0x5fc00
20401574:	af0c8c93          	addi	s9,s9,-1296 # 80001060 <__malloc_current_mallinfo>
20401578:	000ca703          	lw	a4,0(s9)
2040157c:	9722                	add	a4,a4,s0
2040157e:	5fc00797          	auipc	a5,0x5fc00
20401582:	aee7a123          	sw	a4,-1310(a5) # 80001060 <__malloc_current_mallinfo>
20401586:	176c1363          	bne	s8,s6,204016ec <_malloc_r+0x414>
2040158a:	014c1793          	slli	a5,s8,0x14
2040158e:	14079f63          	bnez	a5,204016ec <_malloc_r+0x414>
20401592:	0089a783          	lw	a5,8(s3)
20401596:	9456                	add	s0,s0,s5
20401598:	00146413          	ori	s0,s0,1
2040159c:	c3c0                	sw	s0,4(a5)
2040159e:	5fc00717          	auipc	a4,0x5fc00
204015a2:	aba70713          	addi	a4,a4,-1350 # 80001058 <__malloc_max_sbrked_mem>
204015a6:	000ca783          	lw	a5,0(s9)
204015aa:	4318                	lw	a4,0(a4)
204015ac:	00f77663          	bgeu	a4,a5,204015b8 <_malloc_r+0x2e0>
204015b0:	5fc00717          	auipc	a4,0x5fc00
204015b4:	aaf72423          	sw	a5,-1368(a4) # 80001058 <__malloc_max_sbrked_mem>
204015b8:	5fc00717          	auipc	a4,0x5fc00
204015bc:	a9c70713          	addi	a4,a4,-1380 # 80001054 <__malloc_max_total_mem>
204015c0:	4318                	lw	a4,0(a4)
204015c2:	1af77963          	bgeu	a4,a5,20401774 <_malloc_r+0x49c>
204015c6:	5fc00717          	auipc	a4,0x5fc00
204015ca:	a8f72723          	sw	a5,-1394(a4) # 80001054 <__malloc_max_total_mem>
204015ce:	a25d                	j	20401774 <_malloc_r+0x49c>
204015d0:	00975613          	srli	a2,a4,0x9
204015d4:	4691                	li	a3,4
204015d6:	02c6ee63          	bltu	a3,a2,20401612 <_malloc_r+0x33a>
204015da:	00675693          	srli	a3,a4,0x6
204015de:	03868693          	addi	a3,a3,56
204015e2:	00168613          	addi	a2,a3,1
204015e6:	060e                	slli	a2,a2,0x3
204015e8:	964e                	add	a2,a2,s3
204015ea:	ff860513          	addi	a0,a2,-8
204015ee:	4210                	lw	a2,0(a2)
204015f0:	06c51763          	bne	a0,a2,2040165e <_malloc_r+0x386>
204015f4:	4705                	li	a4,1
204015f6:	8689                	srai	a3,a3,0x2
204015f8:	00d716b3          	sll	a3,a4,a3
204015fc:	0106e6b3          	or	a3,a3,a6
20401600:	5fbff717          	auipc	a4,0x5fbff
20401604:	e2d72623          	sw	a3,-468(a4) # 8000042c <__malloc_av_+0x4>
20401608:	c448                	sw	a0,12(s0)
2040160a:	c410                	sw	a2,8(s0)
2040160c:	c500                	sw	s0,8(a0)
2040160e:	c640                	sw	s0,12(a2)
20401610:	b545                	j	204014b0 <_malloc_r+0x1d8>
20401612:	46d1                	li	a3,20
20401614:	00c6e563          	bltu	a3,a2,2040161e <_malloc_r+0x346>
20401618:	05b60693          	addi	a3,a2,91
2040161c:	b7d9                	j	204015e2 <_malloc_r+0x30a>
2040161e:	05400693          	li	a3,84
20401622:	00c6e763          	bltu	a3,a2,20401630 <_malloc_r+0x358>
20401626:	00c75693          	srli	a3,a4,0xc
2040162a:	06e68693          	addi	a3,a3,110
2040162e:	bf55                	j	204015e2 <_malloc_r+0x30a>
20401630:	15400693          	li	a3,340
20401634:	00c6e763          	bltu	a3,a2,20401642 <_malloc_r+0x36a>
20401638:	00f75693          	srli	a3,a4,0xf
2040163c:	07768693          	addi	a3,a3,119
20401640:	b74d                	j	204015e2 <_malloc_r+0x30a>
20401642:	55400513          	li	a0,1364
20401646:	07e00693          	li	a3,126
2040164a:	f8c56ce3          	bltu	a0,a2,204015e2 <_malloc_r+0x30a>
2040164e:	01275693          	srli	a3,a4,0x12
20401652:	07c68693          	addi	a3,a3,124
20401656:	b771                	j	204015e2 <_malloc_r+0x30a>
20401658:	4610                	lw	a2,8(a2)
2040165a:	00c50663          	beq	a0,a2,20401666 <_malloc_r+0x38e>
2040165e:	4254                	lw	a3,4(a2)
20401660:	9af1                	andi	a3,a3,-4
20401662:	fed76be3          	bltu	a4,a3,20401658 <_malloc_r+0x380>
20401666:	4648                	lw	a0,12(a2)
20401668:	b745                	j	20401608 <_malloc_r+0x330>
2040166a:	4058                	lw	a4,4(s0)
2040166c:	4450                	lw	a2,12(s0)
2040166e:	9b71                	andi	a4,a4,-4
20401670:	409708b3          	sub	a7,a4,s1
20401674:	031e5b63          	bge	t3,a7,204016aa <_malloc_r+0x3d2>
20401678:	0014e793          	ori	a5,s1,1
2040167c:	c05c                	sw	a5,4(s0)
2040167e:	441c                	lw	a5,8(s0)
20401680:	009406b3          	add	a3,s0,s1
20401684:	9722                	add	a4,a4,s0
20401686:	c7d0                	sw	a2,12(a5)
20401688:	c61c                	sw	a5,8(a2)
2040168a:	5fbff797          	auipc	a5,0x5fbff
2040168e:	dad7a923          	sw	a3,-590(a5) # 8000043c <__malloc_av_+0x14>
20401692:	5fbff797          	auipc	a5,0x5fbff
20401696:	dad7a323          	sw	a3,-602(a5) # 80000438 <__malloc_av_+0x10>
2040169a:	0018e793          	ori	a5,a7,1
2040169e:	c6cc                	sw	a1,12(a3)
204016a0:	c68c                	sw	a1,8(a3)
204016a2:	c2dc                	sw	a5,4(a3)
204016a4:	01172023          	sw	a7,0(a4)
204016a8:	b3a9                	j	204013f2 <_malloc_r+0x11a>
204016aa:	0008cb63          	bltz	a7,204016c0 <_malloc_r+0x3e8>
204016ae:	9722                	add	a4,a4,s0
204016b0:	435c                	lw	a5,4(a4)
204016b2:	0017e793          	ori	a5,a5,1
204016b6:	c35c                	sw	a5,4(a4)
204016b8:	441c                	lw	a5,8(s0)
204016ba:	c7d0                	sw	a2,12(a5)
204016bc:	c61c                	sw	a5,8(a2)
204016be:	bb15                	j	204013f2 <_malloc_r+0x11a>
204016c0:	8432                	mv	s0,a2
204016c2:	b50d                	j	204014e4 <_malloc_r+0x20c>
204016c4:	16e1                	addi	a3,a3,-8
204016c6:	4698                	lw	a4,8(a3)
204016c8:	17fd                	addi	a5,a5,-1
204016ca:	e2d704e3          	beq	a4,a3,204014f2 <_malloc_r+0x21a>
204016ce:	bd3d                	j	2040150c <_malloc_r+0x234>
204016d0:	0791                	addi	a5,a5,4
204016d2:	0306                	slli	t1,t1,0x1
204016d4:	006776b3          	and	a3,a4,t1
204016d8:	dee5                	beqz	a3,204016d0 <_malloc_r+0x3f8>
204016da:	bbf5                	j	204014d6 <_malloc_r+0x1fe>
204016dc:	87aa                	mv	a5,a0
204016de:	bfdd                	j	204016d4 <_malloc_r+0x3fc>
204016e0:	6705                	lui	a4,0x1
204016e2:	073d                	addi	a4,a4,15
204016e4:	943a                	add	s0,s0,a4
204016e6:	77fd                	lui	a5,0xfffff
204016e8:	8c7d                	and	s0,s0,a5
204016ea:	b5bd                	j	20401558 <_malloc_r+0x280>
204016ec:	000a2683          	lw	a3,0(s4)
204016f0:	57fd                	li	a5,-1
204016f2:	08f69f63          	bne	a3,a5,20401790 <_malloc_r+0x4b8>
204016f6:	5fc00797          	auipc	a5,0x5fc00
204016fa:	9367af23          	sw	s6,-1730(a5) # 80001034 <__malloc_sbrk_base>
204016fe:	007b7c13          	andi	s8,s6,7
20401702:	4781                	li	a5,0
20401704:	000c0663          	beqz	s8,20401710 <_malloc_r+0x438>
20401708:	47a1                	li	a5,8
2040170a:	418787b3          	sub	a5,a5,s8
2040170e:	9b3e                	add	s6,s6,a5
20401710:	6505                	lui	a0,0x1
20401712:	00a78a33          	add	s4,a5,a0
20401716:	945a                	add	s0,s0,s6
20401718:	157d                	addi	a0,a0,-1
2040171a:	00a477b3          	and	a5,s0,a0
2040171e:	40fa0a33          	sub	s4,s4,a5
20401722:	00aa7a33          	and	s4,s4,a0
20401726:	85d2                	mv	a1,s4
20401728:	854a                	mv	a0,s2
2040172a:	2d01                	jal	20401d3a <_sbrk_r>
2040172c:	57fd                	li	a5,-1
2040172e:	00f51963          	bne	a0,a5,20401740 <_malloc_r+0x468>
20401732:	8522                	mv	a0,s0
20401734:	000c0563          	beqz	s8,2040173e <_malloc_r+0x466>
20401738:	ff8c0513          	addi	a0,s8,-8
2040173c:	9522                	add	a0,a0,s0
2040173e:	4a01                	li	s4,0
20401740:	000ca783          	lw	a5,0(s9)
20401744:	41650533          	sub	a0,a0,s6
20401748:	97d2                	add	a5,a5,s4
2040174a:	9a2a                	add	s4,s4,a0
2040174c:	5fc00717          	auipc	a4,0x5fc00
20401750:	90f72a23          	sw	a5,-1772(a4) # 80001060 <__malloc_current_mallinfo>
20401754:	001a6a13          	ori	s4,s4,1
20401758:	5fbff797          	auipc	a5,0x5fbff
2040175c:	cd67ac23          	sw	s6,-808(a5) # 80000430 <__malloc_av_+0x8>
20401760:	014b2223          	sw	s4,4(s6) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20401764:	e33b8de3          	beq	s7,s3,2040159e <_malloc_r+0x2c6>
20401768:	473d                	li	a4,15
2040176a:	03576b63          	bltu	a4,s5,204017a0 <_malloc_r+0x4c8>
2040176e:	4785                	li	a5,1
20401770:	00fb2223          	sw	a5,4(s6)
20401774:	0089a783          	lw	a5,8(s3)
20401778:	43dc                	lw	a5,4(a5)
2040177a:	9bf1                	andi	a5,a5,-4
2040177c:	40978733          	sub	a4,a5,s1
20401780:	0097e563          	bltu	a5,s1,2040178a <_malloc_r+0x4b2>
20401784:	47bd                	li	a5,15
20401786:	04e7c363          	blt	a5,a4,204017cc <_malloc_r+0x4f4>
2040178a:	854a                	mv	a0,s2
2040178c:	2c31                	jal	204019a8 <__malloc_unlock>
2040178e:	bea5                	j	20401306 <_malloc_r+0x2e>
20401790:	418b07b3          	sub	a5,s6,s8
20401794:	97ba                	add	a5,a5,a4
20401796:	5fc00717          	auipc	a4,0x5fc00
2040179a:	8cf72523          	sw	a5,-1846(a4) # 80001060 <__malloc_current_mallinfo>
2040179e:	b785                	j	204016fe <_malloc_r+0x426>
204017a0:	004ba783          	lw	a5,4(s7)
204017a4:	ff4a8413          	addi	s0,s5,-12
204017a8:	9861                	andi	s0,s0,-8
204017aa:	8b85                	andi	a5,a5,1
204017ac:	8fc1                	or	a5,a5,s0
204017ae:	00fba223          	sw	a5,4(s7)
204017b2:	4695                	li	a3,5
204017b4:	008b87b3          	add	a5,s7,s0
204017b8:	c3d4                	sw	a3,4(a5)
204017ba:	c794                	sw	a3,8(a5)
204017bc:	de8771e3          	bgeu	a4,s0,2040159e <_malloc_r+0x2c6>
204017c0:	008b8593          	addi	a1,s7,8
204017c4:	854a                	mv	a0,s2
204017c6:	c92ff0ef          	jal	ra,20400c58 <_free_r>
204017ca:	bbd1                	j	2040159e <_malloc_r+0x2c6>
204017cc:	0089a403          	lw	s0,8(s3)
204017d0:	0014e793          	ori	a5,s1,1
204017d4:	c05c                	sw	a5,4(s0)
204017d6:	009407b3          	add	a5,s0,s1
204017da:	5fbff697          	auipc	a3,0x5fbff
204017de:	c4f6ab23          	sw	a5,-938(a3) # 80000430 <__malloc_av_+0x8>
204017e2:	b659                	j	20401368 <_malloc_r+0x90>

204017e4 <memchr>:
memchr():
204017e4:	0ff5f593          	andi	a1,a1,255
204017e8:	962a                	add	a2,a2,a0
204017ea:	00c51463          	bne	a0,a2,204017f2 <memchr+0xe>
204017ee:	4501                	li	a0,0
204017f0:	8082                	ret
204017f2:	00054783          	lbu	a5,0(a0) # 1000 <__heap_size+0xc00>
204017f6:	feb78de3          	beq	a5,a1,204017f0 <memchr+0xc>
204017fa:	0505                	addi	a0,a0,1
204017fc:	b7fd                	j	204017ea <memchr+0x6>

204017fe <memcpy>:
memcpy():
204017fe:	00a5c7b3          	xor	a5,a1,a0
20401802:	8b8d                	andi	a5,a5,3
20401804:	00c50733          	add	a4,a0,a2
20401808:	e781                	bnez	a5,20401810 <memcpy+0x12>
2040180a:	478d                	li	a5,3
2040180c:	00c7ee63          	bltu	a5,a2,20401828 <memcpy+0x2a>
20401810:	87aa                	mv	a5,a0
20401812:	0ae57063          	bgeu	a0,a4,204018b2 <memcpy+0xb4>
20401816:	0005c683          	lbu	a3,0(a1)
2040181a:	0785                	addi	a5,a5,1
2040181c:	0585                	addi	a1,a1,1
2040181e:	fed78fa3          	sb	a3,-1(a5)
20401822:	fee7eae3          	bltu	a5,a4,20401816 <memcpy+0x18>
20401826:	8082                	ret
20401828:	00357693          	andi	a3,a0,3
2040182c:	87aa                	mv	a5,a0
2040182e:	ca91                	beqz	a3,20401842 <memcpy+0x44>
20401830:	0005c683          	lbu	a3,0(a1)
20401834:	0785                	addi	a5,a5,1
20401836:	0585                	addi	a1,a1,1
20401838:	fed78fa3          	sb	a3,-1(a5)
2040183c:	0037f693          	andi	a3,a5,3
20401840:	b7fd                	j	2040182e <memcpy+0x30>
20401842:	ffc77693          	andi	a3,a4,-4
20401846:	fe068613          	addi	a2,a3,-32
2040184a:	06c7f063          	bgeu	a5,a2,204018aa <memcpy+0xac>
2040184e:	0005a383          	lw	t2,0(a1)
20401852:	0045a283          	lw	t0,4(a1)
20401856:	0085af83          	lw	t6,8(a1)
2040185a:	00c5af03          	lw	t5,12(a1)
2040185e:	0105ae83          	lw	t4,16(a1)
20401862:	0145ae03          	lw	t3,20(a1)
20401866:	0185a303          	lw	t1,24(a1)
2040186a:	01c5a883          	lw	a7,28(a1)
2040186e:	02458593          	addi	a1,a1,36
20401872:	0077a023          	sw	t2,0(a5)
20401876:	ffc5a803          	lw	a6,-4(a1)
2040187a:	0057a223          	sw	t0,4(a5)
2040187e:	01f7a423          	sw	t6,8(a5)
20401882:	01e7a623          	sw	t5,12(a5)
20401886:	01d7a823          	sw	t4,16(a5)
2040188a:	01c7aa23          	sw	t3,20(a5)
2040188e:	0067ac23          	sw	t1,24(a5)
20401892:	0117ae23          	sw	a7,28(a5)
20401896:	02478793          	addi	a5,a5,36
2040189a:	ff07ae23          	sw	a6,-4(a5)
2040189e:	b775                	j	2040184a <memcpy+0x4c>
204018a0:	4190                	lw	a2,0(a1)
204018a2:	0791                	addi	a5,a5,4
204018a4:	0591                	addi	a1,a1,4
204018a6:	fec7ae23          	sw	a2,-4(a5)
204018aa:	fed7ebe3          	bltu	a5,a3,204018a0 <memcpy+0xa2>
204018ae:	f6e7e4e3          	bltu	a5,a4,20401816 <memcpy+0x18>
204018b2:	8082                	ret

204018b4 <memmove>:
memmove():
204018b4:	04a5f363          	bgeu	a1,a0,204018fa <memmove+0x46>
204018b8:	00c586b3          	add	a3,a1,a2
204018bc:	02d57f63          	bgeu	a0,a3,204018fa <memmove+0x46>
204018c0:	fff64593          	not	a1,a2
204018c4:	4781                	li	a5,0
204018c6:	17fd                	addi	a5,a5,-1
204018c8:	00f59363          	bne	a1,a5,204018ce <memmove+0x1a>
204018cc:	8082                	ret
204018ce:	00f68733          	add	a4,a3,a5
204018d2:	00074803          	lbu	a6,0(a4)
204018d6:	00c78733          	add	a4,a5,a2
204018da:	972a                	add	a4,a4,a0
204018dc:	01070023          	sb	a6,0(a4)
204018e0:	b7dd                	j	204018c6 <memmove+0x12>
204018e2:	00f58733          	add	a4,a1,a5
204018e6:	00074683          	lbu	a3,0(a4)
204018ea:	00f50733          	add	a4,a0,a5
204018ee:	0785                	addi	a5,a5,1
204018f0:	00d70023          	sb	a3,0(a4)
204018f4:	fef617e3          	bne	a2,a5,204018e2 <memmove+0x2e>
204018f8:	8082                	ret
204018fa:	4781                	li	a5,0
204018fc:	bfe5                	j	204018f4 <memmove+0x40>

204018fe <memset>:
memset():
204018fe:	433d                	li	t1,15
20401900:	872a                	mv	a4,a0
20401902:	02c37363          	bgeu	t1,a2,20401928 <memset+0x2a>
20401906:	00f77793          	andi	a5,a4,15
2040190a:	efbd                	bnez	a5,20401988 <memset+0x8a>
2040190c:	e5ad                	bnez	a1,20401976 <memset+0x78>
2040190e:	ff067693          	andi	a3,a2,-16
20401912:	8a3d                	andi	a2,a2,15
20401914:	96ba                	add	a3,a3,a4
20401916:	c30c                	sw	a1,0(a4)
20401918:	c34c                	sw	a1,4(a4)
2040191a:	c70c                	sw	a1,8(a4)
2040191c:	c74c                	sw	a1,12(a4)
2040191e:	0741                	addi	a4,a4,16
20401920:	fed76be3          	bltu	a4,a3,20401916 <memset+0x18>
20401924:	e211                	bnez	a2,20401928 <memset+0x2a>
20401926:	8082                	ret
20401928:	40c306b3          	sub	a3,t1,a2
2040192c:	068a                	slli	a3,a3,0x2
2040192e:	00000297          	auipc	t0,0x0
20401932:	9696                	add	a3,a3,t0
20401934:	00a68067          	jr	10(a3)
20401938:	00b70723          	sb	a1,14(a4)
2040193c:	00b706a3          	sb	a1,13(a4)
20401940:	00b70623          	sb	a1,12(a4)
20401944:	00b705a3          	sb	a1,11(a4)
20401948:	00b70523          	sb	a1,10(a4)
2040194c:	00b704a3          	sb	a1,9(a4)
20401950:	00b70423          	sb	a1,8(a4)
20401954:	00b703a3          	sb	a1,7(a4)
20401958:	00b70323          	sb	a1,6(a4)
2040195c:	00b702a3          	sb	a1,5(a4)
20401960:	00b70223          	sb	a1,4(a4)
20401964:	00b701a3          	sb	a1,3(a4)
20401968:	00b70123          	sb	a1,2(a4)
2040196c:	00b700a3          	sb	a1,1(a4)
20401970:	00b70023          	sb	a1,0(a4)
20401974:	8082                	ret
20401976:	0ff5f593          	andi	a1,a1,255
2040197a:	00859693          	slli	a3,a1,0x8
2040197e:	8dd5                	or	a1,a1,a3
20401980:	01059693          	slli	a3,a1,0x10
20401984:	8dd5                	or	a1,a1,a3
20401986:	b761                	j	2040190e <memset+0x10>
20401988:	00279693          	slli	a3,a5,0x2
2040198c:	00000297          	auipc	t0,0x0
20401990:	9696                	add	a3,a3,t0
20401992:	8286                	mv	t0,ra
20401994:	fa8680e7          	jalr	-88(a3)
20401998:	8096                	mv	ra,t0
2040199a:	17c1                	addi	a5,a5,-16
2040199c:	8f1d                	sub	a4,a4,a5
2040199e:	963e                	add	a2,a2,a5
204019a0:	f8c374e3          	bgeu	t1,a2,20401928 <memset+0x2a>
204019a4:	b7a5                	j	2040190c <memset+0xe>

204019a6 <__malloc_lock>:
__malloc_lock():
204019a6:	8082                	ret

204019a8 <__malloc_unlock>:
__malloc_unlock():
204019a8:	8082                	ret

204019aa <_realloc_r>:
_realloc_r():
204019aa:	7139                	addi	sp,sp,-64
204019ac:	dc22                	sw	s0,56(sp)
204019ae:	de06                	sw	ra,60(sp)
204019b0:	842e                	mv	s0,a1
204019b2:	da26                	sw	s1,52(sp)
204019b4:	d84a                	sw	s2,48(sp)
204019b6:	d64e                	sw	s3,44(sp)
204019b8:	d452                	sw	s4,40(sp)
204019ba:	d256                	sw	s5,36(sp)
204019bc:	d05a                	sw	s6,32(sp)
204019be:	ce5e                	sw	s7,28(sp)
204019c0:	85b2                	mv	a1,a2
204019c2:	ec09                	bnez	s0,204019dc <_realloc_r+0x32>
204019c4:	5462                	lw	s0,56(sp)
204019c6:	50f2                	lw	ra,60(sp)
204019c8:	54d2                	lw	s1,52(sp)
204019ca:	5942                	lw	s2,48(sp)
204019cc:	59b2                	lw	s3,44(sp)
204019ce:	5a22                	lw	s4,40(sp)
204019d0:	5a92                	lw	s5,36(sp)
204019d2:	5b02                	lw	s6,32(sp)
204019d4:	4bf2                	lw	s7,28(sp)
204019d6:	6121                	addi	sp,sp,64
204019d8:	901ff06f          	j	204012d8 <_malloc_r>
204019dc:	8aaa                	mv	s5,a0
204019de:	c632                	sw	a2,12(sp)
204019e0:	37d9                	jal	204019a6 <__malloc_lock>
204019e2:	45b2                	lw	a1,12(sp)
204019e4:	47d9                	li	a5,22
204019e6:	00b58993          	addi	s3,a1,11
204019ea:	0337f663          	bgeu	a5,s3,20401a16 <_realloc_r+0x6c>
204019ee:	ff89fb13          	andi	s6,s3,-8
204019f2:	020b5363          	bgez	s6,20401a18 <_realloc_r+0x6e>
204019f6:	47b1                	li	a5,12
204019f8:	00faa023          	sw	a5,0(s5)
204019fc:	4a01                	li	s4,0
204019fe:	50f2                	lw	ra,60(sp)
20401a00:	5462                	lw	s0,56(sp)
20401a02:	8552                	mv	a0,s4
20401a04:	54d2                	lw	s1,52(sp)
20401a06:	5942                	lw	s2,48(sp)
20401a08:	59b2                	lw	s3,44(sp)
20401a0a:	5a22                	lw	s4,40(sp)
20401a0c:	5a92                	lw	s5,36(sp)
20401a0e:	5b02                	lw	s6,32(sp)
20401a10:	4bf2                	lw	s7,28(sp)
20401a12:	6121                	addi	sp,sp,64
20401a14:	8082                	ret
20401a16:	4b41                	li	s6,16
20401a18:	fcbb6fe3          	bltu	s6,a1,204019f6 <_realloc_r+0x4c>
20401a1c:	ffc42683          	lw	a3,-4(s0)
20401a20:	ff840b93          	addi	s7,s0,-8
20401a24:	ffc6f913          	andi	s2,a3,-4
20401a28:	2f695e63          	bge	s2,s6,20401d24 <_realloc_r+0x37a>
20401a2c:	5fbff717          	auipc	a4,0x5fbff
20401a30:	9fc70713          	addi	a4,a4,-1540 # 80000428 <__malloc_av_>
20401a34:	4710                	lw	a2,8(a4)
20401a36:	012b87b3          	add	a5,s7,s2
20401a3a:	43d8                	lw	a4,4(a5)
20401a3c:	00f60863          	beq	a2,a5,20401a4c <_realloc_r+0xa2>
20401a40:	ffe77513          	andi	a0,a4,-2
20401a44:	953e                	add	a0,a0,a5
20401a46:	4148                	lw	a0,4(a0)
20401a48:	8905                	andi	a0,a0,1
20401a4a:	e929                	bnez	a0,20401a9c <_realloc_r+0xf2>
20401a4c:	9b71                	andi	a4,a4,-4
20401a4e:	00e909b3          	add	s3,s2,a4
20401a52:	02f61d63          	bne	a2,a5,20401a8c <_realloc_r+0xe2>
20401a56:	010b0513          	addi	a0,s6,16
20401a5a:	04a9c363          	blt	s3,a0,20401aa0 <_realloc_r+0xf6>
20401a5e:	9bda                	add	s7,s7,s6
20401a60:	416989b3          	sub	s3,s3,s6
20401a64:	5fbff797          	auipc	a5,0x5fbff
20401a68:	9d77a623          	sw	s7,-1588(a5) # 80000430 <__malloc_av_+0x8>
20401a6c:	0019e993          	ori	s3,s3,1
20401a70:	013ba223          	sw	s3,4(s7)
20401a74:	ffc42983          	lw	s3,-4(s0)
20401a78:	8556                	mv	a0,s5
20401a7a:	8a22                	mv	s4,s0
20401a7c:	0019f993          	andi	s3,s3,1
20401a80:	0169e9b3          	or	s3,s3,s6
20401a84:	ff342e23          	sw	s3,-4(s0)
20401a88:	3705                	jal	204019a8 <__malloc_unlock>
20401a8a:	bf95                	j	204019fe <_realloc_r+0x54>
20401a8c:	0169ca63          	blt	s3,s6,20401aa0 <_realloc_r+0xf6>
20401a90:	47d8                	lw	a4,12(a5)
20401a92:	479c                	lw	a5,8(a5)
20401a94:	c7d8                	sw	a4,12(a5)
20401a96:	c71c                	sw	a5,8(a4)
20401a98:	84de                	mv	s1,s7
20401a9a:	aa11                	j	20401bae <_realloc_r+0x204>
20401a9c:	4701                	li	a4,0
20401a9e:	4781                	li	a5,0
20401aa0:	8a85                	andi	a3,a3,1
20401aa2:	1e069463          	bnez	a3,20401c8a <_realloc_r+0x2e0>
20401aa6:	ff842483          	lw	s1,-8(s0)
20401aaa:	409b84b3          	sub	s1,s7,s1
20401aae:	0044aa03          	lw	s4,4(s1)
20401ab2:	ffca7a13          	andi	s4,s4,-4
20401ab6:	9a4a                	add	s4,s4,s2
20401ab8:	16078063          	beqz	a5,20401c18 <_realloc_r+0x26e>
20401abc:	014709b3          	add	s3,a4,s4
20401ac0:	0af61263          	bne	a2,a5,20401b64 <_realloc_r+0x1ba>
20401ac4:	010b0793          	addi	a5,s6,16
20401ac8:	14f9c863          	blt	s3,a5,20401c18 <_realloc_r+0x26e>
20401acc:	4498                	lw	a4,8(s1)
20401ace:	44dc                	lw	a5,12(s1)
20401ad0:	ffc90613          	addi	a2,s2,-4
20401ad4:	00848a13          	addi	s4,s1,8
20401ad8:	c75c                	sw	a5,12(a4)
20401ada:	c798                	sw	a4,8(a5)
20401adc:	02400713          	li	a4,36
20401ae0:	06c76e63          	bltu	a4,a2,20401b5c <_realloc_r+0x1b2>
20401ae4:	46cd                	li	a3,19
20401ae6:	87d2                	mv	a5,s4
20401ae8:	00c6fc63          	bgeu	a3,a2,20401b00 <_realloc_r+0x156>
20401aec:	401c                	lw	a5,0(s0)
20401aee:	c49c                	sw	a5,8(s1)
20401af0:	405c                	lw	a5,4(s0)
20401af2:	c4dc                	sw	a5,12(s1)
20401af4:	47ed                	li	a5,27
20401af6:	04c7e063          	bltu	a5,a2,20401b36 <_realloc_r+0x18c>
20401afa:	0421                	addi	s0,s0,8
20401afc:	01048793          	addi	a5,s1,16
20401b00:	4018                	lw	a4,0(s0)
20401b02:	c398                	sw	a4,0(a5)
20401b04:	4058                	lw	a4,4(s0)
20401b06:	c3d8                	sw	a4,4(a5)
20401b08:	4418                	lw	a4,8(s0)
20401b0a:	c798                	sw	a4,8(a5)
20401b0c:	016487b3          	add	a5,s1,s6
20401b10:	416989b3          	sub	s3,s3,s6
20401b14:	5fbff717          	auipc	a4,0x5fbff
20401b18:	90f72e23          	sw	a5,-1764(a4) # 80000430 <__malloc_av_+0x8>
20401b1c:	0019e993          	ori	s3,s3,1
20401b20:	0137a223          	sw	s3,4(a5)
20401b24:	40dc                	lw	a5,4(s1)
20401b26:	8b85                	andi	a5,a5,1
20401b28:	0167e9b3          	or	s3,a5,s6
20401b2c:	0134a223          	sw	s3,4(s1)
20401b30:	8556                	mv	a0,s5
20401b32:	3d9d                	jal	204019a8 <__malloc_unlock>
20401b34:	b5e9                	j	204019fe <_realloc_r+0x54>
20401b36:	441c                	lw	a5,8(s0)
20401b38:	c89c                	sw	a5,16(s1)
20401b3a:	445c                	lw	a5,12(s0)
20401b3c:	c8dc                	sw	a5,20(s1)
20401b3e:	00e60663          	beq	a2,a4,20401b4a <_realloc_r+0x1a0>
20401b42:	0441                	addi	s0,s0,16
20401b44:	01848793          	addi	a5,s1,24
20401b48:	bf65                	j	20401b00 <_realloc_r+0x156>
20401b4a:	481c                	lw	a5,16(s0)
20401b4c:	0461                	addi	s0,s0,24
20401b4e:	cc9c                	sw	a5,24(s1)
20401b50:	ffc42703          	lw	a4,-4(s0)
20401b54:	02048793          	addi	a5,s1,32
20401b58:	ccd8                	sw	a4,28(s1)
20401b5a:	b75d                	j	20401b00 <_realloc_r+0x156>
20401b5c:	85a2                	mv	a1,s0
20401b5e:	8552                	mv	a0,s4
20401b60:	3b91                	jal	204018b4 <memmove>
20401b62:	b76d                	j	20401b0c <_realloc_r+0x162>
20401b64:	0b69ca63          	blt	s3,s6,20401c18 <_realloc_r+0x26e>
20401b68:	47d8                	lw	a4,12(a5)
20401b6a:	479c                	lw	a5,8(a5)
20401b6c:	ffc90613          	addi	a2,s2,-4
20401b70:	00848513          	addi	a0,s1,8
20401b74:	c7d8                	sw	a4,12(a5)
20401b76:	c71c                	sw	a5,8(a4)
20401b78:	4498                	lw	a4,8(s1)
20401b7a:	44dc                	lw	a5,12(s1)
20401b7c:	c75c                	sw	a5,12(a4)
20401b7e:	c798                	sw	a4,8(a5)
20401b80:	02400793          	li	a5,36
20401b84:	08c7e763          	bltu	a5,a2,20401c12 <_realloc_r+0x268>
20401b88:	474d                	li	a4,19
20401b8a:	00c77c63          	bgeu	a4,a2,20401ba2 <_realloc_r+0x1f8>
20401b8e:	4018                	lw	a4,0(s0)
20401b90:	c498                	sw	a4,8(s1)
20401b92:	4058                	lw	a4,4(s0)
20401b94:	c4d8                	sw	a4,12(s1)
20401b96:	476d                	li	a4,27
20401b98:	04c76a63          	bltu	a4,a2,20401bec <_realloc_r+0x242>
20401b9c:	0421                	addi	s0,s0,8
20401b9e:	01048513          	addi	a0,s1,16
20401ba2:	401c                	lw	a5,0(s0)
20401ba4:	c11c                	sw	a5,0(a0)
20401ba6:	405c                	lw	a5,4(s0)
20401ba8:	c15c                	sw	a5,4(a0)
20401baa:	441c                	lw	a5,8(s0)
20401bac:	c51c                	sw	a5,8(a0)
20401bae:	40d8                	lw	a4,4(s1)
20401bb0:	416986b3          	sub	a3,s3,s6
20401bb4:	463d                	li	a2,15
20401bb6:	8b05                	andi	a4,a4,1
20401bb8:	013487b3          	add	a5,s1,s3
20401bbc:	16d67663          	bgeu	a2,a3,20401d28 <_realloc_r+0x37e>
20401bc0:	00eb69b3          	or	s3,s6,a4
20401bc4:	0134a223          	sw	s3,4(s1)
20401bc8:	016485b3          	add	a1,s1,s6
20401bcc:	0016e693          	ori	a3,a3,1
20401bd0:	c1d4                	sw	a3,4(a1)
20401bd2:	43d8                	lw	a4,4(a5)
20401bd4:	05a1                	addi	a1,a1,8
20401bd6:	8556                	mv	a0,s5
20401bd8:	00176713          	ori	a4,a4,1
20401bdc:	c3d8                	sw	a4,4(a5)
20401bde:	87aff0ef          	jal	ra,20400c58 <_free_r>
20401be2:	8556                	mv	a0,s5
20401be4:	33d1                	jal	204019a8 <__malloc_unlock>
20401be6:	00848a13          	addi	s4,s1,8
20401bea:	bd11                	j	204019fe <_realloc_r+0x54>
20401bec:	4418                	lw	a4,8(s0)
20401bee:	c898                	sw	a4,16(s1)
20401bf0:	4458                	lw	a4,12(s0)
20401bf2:	c8d8                	sw	a4,20(s1)
20401bf4:	00f60663          	beq	a2,a5,20401c00 <_realloc_r+0x256>
20401bf8:	0441                	addi	s0,s0,16
20401bfa:	01848513          	addi	a0,s1,24
20401bfe:	b755                	j	20401ba2 <_realloc_r+0x1f8>
20401c00:	481c                	lw	a5,16(s0)
20401c02:	02048513          	addi	a0,s1,32
20401c06:	0461                	addi	s0,s0,24
20401c08:	cc9c                	sw	a5,24(s1)
20401c0a:	ffc42783          	lw	a5,-4(s0)
20401c0e:	ccdc                	sw	a5,28(s1)
20401c10:	bf49                	j	20401ba2 <_realloc_r+0x1f8>
20401c12:	85a2                	mv	a1,s0
20401c14:	3145                	jal	204018b4 <memmove>
20401c16:	bf61                	j	20401bae <_realloc_r+0x204>
20401c18:	076a4963          	blt	s4,s6,20401c8a <_realloc_r+0x2e0>
20401c1c:	44dc                	lw	a5,12(s1)
20401c1e:	4498                	lw	a4,8(s1)
20401c20:	ffc90613          	addi	a2,s2,-4
20401c24:	00848513          	addi	a0,s1,8
20401c28:	c75c                	sw	a5,12(a4)
20401c2a:	c798                	sw	a4,8(a5)
20401c2c:	02400793          	li	a5,36
20401c30:	04c7ea63          	bltu	a5,a2,20401c84 <_realloc_r+0x2da>
20401c34:	474d                	li	a4,19
20401c36:	00c77c63          	bgeu	a4,a2,20401c4e <_realloc_r+0x2a4>
20401c3a:	4018                	lw	a4,0(s0)
20401c3c:	c498                	sw	a4,8(s1)
20401c3e:	4058                	lw	a4,4(s0)
20401c40:	c4d8                	sw	a4,12(s1)
20401c42:	476d                	li	a4,27
20401c44:	00c76d63          	bltu	a4,a2,20401c5e <_realloc_r+0x2b4>
20401c48:	0421                	addi	s0,s0,8
20401c4a:	01048513          	addi	a0,s1,16
20401c4e:	401c                	lw	a5,0(s0)
20401c50:	c11c                	sw	a5,0(a0)
20401c52:	405c                	lw	a5,4(s0)
20401c54:	c15c                	sw	a5,4(a0)
20401c56:	441c                	lw	a5,8(s0)
20401c58:	c51c                	sw	a5,8(a0)
20401c5a:	89d2                	mv	s3,s4
20401c5c:	bf89                	j	20401bae <_realloc_r+0x204>
20401c5e:	4418                	lw	a4,8(s0)
20401c60:	c898                	sw	a4,16(s1)
20401c62:	4458                	lw	a4,12(s0)
20401c64:	c8d8                	sw	a4,20(s1)
20401c66:	00f60663          	beq	a2,a5,20401c72 <_realloc_r+0x2c8>
20401c6a:	0441                	addi	s0,s0,16
20401c6c:	01848513          	addi	a0,s1,24
20401c70:	bff9                	j	20401c4e <_realloc_r+0x2a4>
20401c72:	481c                	lw	a5,16(s0)
20401c74:	02048513          	addi	a0,s1,32
20401c78:	0461                	addi	s0,s0,24
20401c7a:	cc9c                	sw	a5,24(s1)
20401c7c:	ffc42783          	lw	a5,-4(s0)
20401c80:	ccdc                	sw	a5,28(s1)
20401c82:	b7f1                	j	20401c4e <_realloc_r+0x2a4>
20401c84:	85a2                	mv	a1,s0
20401c86:	313d                	jal	204018b4 <memmove>
20401c88:	bfc9                	j	20401c5a <_realloc_r+0x2b0>
20401c8a:	8556                	mv	a0,s5
20401c8c:	e4cff0ef          	jal	ra,204012d8 <_malloc_r>
20401c90:	8a2a                	mv	s4,a0
20401c92:	e8050fe3          	beqz	a0,20401b30 <_realloc_r+0x186>
20401c96:	ffc42783          	lw	a5,-4(s0)
20401c9a:	ff850713          	addi	a4,a0,-8
20401c9e:	9bf9                	andi	a5,a5,-2
20401ca0:	97de                	add	a5,a5,s7
20401ca2:	00e79863          	bne	a5,a4,20401cb2 <_realloc_r+0x308>
20401ca6:	ffc52983          	lw	s3,-4(a0)
20401caa:	ffc9f993          	andi	s3,s3,-4
20401cae:	99ca                	add	s3,s3,s2
20401cb0:	b3e5                	j	20401a98 <_realloc_r+0xee>
20401cb2:	ffc90613          	addi	a2,s2,-4
20401cb6:	02400793          	li	a5,36
20401cba:	06c7e263          	bltu	a5,a2,20401d1e <_realloc_r+0x374>
20401cbe:	474d                	li	a4,19
20401cc0:	04c77c63          	bgeu	a4,a2,20401d18 <_realloc_r+0x36e>
20401cc4:	4018                	lw	a4,0(s0)
20401cc6:	c118                	sw	a4,0(a0)
20401cc8:	4058                	lw	a4,4(s0)
20401cca:	c158                	sw	a4,4(a0)
20401ccc:	476d                	li	a4,27
20401cce:	02c76163          	bltu	a4,a2,20401cf0 <_realloc_r+0x346>
20401cd2:	00840713          	addi	a4,s0,8
20401cd6:	00850793          	addi	a5,a0,8
20401cda:	4314                	lw	a3,0(a4)
20401cdc:	c394                	sw	a3,0(a5)
20401cde:	4354                	lw	a3,4(a4)
20401ce0:	c3d4                	sw	a3,4(a5)
20401ce2:	4718                	lw	a4,8(a4)
20401ce4:	c798                	sw	a4,8(a5)
20401ce6:	85a2                	mv	a1,s0
20401ce8:	8556                	mv	a0,s5
20401cea:	f6ffe0ef          	jal	ra,20400c58 <_free_r>
20401cee:	b589                	j	20401b30 <_realloc_r+0x186>
20401cf0:	4418                	lw	a4,8(s0)
20401cf2:	c518                	sw	a4,8(a0)
20401cf4:	4458                	lw	a4,12(s0)
20401cf6:	c558                	sw	a4,12(a0)
20401cf8:	00f60763          	beq	a2,a5,20401d06 <_realloc_r+0x35c>
20401cfc:	01040713          	addi	a4,s0,16
20401d00:	01050793          	addi	a5,a0,16
20401d04:	bfd9                	j	20401cda <_realloc_r+0x330>
20401d06:	481c                	lw	a5,16(s0)
20401d08:	01840713          	addi	a4,s0,24
20401d0c:	c91c                	sw	a5,16(a0)
20401d0e:	4854                	lw	a3,20(s0)
20401d10:	01850793          	addi	a5,a0,24
20401d14:	c954                	sw	a3,20(a0)
20401d16:	b7d1                	j	20401cda <_realloc_r+0x330>
20401d18:	87aa                	mv	a5,a0
20401d1a:	8722                	mv	a4,s0
20401d1c:	bf7d                	j	20401cda <_realloc_r+0x330>
20401d1e:	85a2                	mv	a1,s0
20401d20:	3e51                	jal	204018b4 <memmove>
20401d22:	b7d1                	j	20401ce6 <_realloc_r+0x33c>
20401d24:	89ca                	mv	s3,s2
20401d26:	bb8d                	j	20401a98 <_realloc_r+0xee>
20401d28:	00e9e9b3          	or	s3,s3,a4
20401d2c:	0134a223          	sw	s3,4(s1)
20401d30:	43d8                	lw	a4,4(a5)
20401d32:	00176713          	ori	a4,a4,1
20401d36:	c3d8                	sw	a4,4(a5)
20401d38:	b56d                	j	20401be2 <_realloc_r+0x238>

20401d3a <_sbrk_r>:
_sbrk_r():
20401d3a:	1141                	addi	sp,sp,-16
20401d3c:	c422                	sw	s0,8(sp)
20401d3e:	842a                	mv	s0,a0
20401d40:	852e                	mv	a0,a1
20401d42:	5fbff797          	auipc	a5,0x5fbff
20401d46:	3407ad23          	sw	zero,858(a5) # 8000109c <errno>
20401d4a:	c606                	sw	ra,12(sp)
20401d4c:	358020ef          	jal	ra,204040a4 <_sbrk>
20401d50:	57fd                	li	a5,-1
20401d52:	00f51963          	bne	a0,a5,20401d64 <_sbrk_r+0x2a>
20401d56:	5fbff797          	auipc	a5,0x5fbff
20401d5a:	34678793          	addi	a5,a5,838 # 8000109c <errno>
20401d5e:	439c                	lw	a5,0(a5)
20401d60:	c391                	beqz	a5,20401d64 <_sbrk_r+0x2a>
20401d62:	c01c                	sw	a5,0(s0)
20401d64:	40b2                	lw	ra,12(sp)
20401d66:	4422                	lw	s0,8(sp)
20401d68:	0141                	addi	sp,sp,16
20401d6a:	8082                	ret

20401d6c <__sread>:
__sread():
20401d6c:	1141                	addi	sp,sp,-16
20401d6e:	c422                	sw	s0,8(sp)
20401d70:	842e                	mv	s0,a1
20401d72:	00e59583          	lh	a1,14(a1)
20401d76:	c606                	sw	ra,12(sp)
20401d78:	2c89                	jal	20401fca <_read_r>
20401d7a:	00054963          	bltz	a0,20401d8c <__sread+0x20>
20401d7e:	483c                	lw	a5,80(s0)
20401d80:	97aa                	add	a5,a5,a0
20401d82:	c83c                	sw	a5,80(s0)
20401d84:	40b2                	lw	ra,12(sp)
20401d86:	4422                	lw	s0,8(sp)
20401d88:	0141                	addi	sp,sp,16
20401d8a:	8082                	ret
20401d8c:	00c45783          	lhu	a5,12(s0)
20401d90:	777d                	lui	a4,0xfffff
20401d92:	177d                	addi	a4,a4,-1
20401d94:	8ff9                	and	a5,a5,a4
20401d96:	00f41623          	sh	a5,12(s0)
20401d9a:	b7ed                	j	20401d84 <__sread+0x18>

20401d9c <__seofread>:
__seofread():
20401d9c:	4501                	li	a0,0
20401d9e:	8082                	ret

20401da0 <__swrite>:
__swrite():
20401da0:	00c5d783          	lhu	a5,12(a1)
20401da4:	1101                	addi	sp,sp,-32
20401da6:	cc22                	sw	s0,24(sp)
20401da8:	ca26                	sw	s1,20(sp)
20401daa:	c84a                	sw	s2,16(sp)
20401dac:	c64e                	sw	s3,12(sp)
20401dae:	ce06                	sw	ra,28(sp)
20401db0:	1007f793          	andi	a5,a5,256
20401db4:	84aa                	mv	s1,a0
20401db6:	842e                	mv	s0,a1
20401db8:	8932                	mv	s2,a2
20401dba:	89b6                	mv	s3,a3
20401dbc:	c791                	beqz	a5,20401dc8 <__swrite+0x28>
20401dbe:	00e59583          	lh	a1,14(a1)
20401dc2:	4689                	li	a3,2
20401dc4:	4601                	li	a2,0
20401dc6:	22f9                	jal	20401f94 <_lseek_r>
20401dc8:	00c45783          	lhu	a5,12(s0)
20401dcc:	777d                	lui	a4,0xfffff
20401dce:	177d                	addi	a4,a4,-1
20401dd0:	8ff9                	and	a5,a5,a4
20401dd2:	00f41623          	sh	a5,12(s0)
20401dd6:	00e41583          	lh	a1,14(s0)
20401dda:	4462                	lw	s0,24(sp)
20401ddc:	40f2                	lw	ra,28(sp)
20401dde:	86ce                	mv	a3,s3
20401de0:	864a                	mv	a2,s2
20401de2:	49b2                	lw	s3,12(sp)
20401de4:	4942                	lw	s2,16(sp)
20401de6:	8526                	mv	a0,s1
20401de8:	44d2                	lw	s1,20(sp)
20401dea:	6105                	addi	sp,sp,32
20401dec:	a83d                	j	20401e2a <_write_r>

20401dee <__sseek>:
__sseek():
20401dee:	1141                	addi	sp,sp,-16
20401df0:	c422                	sw	s0,8(sp)
20401df2:	842e                	mv	s0,a1
20401df4:	00e59583          	lh	a1,14(a1)
20401df8:	c606                	sw	ra,12(sp)
20401dfa:	2a69                	jal	20401f94 <_lseek_r>
20401dfc:	57fd                	li	a5,-1
20401dfe:	00c45703          	lhu	a4,12(s0)
20401e02:	00f51b63          	bne	a0,a5,20401e18 <__sseek+0x2a>
20401e06:	77fd                	lui	a5,0xfffff
20401e08:	17fd                	addi	a5,a5,-1
20401e0a:	8ff9                	and	a5,a5,a4
20401e0c:	00f41623          	sh	a5,12(s0)
20401e10:	40b2                	lw	ra,12(sp)
20401e12:	4422                	lw	s0,8(sp)
20401e14:	0141                	addi	sp,sp,16
20401e16:	8082                	ret
20401e18:	6785                	lui	a5,0x1
20401e1a:	8fd9                	or	a5,a5,a4
20401e1c:	00f41623          	sh	a5,12(s0)
20401e20:	c828                	sw	a0,80(s0)
20401e22:	b7fd                	j	20401e10 <__sseek+0x22>

20401e24 <__sclose>:
__sclose():
20401e24:	00e59583          	lh	a1,14(a1)
20401e28:	a825                	j	20401e60 <_close_r>

20401e2a <_write_r>:
_write_r():
20401e2a:	1141                	addi	sp,sp,-16
20401e2c:	c422                	sw	s0,8(sp)
20401e2e:	842a                	mv	s0,a0
20401e30:	852e                	mv	a0,a1
20401e32:	85b2                	mv	a1,a2
20401e34:	8636                	mv	a2,a3
20401e36:	5fbff797          	auipc	a5,0x5fbff
20401e3a:	2607a323          	sw	zero,614(a5) # 8000109c <errno>
20401e3e:	c606                	sw	ra,12(sp)
20401e40:	2c8020ef          	jal	ra,20404108 <_write>
20401e44:	57fd                	li	a5,-1
20401e46:	00f51963          	bne	a0,a5,20401e58 <_write_r+0x2e>
20401e4a:	5fbff797          	auipc	a5,0x5fbff
20401e4e:	25278793          	addi	a5,a5,594 # 8000109c <errno>
20401e52:	439c                	lw	a5,0(a5)
20401e54:	c391                	beqz	a5,20401e58 <_write_r+0x2e>
20401e56:	c01c                	sw	a5,0(s0)
20401e58:	40b2                	lw	ra,12(sp)
20401e5a:	4422                	lw	s0,8(sp)
20401e5c:	0141                	addi	sp,sp,16
20401e5e:	8082                	ret

20401e60 <_close_r>:
_close_r():
20401e60:	1141                	addi	sp,sp,-16
20401e62:	c422                	sw	s0,8(sp)
20401e64:	842a                	mv	s0,a0
20401e66:	852e                	mv	a0,a1
20401e68:	5fbff797          	auipc	a5,0x5fbff
20401e6c:	2207aa23          	sw	zero,564(a5) # 8000109c <errno>
20401e70:	c606                	sw	ra,12(sp)
20401e72:	176020ef          	jal	ra,20403fe8 <_close>
20401e76:	57fd                	li	a5,-1
20401e78:	00f51963          	bne	a0,a5,20401e8a <_close_r+0x2a>
20401e7c:	5fbff797          	auipc	a5,0x5fbff
20401e80:	22078793          	addi	a5,a5,544 # 8000109c <errno>
20401e84:	439c                	lw	a5,0(a5)
20401e86:	c391                	beqz	a5,20401e8a <_close_r+0x2a>
20401e88:	c01c                	sw	a5,0(s0)
20401e8a:	40b2                	lw	ra,12(sp)
20401e8c:	4422                	lw	s0,8(sp)
20401e8e:	0141                	addi	sp,sp,16
20401e90:	8082                	ret

20401e92 <_fclose_r>:
_fclose_r():
20401e92:	1141                	addi	sp,sp,-16
20401e94:	c606                	sw	ra,12(sp)
20401e96:	c422                	sw	s0,8(sp)
20401e98:	c226                	sw	s1,4(sp)
20401e9a:	c04a                	sw	s2,0(sp)
20401e9c:	e989                	bnez	a1,20401eae <_fclose_r+0x1c>
20401e9e:	4901                	li	s2,0
20401ea0:	40b2                	lw	ra,12(sp)
20401ea2:	4422                	lw	s0,8(sp)
20401ea4:	854a                	mv	a0,s2
20401ea6:	4492                	lw	s1,4(sp)
20401ea8:	4902                	lw	s2,0(sp)
20401eaa:	0141                	addi	sp,sp,16
20401eac:	8082                	ret
20401eae:	84aa                	mv	s1,a0
20401eb0:	842e                	mv	s0,a1
20401eb2:	c509                	beqz	a0,20401ebc <_fclose_r+0x2a>
20401eb4:	5d1c                	lw	a5,56(a0)
20401eb6:	e399                	bnez	a5,20401ebc <_fclose_r+0x2a>
20401eb8:	bb7fe0ef          	jal	ra,20400a6e <__sinit>
20401ebc:	00c41783          	lh	a5,12(s0)
20401ec0:	dff9                	beqz	a5,20401e9e <_fclose_r+0xc>
20401ec2:	85a2                	mv	a1,s0
20401ec4:	8526                	mv	a0,s1
20401ec6:	931fe0ef          	jal	ra,204007f6 <__sflush_r>
20401eca:	545c                	lw	a5,44(s0)
20401ecc:	892a                	mv	s2,a0
20401ece:	c799                	beqz	a5,20401edc <_fclose_r+0x4a>
20401ed0:	4c4c                	lw	a1,28(s0)
20401ed2:	8526                	mv	a0,s1
20401ed4:	9782                	jalr	a5
20401ed6:	00055363          	bgez	a0,20401edc <_fclose_r+0x4a>
20401eda:	597d                	li	s2,-1
20401edc:	00c45783          	lhu	a5,12(s0)
20401ee0:	0807f793          	andi	a5,a5,128
20401ee4:	c789                	beqz	a5,20401eee <_fclose_r+0x5c>
20401ee6:	480c                	lw	a1,16(s0)
20401ee8:	8526                	mv	a0,s1
20401eea:	d6ffe0ef          	jal	ra,20400c58 <_free_r>
20401eee:	580c                	lw	a1,48(s0)
20401ef0:	c991                	beqz	a1,20401f04 <_fclose_r+0x72>
20401ef2:	04040793          	addi	a5,s0,64
20401ef6:	00f58563          	beq	a1,a5,20401f00 <_fclose_r+0x6e>
20401efa:	8526                	mv	a0,s1
20401efc:	d5dfe0ef          	jal	ra,20400c58 <_free_r>
20401f00:	02042823          	sw	zero,48(s0)
20401f04:	406c                	lw	a1,68(s0)
20401f06:	c591                	beqz	a1,20401f12 <_fclose_r+0x80>
20401f08:	8526                	mv	a0,s1
20401f0a:	d4ffe0ef          	jal	ra,20400c58 <_free_r>
20401f0e:	04042223          	sw	zero,68(s0)
20401f12:	c47fe0ef          	jal	ra,20400b58 <__sfp_lock_acquire>
20401f16:	00041623          	sh	zero,12(s0)
20401f1a:	c41fe0ef          	jal	ra,20400b5a <__sfp_lock_release>
20401f1e:	b749                	j	20401ea0 <_fclose_r+0xe>

20401f20 <fclose>:
fclose():
20401f20:	5fbff797          	auipc	a5,0x5fbff
20401f24:	11078793          	addi	a5,a5,272 # 80001030 <_impure_ptr>
20401f28:	85aa                	mv	a1,a0
20401f2a:	4388                	lw	a0,0(a5)
20401f2c:	b79d                	j	20401e92 <_fclose_r>

20401f2e <_fstat_r>:
_fstat_r():
20401f2e:	1141                	addi	sp,sp,-16
20401f30:	c422                	sw	s0,8(sp)
20401f32:	842a                	mv	s0,a0
20401f34:	852e                	mv	a0,a1
20401f36:	85b2                	mv	a1,a2
20401f38:	5fbff797          	auipc	a5,0x5fbff
20401f3c:	1607a223          	sw	zero,356(a5) # 8000109c <errno>
20401f40:	c606                	sw	ra,12(sp)
20401f42:	0c8020ef          	jal	ra,2040400a <_fstat>
20401f46:	57fd                	li	a5,-1
20401f48:	00f51963          	bne	a0,a5,20401f5a <_fstat_r+0x2c>
20401f4c:	5fbff797          	auipc	a5,0x5fbff
20401f50:	15078793          	addi	a5,a5,336 # 8000109c <errno>
20401f54:	439c                	lw	a5,0(a5)
20401f56:	c391                	beqz	a5,20401f5a <_fstat_r+0x2c>
20401f58:	c01c                	sw	a5,0(s0)
20401f5a:	40b2                	lw	ra,12(sp)
20401f5c:	4422                	lw	s0,8(sp)
20401f5e:	0141                	addi	sp,sp,16
20401f60:	8082                	ret

20401f62 <_isatty_r>:
_isatty_r():
20401f62:	1141                	addi	sp,sp,-16
20401f64:	c422                	sw	s0,8(sp)
20401f66:	842a                	mv	s0,a0
20401f68:	852e                	mv	a0,a1
20401f6a:	5fbff797          	auipc	a5,0x5fbff
20401f6e:	1207a923          	sw	zero,306(a5) # 8000109c <errno>
20401f72:	c606                	sw	ra,12(sp)
20401f74:	0bc020ef          	jal	ra,20404030 <_isatty>
20401f78:	57fd                	li	a5,-1
20401f7a:	00f51963          	bne	a0,a5,20401f8c <_isatty_r+0x2a>
20401f7e:	5fbff797          	auipc	a5,0x5fbff
20401f82:	11e78793          	addi	a5,a5,286 # 8000109c <errno>
20401f86:	439c                	lw	a5,0(a5)
20401f88:	c391                	beqz	a5,20401f8c <_isatty_r+0x2a>
20401f8a:	c01c                	sw	a5,0(s0)
20401f8c:	40b2                	lw	ra,12(sp)
20401f8e:	4422                	lw	s0,8(sp)
20401f90:	0141                	addi	sp,sp,16
20401f92:	8082                	ret

20401f94 <_lseek_r>:
_lseek_r():
20401f94:	1141                	addi	sp,sp,-16
20401f96:	c422                	sw	s0,8(sp)
20401f98:	842a                	mv	s0,a0
20401f9a:	852e                	mv	a0,a1
20401f9c:	85b2                	mv	a1,a2
20401f9e:	8636                	mv	a2,a3
20401fa0:	5fbff797          	auipc	a5,0x5fbff
20401fa4:	0e07ae23          	sw	zero,252(a5) # 8000109c <errno>
20401fa8:	c606                	sw	ra,12(sp)
20401faa:	0a6020ef          	jal	ra,20404050 <_lseek>
20401fae:	57fd                	li	a5,-1
20401fb0:	00f51963          	bne	a0,a5,20401fc2 <_lseek_r+0x2e>
20401fb4:	5fbff797          	auipc	a5,0x5fbff
20401fb8:	0e878793          	addi	a5,a5,232 # 8000109c <errno>
20401fbc:	439c                	lw	a5,0(a5)
20401fbe:	c391                	beqz	a5,20401fc2 <_lseek_r+0x2e>
20401fc0:	c01c                	sw	a5,0(s0)
20401fc2:	40b2                	lw	ra,12(sp)
20401fc4:	4422                	lw	s0,8(sp)
20401fc6:	0141                	addi	sp,sp,16
20401fc8:	8082                	ret

20401fca <_read_r>:
_read_r():
20401fca:	1141                	addi	sp,sp,-16
20401fcc:	c422                	sw	s0,8(sp)
20401fce:	842a                	mv	s0,a0
20401fd0:	852e                	mv	a0,a1
20401fd2:	85b2                	mv	a1,a2
20401fd4:	8636                	mv	a2,a3
20401fd6:	5fbff797          	auipc	a5,0x5fbff
20401fda:	0c07a323          	sw	zero,198(a5) # 8000109c <errno>
20401fde:	c606                	sw	ra,12(sp)
20401fe0:	09a020ef          	jal	ra,2040407a <_read>
20401fe4:	57fd                	li	a5,-1
20401fe6:	00f51963          	bne	a0,a5,20401ff8 <_read_r+0x2e>
20401fea:	5fbff797          	auipc	a5,0x5fbff
20401fee:	0b278793          	addi	a5,a5,178 # 8000109c <errno>
20401ff2:	439c                	lw	a5,0(a5)
20401ff4:	c391                	beqz	a5,20401ff8 <_read_r+0x2e>
20401ff6:	c01c                	sw	a5,0(s0)
20401ff8:	40b2                	lw	ra,12(sp)
20401ffa:	4422                	lw	s0,8(sp)
20401ffc:	0141                	addi	sp,sp,16
20401ffe:	8082                	ret

20402000 <metal_cpu_get_mtime>:
metal_cpu_get_mtime():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/cpu.h:84
 *
 * @param cpu The CPU device handle
 * @return The value of mtime, or 0 if failure
 */
inline unsigned long long metal_cpu_get_mtime(struct metal_cpu *cpu)
{ return cpu->vtable->mtime_get(cpu); }
20402000:	1101                	addi	sp,sp,-32
20402002:	ce06                	sw	ra,28(sp)
20402004:	cc22                	sw	s0,24(sp)
20402006:	1000                	addi	s0,sp,32
20402008:	fea42623          	sw	a0,-20(s0)
2040200c:	fec42783          	lw	a5,-20(s0)
20402010:	439c                	lw	a5,0(a5)
20402012:	479c                	lw	a5,8(a5)
20402014:	fec42503          	lw	a0,-20(s0)
20402018:	9782                	jalr	a5
2040201a:	87aa                	mv	a5,a0
2040201c:	882e                	mv	a6,a1
2040201e:	853e                	mv	a0,a5
20402020:	85c2                	mv	a1,a6
20402022:	40f2                	lw	ra,28(sp)
20402024:	4462                	lw	s0,24(sp)
20402026:	6105                	addi	sp,sp,32
20402028:	8082                	ret

2040202a <metal_cpu_set_mtimecmp>:
metal_cpu_set_mtimecmp():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/cpu.h:97
 * @param cpu The CPU device handle
 * @param time The value to set the compare register to
 * @return The value of mtimecmp or -1 if error
 */
inline int metal_cpu_set_mtimecmp(struct metal_cpu *cpu, unsigned long long time)
{ return cpu->vtable->mtimecmp_set(cpu, time); }
2040202a:	1101                	addi	sp,sp,-32
2040202c:	ce06                	sw	ra,28(sp)
2040202e:	cc22                	sw	s0,24(sp)
20402030:	1000                	addi	s0,sp,32
20402032:	fea42623          	sw	a0,-20(s0)
20402036:	feb42023          	sw	a1,-32(s0)
2040203a:	fec42223          	sw	a2,-28(s0)
2040203e:	fec42783          	lw	a5,-20(s0)
20402042:	439c                	lw	a5,0(a5)
20402044:	47dc                	lw	a5,12(a5)
20402046:	fe042583          	lw	a1,-32(s0)
2040204a:	fe442603          	lw	a2,-28(s0)
2040204e:	fec42503          	lw	a0,-20(s0)
20402052:	9782                	jalr	a5
20402054:	87aa                	mv	a5,a0
20402056:	853e                	mv	a0,a5
20402058:	40f2                	lw	ra,28(sp)
2040205a:	4462                	lw	s0,24(sp)
2040205c:	6105                	addi	sp,sp,32
2040205e:	8082                	ret

20402060 <metal_cpu_timer_interrupt_controller>:
metal_cpu_timer_interrupt_controller():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/cpu.h:109
 *
 * @param cpu The CPU device handle
 * @return A pointer to the timer interrupt handle
 */
inline struct metal_interrupt* metal_cpu_timer_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->tmr_controller_interrupt(cpu); }
20402060:	1101                	addi	sp,sp,-32
20402062:	ce06                	sw	ra,28(sp)
20402064:	cc22                	sw	s0,24(sp)
20402066:	1000                	addi	s0,sp,32
20402068:	fea42623          	sw	a0,-20(s0)
2040206c:	fec42783          	lw	a5,-20(s0)
20402070:	439c                	lw	a5,0(a5)
20402072:	4b9c                	lw	a5,16(a5)
20402074:	fec42503          	lw	a0,-20(s0)
20402078:	9782                	jalr	a5
2040207a:	87aa                	mv	a5,a0
2040207c:	853e                	mv	a0,a5
2040207e:	40f2                	lw	ra,28(sp)
20402080:	4462                	lw	s0,24(sp)
20402082:	6105                	addi	sp,sp,32
20402084:	8082                	ret

20402086 <metal_cpu_timer_get_interrupt_id>:
metal_cpu_timer_get_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/cpu.h:119
 *
 * @param cpu The CPU device handle
 * @return The timer interrupt ID
 */
inline int metal_cpu_timer_get_interrupt_id(struct metal_cpu *cpu)
{ return cpu->vtable->get_tmr_interrupt_id(cpu); }
20402086:	1101                	addi	sp,sp,-32
20402088:	ce06                	sw	ra,28(sp)
2040208a:	cc22                	sw	s0,24(sp)
2040208c:	1000                	addi	s0,sp,32
2040208e:	fea42623          	sw	a0,-20(s0)
20402092:	fec42783          	lw	a5,-20(s0)
20402096:	439c                	lw	a5,0(a5)
20402098:	4bdc                	lw	a5,20(a5)
2040209a:	fec42503          	lw	a0,-20(s0)
2040209e:	9782                	jalr	a5
204020a0:	87aa                	mv	a5,a0
204020a2:	853e                	mv	a0,a5
204020a4:	40f2                	lw	ra,28(sp)
204020a6:	4462                	lw	s0,24(sp)
204020a8:	6105                	addi	sp,sp,32
204020aa:	8082                	ret

204020ac <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/cpu.h:198
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
inline struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204020ac:	1101                	addi	sp,sp,-32
204020ae:	ce06                	sw	ra,28(sp)
204020b0:	cc22                	sw	s0,24(sp)
204020b2:	1000                	addi	s0,sp,32
204020b4:	fea42623          	sw	a0,-20(s0)
204020b8:	fec42783          	lw	a5,-20(s0)
204020bc:	439c                	lw	a5,0(a5)
204020be:	57dc                	lw	a5,44(a5)
204020c0:	fec42503          	lw	a0,-20(s0)
204020c4:	9782                	jalr	a5
204020c6:	87aa                	mv	a5,a0
204020c8:	853e                	mv	a0,a5
204020ca:	40f2                	lw	ra,28(sp)
204020cc:	4462                	lw	s0,24(sp)
204020ce:	6105                	addi	sp,sp,32
204020d0:	8082                	ret

204020d2 <metal_cpu_get>:
metal_cpu_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(int hartid)
{
204020d2:	1101                	addi	sp,sp,-32
204020d4:	ce22                	sw	s0,28(sp)
204020d6:	1000                	addi	s0,sp,32
204020d8:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204020dc:	fec42783          	lw	a5,-20(s0)
204020e0:	00f04a63          	bgtz	a5,204020f4 <metal_cpu_get+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204020e4:	fec42703          	lw	a4,-20(s0)
204020e8:	070a                	slli	a4,a4,0x2
204020ea:	81418793          	addi	a5,gp,-2028 # 80001044 <__metal_cpu_table>
204020ee:	97ba                	add	a5,a5,a4
204020f0:	439c                	lw	a5,0(a5)
204020f2:	a011                	j	204020f6 <metal_cpu_get+0x24>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204020f4:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204020f6:	853e                	mv	a0,a5
204020f8:	4472                	lw	s0,28(sp)
204020fa:	6105                	addi	sp,sp,32
204020fc:	8082                	ret
	...

20402100 <early_trap_vector>:
early_trap_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:84
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    j early_trap_vector
20402100:	a001                	j	20402100 <early_trap_vector>

20402102 <metal_interrupt_init>:
metal_interrupt_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:59
 * is invalid to initialize an interrupt controller more than once.
 *
 * @param controller The handle for the interrupt controller
 */
inline void metal_interrupt_init(struct metal_interrupt *controller)
{
20402102:	1101                	addi	sp,sp,-32
20402104:	ce06                	sw	ra,28(sp)
20402106:	cc22                	sw	s0,24(sp)
20402108:	1000                	addi	s0,sp,32
2040210a:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:60
    return controller->vtable->interrupt_init(controller);
2040210e:	fec42783          	lw	a5,-20(s0)
20402112:	439c                	lw	a5,0(a5)
20402114:	439c                	lw	a5,0(a5)
20402116:	fec42503          	lw	a0,-20(s0)
2040211a:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:61
}
2040211c:	40f2                	lw	ra,28(sp)
2040211e:	4462                	lw	s0,24(sp)
20402120:	6105                	addi	sp,sp,32
20402122:	8082                	ret

20402124 <metal_interrupt_register_handler>:
metal_interrupt_register_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:76
 */
inline int metal_interrupt_register_handler(struct metal_interrupt *controller,
                                          int id,
                                          metal_interrupt_handler_t handler,
                                          void *priv_data)
{
20402124:	1101                	addi	sp,sp,-32
20402126:	ce06                	sw	ra,28(sp)
20402128:	cc22                	sw	s0,24(sp)
2040212a:	1000                	addi	s0,sp,32
2040212c:	fea42623          	sw	a0,-20(s0)
20402130:	feb42423          	sw	a1,-24(s0)
20402134:	fec42223          	sw	a2,-28(s0)
20402138:	fed42023          	sw	a3,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:77
    return controller->vtable->interrupt_register(controller, id, handler, priv_data);
2040213c:	fec42783          	lw	a5,-20(s0)
20402140:	439c                	lw	a5,0(a5)
20402142:	43dc                	lw	a5,4(a5)
20402144:	fe042683          	lw	a3,-32(s0)
20402148:	fe442603          	lw	a2,-28(s0)
2040214c:	fe842583          	lw	a1,-24(s0)
20402150:	fec42503          	lw	a0,-20(s0)
20402154:	9782                	jalr	a5
20402156:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:78
}
20402158:	853e                	mv	a0,a5
2040215a:	40f2                	lw	ra,28(sp)
2040215c:	4462                	lw	s0,24(sp)
2040215e:	6105                	addi	sp,sp,32
20402160:	8082                	ret

20402162 <metal_interrupt_enable>:
metal_interrupt_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:87
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
inline int metal_interrupt_enable(struct metal_interrupt *controller, int id)
{
20402162:	1101                	addi	sp,sp,-32
20402164:	ce06                	sw	ra,28(sp)
20402166:	cc22                	sw	s0,24(sp)
20402168:	1000                	addi	s0,sp,32
2040216a:	fea42623          	sw	a0,-20(s0)
2040216e:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:88
    return controller->vtable->interrupt_enable(controller, id);
20402172:	fec42783          	lw	a5,-20(s0)
20402176:	439c                	lw	a5,0(a5)
20402178:	479c                	lw	a5,8(a5)
2040217a:	fe842583          	lw	a1,-24(s0)
2040217e:	fec42503          	lw	a0,-20(s0)
20402182:	9782                	jalr	a5
20402184:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:89
}
20402186:	853e                	mv	a0,a5
20402188:	40f2                	lw	ra,28(sp)
2040218a:	4462                	lw	s0,24(sp)
2040218c:	6105                	addi	sp,sp,32
2040218e:	8082                	ret

20402190 <metal_interrupt_disable>:
metal_interrupt_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:98
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
inline int metal_interrupt_disable(struct metal_interrupt *controller, int id)
{
20402190:	1101                	addi	sp,sp,-32
20402192:	ce06                	sw	ra,28(sp)
20402194:	cc22                	sw	s0,24(sp)
20402196:	1000                	addi	s0,sp,32
20402198:	fea42623          	sw	a0,-20(s0)
2040219c:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:99
    return controller->vtable->interrupt_disable(controller, id);
204021a0:	fec42783          	lw	a5,-20(s0)
204021a4:	439c                	lw	a5,0(a5)
204021a6:	47dc                	lw	a5,12(a5)
204021a8:	fe842583          	lw	a1,-24(s0)
204021ac:	fec42503          	lw	a0,-20(s0)
204021b0:	9782                	jalr	a5
204021b2:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/interrupt.h:100
}
204021b4:	853e                	mv	a0,a5
204021b6:	40f2                	lw	ra,28(sp)
204021b8:	4462                	lw	s0,24(sp)
204021ba:	6105                	addi	sp,sp,32
204021bc:	8082                	ret

204021be <metal_led_enable>:
metal_led_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/led.h:48

/*!
 * @brief Enable an LED
 * @param led The handle for the LED
 */
inline void metal_led_enable(struct metal_led *led) { led->vtable->led_enable(led); }
204021be:	1101                	addi	sp,sp,-32
204021c0:	ce06                	sw	ra,28(sp)
204021c2:	cc22                	sw	s0,24(sp)
204021c4:	1000                	addi	s0,sp,32
204021c6:	fea42623          	sw	a0,-20(s0)
204021ca:	fec42783          	lw	a5,-20(s0)
204021ce:	439c                	lw	a5,0(a5)
204021d0:	43dc                	lw	a5,4(a5)
204021d2:	fec42503          	lw	a0,-20(s0)
204021d6:	9782                	jalr	a5
204021d8:	0001                	nop
204021da:	40f2                	lw	ra,28(sp)
204021dc:	4462                	lw	s0,24(sp)
204021de:	6105                	addi	sp,sp,32
204021e0:	8082                	ret

204021e2 <metal_led_on>:
metal_led_on():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/led.h:54

/*!
 * @brief Turn an LED on
 * @param led The handle for the LED
 */
inline void metal_led_on(struct metal_led *led) { led->vtable->led_on(led); }
204021e2:	1101                	addi	sp,sp,-32
204021e4:	ce06                	sw	ra,28(sp)
204021e6:	cc22                	sw	s0,24(sp)
204021e8:	1000                	addi	s0,sp,32
204021ea:	fea42623          	sw	a0,-20(s0)
204021ee:	fec42783          	lw	a5,-20(s0)
204021f2:	439c                	lw	a5,0(a5)
204021f4:	479c                	lw	a5,8(a5)
204021f6:	fec42503          	lw	a0,-20(s0)
204021fa:	9782                	jalr	a5
204021fc:	0001                	nop
204021fe:	40f2                	lw	ra,28(sp)
20402200:	4462                	lw	s0,24(sp)
20402202:	6105                	addi	sp,sp,32
20402204:	8082                	ret

20402206 <metal_led_off>:
metal_led_off():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/led.h:60

/*!
 * @brief Turn an LED off
 * @param led The handle for the LED
 */
inline void metal_led_off(struct metal_led *led) { led->vtable->led_off(led); }
20402206:	1101                	addi	sp,sp,-32
20402208:	ce06                	sw	ra,28(sp)
2040220a:	cc22                	sw	s0,24(sp)
2040220c:	1000                	addi	s0,sp,32
2040220e:	fea42623          	sw	a0,-20(s0)
20402212:	fec42783          	lw	a5,-20(s0)
20402216:	439c                	lw	a5,0(a5)
20402218:	47dc                	lw	a5,12(a5)
2040221a:	fec42503          	lw	a0,-20(s0)
2040221e:	9782                	jalr	a5
20402220:	0001                	nop
20402222:	40f2                	lw	ra,28(sp)
20402224:	4462                	lw	s0,24(sp)
20402226:	6105                	addi	sp,sp,32
20402228:	8082                	ret

2040222a <metal_led_get_rgb>:
metal_led_get_rgb():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:9
#include <string.h>
#include <metal/led.h>
#include <metal/machine.h>

struct metal_led* metal_led_get_rgb (char *label, char *color)
{
2040222a:	7175                	addi	sp,sp,-144
2040222c:	c706                	sw	ra,140(sp)
2040222e:	c522                	sw	s0,136(sp)
20402230:	0900                	addi	s0,sp,144
20402232:	f6a42e23          	sw	a0,-132(s0)
20402236:	f6b42c23          	sw	a1,-136(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:14
    int i;
    struct metal_led *led;
    char led_label[100];

    if ((__METAL_DT_MAX_LEDS == 0) ||
2040223a:	f7c42783          	lw	a5,-132(s0)
2040223e:	c781                	beqz	a5,20402246 <metal_led_get_rgb+0x1c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:15
	(label == NULL) || (color == NULL)) {
20402240:	f7842783          	lw	a5,-136(s0)
20402244:	e399                	bnez	a5,2040224a <metal_led_get_rgb+0x20>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:16
        return NULL;
20402246:	4781                	li	a5,0
20402248:	a0bd                	j	204022b6 <metal_led_get_rgb+0x8c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:19
    }

    strcpy(led_label, label);
2040224a:	f8440793          	addi	a5,s0,-124
2040224e:	f7c42583          	lw	a1,-132(s0)
20402252:	853e                	mv	a0,a5
20402254:	13a020ef          	jal	ra,2040438e <strcpy>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:20
    strcat(led_label, color);
20402258:	f8440793          	addi	a5,s0,-124
2040225c:	f7842583          	lw	a1,-136(s0)
20402260:	853e                	mv	a0,a5
20402262:	7ef010ef          	jal	ra,20404250 <strcat>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:21
    for (i = 0; i < __METAL_DT_MAX_LEDS; i++) {
20402266:	fe042623          	sw	zero,-20(s0)
2040226a:	a081                	j	204022aa <metal_led_get_rgb+0x80>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:22
        led = (struct metal_led*)__metal_led_table[i];
2040226c:	800017b7          	lui	a5,0x80001
20402270:	fec42703          	lw	a4,-20(s0)
20402274:	070a                	slli	a4,a4,0x2
20402276:	02478793          	addi	a5,a5,36 # 80001024 <metal_segment_heap_target_end+0xffffd024>
2040227a:	97ba                	add	a5,a5,a4
2040227c:	439c                	lw	a5,0(a5)
2040227e:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:23
        if (led->vtable->led_exist(led, led_label)) {
20402282:	fe842783          	lw	a5,-24(s0)
20402286:	439c                	lw	a5,0(a5)
20402288:	4398                	lw	a4,0(a5)
2040228a:	f8440793          	addi	a5,s0,-124
2040228e:	85be                	mv	a1,a5
20402290:	fe842503          	lw	a0,-24(s0)
20402294:	9702                	jalr	a4
20402296:	87aa                	mv	a5,a0
20402298:	c781                	beqz	a5,204022a0 <metal_led_get_rgb+0x76>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:24
	    return led;
2040229a:	fe842783          	lw	a5,-24(s0)
2040229e:	a821                	j	204022b6 <metal_led_get_rgb+0x8c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:21 (discriminator 2)
    for (i = 0; i < __METAL_DT_MAX_LEDS; i++) {
204022a0:	fec42783          	lw	a5,-20(s0)
204022a4:	0785                	addi	a5,a5,1
204022a6:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:21 (discriminator 1)
204022aa:	fec42703          	lw	a4,-20(s0)
204022ae:	4789                	li	a5,2
204022b0:	fae7dee3          	bge	a5,a4,2040226c <metal_led_get_rgb+0x42>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:27
	}
    }
    return NULL;
204022b4:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/led.c:28 (discriminator 1)
}
204022b6:	853e                	mv	a0,a5
204022b8:	40ba                	lw	ra,140(sp)
204022ba:	442a                	lw	s0,136(sp)
204022bc:	6149                	addi	sp,sp,144
204022be:	8082                	ret

204022c0 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:8

#include <metal/drivers/fixed-clock.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204022c0:	7179                	addi	sp,sp,-48
204022c2:	d622                	sw	s0,44(sp)
204022c4:	1800                	addi	s0,sp,48
204022c6:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:9
    const struct __metal_driver_fixed_clock *clk = (void *)gclk;
204022ca:	fdc42783          	lw	a5,-36(s0)
204022ce:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:10
    return clk->rate;
204022d2:	fec42783          	lw	a5,-20(s0)
204022d6:	4f9c                	lw	a5,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:11
}
204022d8:	853e                	mv	a0,a5
204022da:	5432                	lw	s0,44(sp)
204022dc:	6145                	addi	sp,sp,48
204022de:	8082                	ret

204022e0 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204022e0:	1101                	addi	sp,sp,-32
204022e2:	ce06                	sw	ra,28(sp)
204022e4:	cc22                	sw	s0,24(sp)
204022e6:	1000                	addi	s0,sp,32
204022e8:	fea42623          	sw	a0,-20(s0)
204022ec:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204022f0:	fec42503          	lw	a0,-20(s0)
204022f4:	37f1                	jal	204022c0 <__metal_driver_fixed_clock_get_rate_hz>
204022f6:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:16
}
204022f8:	853e                	mv	a0,a5
204022fa:	40f2                	lw	ra,28(sp)
204022fc:	4462                	lw	s0,24(sp)
204022fe:	6105                	addi	sp,sp,32
20402300:	8082                	ret

20402302 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:8

#include <metal/io.h>
#include <metal/drivers/riscv,clint0.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402302:	7179                	addi	sp,sp,-48
20402304:	d622                	sw	s0,44(sp)
20402306:	1800                	addi	s0,sp,48
20402308:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:13 (discriminator 1)
    __metal_io_u32 lo, hi;

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4));
2040230c:	fdc42503          	lw	a0,-36(s0)
20402310:	00852883          	lw	a7,8(a0)
20402314:	6531                	lui	a0,0xc
20402316:	1571                	addi	a0,a0,-4
20402318:	9546                	add	a0,a0,a7
2040231a:	4108                	lw	a0,0(a0)
2040231c:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:14 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET));
20402320:	fdc42503          	lw	a0,-36(s0)
20402324:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20402328:	6531                	lui	a0,0xc
2040232a:	1561                	addi	a0,a0,-8
2040232c:	9546                	add	a0,a0,a7
2040232e:	4108                	lw	a0,0(a0)
20402330:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:15 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4)) != hi);
20402334:	fdc42503          	lw	a0,-36(s0)
20402338:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
2040233c:	6531                	lui	a0,0xc
2040233e:	1571                	addi	a0,a0,-4
20402340:	9546                	add	a0,a0,a7
20402342:	4108                	lw	a0,0(a0)
20402344:	fec42883          	lw	a7,-20(s0)
20402348:	fca892e3          	bne	a7,a0,2040230c <__metal_clint0_mtime_get+0xa>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:17

    return (((unsigned long long)hi) << 32) | lo;
2040234c:	fec42503          	lw	a0,-20(s0)
20402350:	832a                	mv	t1,a0
20402352:	4381                	li	t2,0
20402354:	00031813          	slli	a6,t1,0x0
20402358:	4781                	li	a5,0
2040235a:	fe842503          	lw	a0,-24(s0)
2040235e:	86aa                	mv	a3,a0
20402360:	4701                	li	a4,0
20402362:	00d7e5b3          	or	a1,a5,a3
20402366:	00e86633          	or	a2,a6,a4
2040236a:	87ae                	mv	a5,a1
2040236c:	8832                	mv	a6,a2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:18
}
2040236e:	853e                	mv	a0,a5
20402370:	85c2                	mv	a1,a6
20402372:	5432                	lw	s0,44(sp)
20402374:	6145                	addi	sp,sp,48
20402376:	8082                	ret

20402378 <__metal_clint0_mtime_set>:
__metal_clint0_mtime_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:21

int __metal_clint0_mtime_set (struct __metal_driver_riscv_clint0 *clint, unsigned long long time)
{   
20402378:	1101                	addi	sp,sp,-32
2040237a:	ce22                	sw	s0,28(sp)
2040237c:	1000                	addi	s0,sp,32
2040237e:	fea42623          	sw	a0,-20(s0)
20402382:	feb42023          	sw	a1,-32(s0)
20402386:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:28
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = 0xFFFFFFFF;
2040238a:	fec42703          	lw	a4,-20(s0)
2040238e:	4714                	lw	a3,8(a4)
20402390:	6711                	lui	a4,0x4
20402392:	0711                	addi	a4,a4,4
20402394:	9736                	add	a4,a4,a3
20402396:	86ba                	mv	a3,a4
20402398:	577d                	li	a4,-1
2040239a:	c298                	sw	a4,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:29
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET)) = (__metal_io_u32)time;
2040239c:	fec42703          	lw	a4,-20(s0)
204023a0:	4714                	lw	a3,8(a4)
204023a2:	6711                	lui	a4,0x4
204023a4:	9736                	add	a4,a4,a3
204023a6:	86ba                	mv	a3,a4
204023a8:	fe042703          	lw	a4,-32(s0)
204023ac:	c298                	sw	a4,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:30
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = (__metal_io_u32)(time >> 32);
204023ae:	fe442703          	lw	a4,-28(s0)
204023b2:	00075793          	srli	a5,a4,0x0
204023b6:	4801                	li	a6,0
204023b8:	fec42703          	lw	a4,-20(s0)
204023bc:	4714                	lw	a3,8(a4)
204023be:	6711                	lui	a4,0x4
204023c0:	0711                	addi	a4,a4,4
204023c2:	9736                	add	a4,a4,a3
204023c4:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:31
    return 0;
204023c6:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:32
}
204023c8:	853e                	mv	a0,a5
204023ca:	4472                	lw	s0,28(sp)
204023cc:	6105                	addi	sp,sp,32
204023ce:	8082                	ret

204023d0 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:35

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204023d0:	7179                	addi	sp,sp,-48
204023d2:	d606                	sw	ra,44(sp)
204023d4:	d422                	sw	s0,40(sp)
204023d6:	1800                	addi	s0,sp,48
204023d8:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:36
    struct __metal_driver_riscv_clint0 *clint =
204023dc:	fdc42783          	lw	a5,-36(s0)
204023e0:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:39
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204023e4:	fe842783          	lw	a5,-24(s0)
204023e8:	4b9c                	lw	a5,16(a5)
204023ea:	efa9                	bnez	a5,20402444 <__metal_driver_riscv_clint0_init+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:40
        struct metal_interrupt *intc = clint->interrupt_parent;
204023ec:	fe842783          	lw	a5,-24(s0)
204023f0:	4bdc                	lw	a5,20(a5)
204023f2:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43

	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < clint->num_interrupts; i++) {
204023f6:	fe042623          	sw	zero,-20(s0)
204023fa:	a815                	j	2040242e <__metal_driver_riscv_clint0_init+0x5e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:44 (discriminator 3)
            intc->vtable->interrupt_register(intc,
204023fc:	fe442783          	lw	a5,-28(s0)
20402400:	439c                	lw	a5,0(a5)
20402402:	0047a803          	lw	a6,4(a5)
20402406:	fe842703          	lw	a4,-24(s0)
2040240a:	fec42783          	lw	a5,-20(s0)
2040240e:	0791                	addi	a5,a5,4
20402410:	078a                	slli	a5,a5,0x2
20402412:	97ba                	add	a5,a5,a4
20402414:	47dc                	lw	a5,12(a5)
20402416:	fe842683          	lw	a3,-24(s0)
2040241a:	4601                	li	a2,0
2040241c:	85be                	mv	a1,a5
2040241e:	fe442503          	lw	a0,-28(s0)
20402422:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 3)
        for (int i = 0; i < clint->num_interrupts; i++) {
20402424:	fec42783          	lw	a5,-20(s0)
20402428:	0785                	addi	a5,a5,1
2040242a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 1)
2040242e:	fe842783          	lw	a5,-24(s0)
20402432:	4f9c                	lw	a5,24(a5)
20402434:	fec42703          	lw	a4,-20(s0)
20402438:	fcf742e3          	blt	a4,a5,204023fc <__metal_driver_riscv_clint0_init+0x2c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:48
					     clint->interrupt_lines[i],
					     NULL, clint);
	}
	clint->init_done = 1;
2040243c:	fe842783          	lw	a5,-24(s0)
20402440:	4705                	li	a4,1
20402442:	cb98                	sw	a4,16(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:50
    }	
}
20402444:	0001                	nop
20402446:	50b2                	lw	ra,44(sp)
20402448:	5422                	lw	s0,40(sp)
2040244a:	6145                	addi	sp,sp,48
2040244c:	8082                	ret

2040244e <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:55

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
2040244e:	7179                	addi	sp,sp,-48
20402450:	d606                	sw	ra,44(sp)
20402452:	d422                	sw	s0,40(sp)
20402454:	1800                	addi	s0,sp,48
20402456:	fca42e23          	sw	a0,-36(s0)
2040245a:	fcb42c23          	sw	a1,-40(s0)
2040245e:	fcc42a23          	sw	a2,-44(s0)
20402462:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:56
    int rc = -1;
20402466:	57fd                	li	a5,-1
20402468:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:57
    struct __metal_driver_riscv_clint0 *clint =
2040246c:	fdc42783          	lw	a5,-36(s0)
20402470:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:59
                              (struct __metal_driver_riscv_clint0 *)(controller);
    struct metal_interrupt *intc = clint->interrupt_parent;
20402474:	fe842783          	lw	a5,-24(s0)
20402478:	4bdc                	lw	a5,20(a5)
2040247a:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:62

    /* Register its interrupts with parent controller */
    if (intc) {
2040247e:	fe442783          	lw	a5,-28(s0)
20402482:	c385                	beqz	a5,204024a2 <__metal_driver_riscv_clint0_register+0x54>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:63
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402484:	fe442783          	lw	a5,-28(s0)
20402488:	439c                	lw	a5,0(a5)
2040248a:	43dc                	lw	a5,4(a5)
2040248c:	fd042683          	lw	a3,-48(s0)
20402490:	fd442603          	lw	a2,-44(s0)
20402494:	fd842583          	lw	a1,-40(s0)
20402498:	fe442503          	lw	a0,-28(s0)
2040249c:	9782                	jalr	a5
2040249e:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:65
    }
    return rc;
204024a2:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:66
}
204024a6:	853e                	mv	a0,a5
204024a8:	50b2                	lw	ra,44(sp)
204024aa:	5422                	lw	s0,40(sp)
204024ac:	6145                	addi	sp,sp,48
204024ae:	8082                	ret

204024b0 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:69

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204024b0:	7179                	addi	sp,sp,-48
204024b2:	d606                	sw	ra,44(sp)
204024b4:	d422                	sw	s0,40(sp)
204024b6:	1800                	addi	s0,sp,48
204024b8:	fca42e23          	sw	a0,-36(s0)
204024bc:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:70
    int rc = -1;
204024c0:	57fd                	li	a5,-1
204024c2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:71
    struct __metal_driver_riscv_clint0 *clint =
204024c6:	fdc42783          	lw	a5,-36(s0)
204024ca:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:74
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
204024ce:	fd842783          	lw	a5,-40(s0)
204024d2:	c785                	beqz	a5,204024fa <__metal_driver_riscv_clint0_enable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:75
        struct metal_interrupt *intc = clint->interrupt_parent;
204024d4:	fe842783          	lw	a5,-24(s0)
204024d8:	4bdc                	lw	a5,20(a5)
204024da:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:78
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204024de:	fe442783          	lw	a5,-28(s0)
204024e2:	cf81                	beqz	a5,204024fa <__metal_driver_riscv_clint0_enable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:79
            rc = intc->vtable->interrupt_enable(intc, id);
204024e4:	fe442783          	lw	a5,-28(s0)
204024e8:	439c                	lw	a5,0(a5)
204024ea:	479c                	lw	a5,8(a5)
204024ec:	fd842583          	lw	a1,-40(s0)
204024f0:	fe442503          	lw	a0,-28(s0)
204024f4:	9782                	jalr	a5
204024f6:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:82
        }
    }
}
204024fa:	0001                	nop
204024fc:	853e                	mv	a0,a5
204024fe:	50b2                	lw	ra,44(sp)
20402500:	5422                	lw	s0,40(sp)
20402502:	6145                	addi	sp,sp,48
20402504:	8082                	ret

20402506 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:85

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402506:	7179                	addi	sp,sp,-48
20402508:	d606                	sw	ra,44(sp)
2040250a:	d422                	sw	s0,40(sp)
2040250c:	1800                	addi	s0,sp,48
2040250e:	fca42e23          	sw	a0,-36(s0)
20402512:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:86
    int rc = -1;
20402516:	57fd                	li	a5,-1
20402518:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:87
    struct __metal_driver_riscv_clint0 *clint =
2040251c:	fdc42783          	lw	a5,-36(s0)
20402520:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:90
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
20402524:	fd842783          	lw	a5,-40(s0)
20402528:	c785                	beqz	a5,20402550 <__metal_driver_riscv_clint0_disable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:91
        struct metal_interrupt *intc = clint->interrupt_parent;
2040252a:	fe842783          	lw	a5,-24(s0)
2040252e:	4bdc                	lw	a5,20(a5)
20402530:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:94
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402534:	fe442783          	lw	a5,-28(s0)
20402538:	cf81                	beqz	a5,20402550 <__metal_driver_riscv_clint0_disable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:95
            rc = intc->vtable->interrupt_disable(intc, id);
2040253a:	fe442783          	lw	a5,-28(s0)
2040253e:	439c                	lw	a5,0(a5)
20402540:	47dc                	lw	a5,12(a5)
20402542:	fd842583          	lw	a1,-40(s0)
20402546:	fe442503          	lw	a0,-28(s0)
2040254a:	9782                	jalr	a5
2040254c:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:98
        }
    }
}
20402550:	0001                	nop
20402552:	853e                	mv	a0,a5
20402554:	50b2                	lw	ra,44(sp)
20402556:	5422                	lw	s0,40(sp)
20402558:	6145                	addi	sp,sp,48
2040255a:	8082                	ret

2040255c <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:102

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
2040255c:	7179                	addi	sp,sp,-48
2040255e:	d606                	sw	ra,44(sp)
20402560:	d422                	sw	s0,40(sp)
20402562:	1800                	addi	s0,sp,48
20402564:	fca42e23          	sw	a0,-36(s0)
20402568:	fcb42c23          	sw	a1,-40(s0)
2040256c:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:104
    int hartid;
    int rc = -1;
20402570:	57fd                	li	a5,-1
20402572:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:105
    struct __metal_driver_riscv_clint0 *clint =
20402576:	fdc42783          	lw	a5,-36(s0)
2040257a:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:108
                              (struct __metal_driver_riscv_clint0 *)(controller);

    switch (command) {
2040257e:	fd842703          	lw	a4,-40(s0)
20402582:	4795                	li	a5,5
20402584:	0ce7eb63          	bltu	a5,a4,2040265a <__metal_driver_riscv_clint0_command_request+0xfe>
20402588:	fd842783          	lw	a5,-40(s0)
2040258c:	00279713          	slli	a4,a5,0x2
20402590:	204057b7          	lui	a5,0x20405
20402594:	aa078793          	addi	a5,a5,-1376 # 20404aa0 <__metal_driver_vtable_sifive_led+0x30>
20402598:	97ba                	add	a5,a5,a4
2040259a:	439c                	lw	a5,0(a5)
2040259c:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:110
    case METAL_TIMER_MTIME_GET:
        if (data) {
2040259e:	fd442783          	lw	a5,-44(s0)
204025a2:	cfd5                	beqz	a5,2040265e <__metal_driver_riscv_clint0_command_request+0x102>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:111
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204025a4:	fe842503          	lw	a0,-24(s0)
204025a8:	3ba9                	jal	20402302 <__metal_clint0_mtime_get>
204025aa:	87aa                	mv	a5,a0
204025ac:	882e                	mv	a6,a1
204025ae:	fd442703          	lw	a4,-44(s0)
204025b2:	c31c                	sw	a5,0(a4)
204025b4:	01072223          	sw	a6,4(a4) # 4004 <__heap_size+0x3c04>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:112
            rc = 0;
204025b8:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        }
        break;
204025bc:	a04d                	j	2040265e <__metal_driver_riscv_clint0_command_request+0x102>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:116
    case METAL_TIMER_MTIME_SET:
        if (data) {
204025be:	fd442783          	lw	a5,-44(s0)
204025c2:	c3c5                	beqz	a5,20402662 <__metal_driver_riscv_clint0_command_request+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:117
	    __metal_clint0_mtime_set(clint, *(unsigned long long *)data);
204025c4:	fd442783          	lw	a5,-44(s0)
204025c8:	0047a803          	lw	a6,4(a5)
204025cc:	439c                	lw	a5,0(a5)
204025ce:	85be                	mv	a1,a5
204025d0:	8642                	mv	a2,a6
204025d2:	fe842503          	lw	a0,-24(s0)
204025d6:	334d                	jal	20402378 <__metal_clint0_mtime_set>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:118
            rc = 0;
204025d8:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        }
        break;
204025dc:	a059                	j	20402662 <__metal_driver_riscv_clint0_command_request+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:122
    case METAL_SOFTWARE_IPI_CLEAR:
	if (data) {
204025de:	fd442783          	lw	a5,-44(s0)
204025e2:	c3d1                	beqz	a5,20402666 <__metal_driver_riscv_clint0_command_request+0x10a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:123
	    hartid = *(int *)data;
204025e4:	fd442783          	lw	a5,-44(s0)
204025e8:	439c                	lw	a5,0(a5)
204025ea:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:124
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
204025ee:	fe842783          	lw	a5,-24(s0)
204025f2:	479c                	lw	a5,8(a5)
204025f4:	fe442703          	lw	a4,-28(s0)
204025f8:	070a                	slli	a4,a4,0x2
204025fa:	97ba                	add	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:125
					       (hartid * 4))) = METAL_DISABLE;
204025fc:	0007a023          	sw	zero,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:126
            rc = 0;
20402600:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        }
        break;
20402604:	a08d                	j	20402666 <__metal_driver_riscv_clint0_command_request+0x10a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:130
    case METAL_SOFTWARE_IPI_SET:
	if (data) {
20402606:	fd442783          	lw	a5,-44(s0)
2040260a:	c3a5                	beqz	a5,2040266a <__metal_driver_riscv_clint0_command_request+0x10e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:131
	    hartid = *(int *)data;
2040260c:	fd442783          	lw	a5,-44(s0)
20402610:	439c                	lw	a5,0(a5)
20402612:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:132
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20402616:	fe842783          	lw	a5,-24(s0)
2040261a:	479c                	lw	a5,8(a5)
2040261c:	fe442703          	lw	a4,-28(s0)
20402620:	070a                	slli	a4,a4,0x2
20402622:	97ba                	add	a5,a5,a4
20402624:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:133
					       (hartid * 4))) = METAL_ENABLE;
20402626:	4785                	li	a5,1
20402628:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:134
            rc = 0;
2040262a:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        }
        break;
2040262e:	a835                	j	2040266a <__metal_driver_riscv_clint0_command_request+0x10e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:138
    case METAL_SOFTWARE_MSIP_GET:
        rc = 0;
20402630:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:139
	if (data) {
20402634:	fd442783          	lw	a5,-44(s0)
20402638:	cb9d                	beqz	a5,2040266e <__metal_driver_riscv_clint0_command_request+0x112>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:140
	    hartid = *(int *)data;
2040263a:	fd442783          	lw	a5,-44(s0)
2040263e:	439c                	lw	a5,0(a5)
20402640:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:141
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20402644:	fe842783          	lw	a5,-24(s0)
20402648:	479c                	lw	a5,8(a5)
2040264a:	fe442703          	lw	a4,-28(s0)
2040264e:	070a                	slli	a4,a4,0x2
20402650:	97ba                	add	a5,a5,a4
20402652:	439c                	lw	a5,0(a5)
20402654:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
						    (hartid * 4)));
        }
        break;
20402658:	a819                	j	2040266e <__metal_driver_riscv_clint0_command_request+0x112>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:146
    default:
	break;
2040265a:	0001                	nop
2040265c:	a811                	j	20402670 <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        break;
2040265e:	0001                	nop
20402660:	a801                	j	20402670 <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        break;
20402662:	0001                	nop
20402664:	a031                	j	20402670 <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        break;
20402666:	0001                	nop
20402668:	a021                	j	20402670 <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        break;
2040266a:	0001                	nop
2040266c:	a011                	j	20402670 <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
        break;
2040266e:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:149
    }

    return rc;
20402670:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:150
}
20402674:	853e                	mv	a0,a5
20402676:	50b2                	lw	ra,44(sp)
20402678:	5422                	lw	s0,40(sp)
2040267a:	6145                	addi	sp,sp,48
2040267c:	8082                	ret

2040267e <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:10
#include <metal/io.h>
#include <metal/shutdown.h>
#include <metal/machine.h>

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040267e:	1101                	addi	sp,sp,-32
20402680:	ce22                	sw	s0,28(sp)
20402682:	1000                	addi	s0,sp,32
20402684:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:11
    if (hartid < __METAL_DT_MAX_HARTS) {
20402688:	fec42783          	lw	a5,-20(s0)
2040268c:	00f04a63          	bgtz	a5,204026a0 <__metal_driver_cpu_get+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:12
        return &(__metal_cpu_table[hartid]->cpu);
20402690:	fec42703          	lw	a4,-20(s0)
20402694:	070a                	slli	a4,a4,0x2
20402696:	81418793          	addi	a5,gp,-2028 # 80001044 <__metal_cpu_table>
2040269a:	97ba                	add	a5,a5,a4
2040269c:	439c                	lw	a5,0(a5)
2040269e:	a011                	j	204026a2 <__metal_driver_cpu_get+0x24>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:14
    }
    return (struct metal_cpu *)NULL;
204026a0:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:15
}
204026a2:	853e                	mv	a0,a5
204026a4:	4472                	lw	s0,28(sp)
204026a6:	6105                	addi	sp,sp,32
204026a8:	8082                	ret

204026aa <__metal_myhart_id>:
__metal_myhart_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:18

uintptr_t __metal_myhart_id (void)
{
204026aa:	1101                	addi	sp,sp,-32
204026ac:	ce22                	sw	s0,28(sp)
204026ae:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:20
    uintptr_t myhart;
    asm volatile ("csrr %0, mhartid" : "=r"(myhart));
204026b0:	f14027f3          	csrr	a5,mhartid
204026b4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:21
    return myhart;
204026b8:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:22
}
204026bc:	853e                	mv	a0,a5
204026be:	4472                	lw	s0,28(sp)
204026c0:	6105                	addi	sp,sp,32
204026c2:	8082                	ret

204026c4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:32
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204026c4:	1101                	addi	sp,sp,-32
204026c6:	ce22                	sw	s0,28(sp)
204026c8:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:34
    uintptr_t m;
    asm volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204026ca:	47a1                	li	a5,8
204026cc:	3007a7f3          	csrrs	a5,mstatus,a5
204026d0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:35
}
204026d4:	0001                	nop
204026d6:	4472                	lw	s0,28(sp)
204026d8:	6105                	addi	sp,sp,32
204026da:	8082                	ret

204026dc <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:37

void __metal_interrupt_global_disable (void) {
204026dc:	1101                	addi	sp,sp,-32
204026de:	ce22                	sw	s0,28(sp)
204026e0:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:39
    uintptr_t m;
    asm volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204026e2:	47a1                	li	a5,8
204026e4:	3007b7f3          	csrrc	a5,mstatus,a5
204026e8:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:40
}
204026ec:	0001                	nop
204026ee:	4472                	lw	s0,28(sp)
204026f0:	6105                	addi	sp,sp,32
204026f2:	8082                	ret

204026f4 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:42

void __metal_interrupt_software_enable (void) {
204026f4:	1101                	addi	sp,sp,-32
204026f6:	ce22                	sw	s0,28(sp)
204026f8:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:44
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204026fa:	47a1                	li	a5,8
204026fc:	3047a7f3          	csrrs	a5,mie,a5
20402700:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:45
}
20402704:	0001                	nop
20402706:	4472                	lw	s0,28(sp)
20402708:	6105                	addi	sp,sp,32
2040270a:	8082                	ret

2040270c <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:47

void __metal_interrupt_software_disable (void) {
2040270c:	1101                	addi	sp,sp,-32
2040270e:	ce22                	sw	s0,28(sp)
20402710:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:49
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402712:	47a1                	li	a5,8
20402714:	3047b7f3          	csrrc	a5,mie,a5
20402718:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:50
}
2040271c:	0001                	nop
2040271e:	4472                	lw	s0,28(sp)
20402720:	6105                	addi	sp,sp,32
20402722:	8082                	ret

20402724 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:52

void __metal_interrupt_timer_enable (void) {
20402724:	1101                	addi	sp,sp,-32
20402726:	ce22                	sw	s0,28(sp)
20402728:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:54
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040272a:	08000793          	li	a5,128
2040272e:	3047a7f3          	csrrs	a5,mie,a5
20402732:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:55
}
20402736:	0001                	nop
20402738:	4472                	lw	s0,28(sp)
2040273a:	6105                	addi	sp,sp,32
2040273c:	8082                	ret

2040273e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:57

void __metal_interrupt_timer_disable (void) {
2040273e:	1101                	addi	sp,sp,-32
20402740:	ce22                	sw	s0,28(sp)
20402742:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:59
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402744:	08000793          	li	a5,128
20402748:	3047b7f3          	csrrc	a5,mie,a5
2040274c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:60
}
20402750:	0001                	nop
20402752:	4472                	lw	s0,28(sp)
20402754:	6105                	addi	sp,sp,32
20402756:	8082                	ret

20402758 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:62

void __metal_interrupt_external_enable (void) {
20402758:	1101                	addi	sp,sp,-32
2040275a:	ce22                	sw	s0,28(sp)
2040275c:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:64
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040275e:	6785                	lui	a5,0x1
20402760:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
20402764:	3047a7f3          	csrrs	a5,mie,a5
20402768:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:65
}
2040276c:	0001                	nop
2040276e:	4472                	lw	s0,28(sp)
20402770:	6105                	addi	sp,sp,32
20402772:	8082                	ret

20402774 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:67

void __metal_interrupt_external_disable (void) {
20402774:	1101                	addi	sp,sp,-32
20402776:	ce22                	sw	s0,28(sp)
20402778:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:69
    unsigned long m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040277a:	6785                	lui	a5,0x1
2040277c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
20402780:	3047b7f3          	csrrc	a5,mie,a5
20402784:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:70
}
20402788:	0001                	nop
2040278a:	4472                	lw	s0,28(sp)
2040278c:	6105                	addi	sp,sp,32
2040278e:	8082                	ret

20402790 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:72

void __metal_interrupt_local_enable (int id) {
20402790:	7179                	addi	sp,sp,-48
20402792:	d622                	sw	s0,44(sp)
20402794:	1800                	addi	s0,sp,48
20402796:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:73
    uintptr_t b = 1 << id;
2040279a:	fdc42783          	lw	a5,-36(s0)
2040279e:	4705                	li	a4,1
204027a0:	00f717b3          	sll	a5,a4,a5
204027a4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:75
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204027a8:	fec42783          	lw	a5,-20(s0)
204027ac:	3047a7f3          	csrrs	a5,mie,a5
204027b0:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:76
}
204027b4:	0001                	nop
204027b6:	5432                	lw	s0,44(sp)
204027b8:	6145                	addi	sp,sp,48
204027ba:	8082                	ret

204027bc <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:78

void __metal_interrupt_local_disable (int id) {
204027bc:	7179                	addi	sp,sp,-48
204027be:	d622                	sw	s0,44(sp)
204027c0:	1800                	addi	s0,sp,48
204027c2:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:79
    uintptr_t b = 1 << id;
204027c6:	fdc42783          	lw	a5,-36(s0)
204027ca:	4705                	li	a4,1
204027cc:	00f717b3          	sll	a5,a4,a5
204027d0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:81
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204027d4:	fec42783          	lw	a5,-20(s0)
204027d8:	3047b7f3          	csrrc	a5,mie,a5
204027dc:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:82
}
204027e0:	0001                	nop
204027e2:	5432                	lw	s0,44(sp)
204027e4:	6145                	addi	sp,sp,48
204027e6:	8082                	ret

204027e8 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:84

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204027e8:	1101                	addi	sp,sp,-32
204027ea:	ce06                	sw	ra,28(sp)
204027ec:	cc22                	sw	s0,24(sp)
204027ee:	1000                	addi	s0,sp,32
204027f0:	fea42623          	sw	a0,-20(s0)
204027f4:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:85
    metal_shutdown(100);
204027f8:	06400513          	li	a0,100
204027fc:	754010ef          	jal	ra,20403f50 <metal_shutdown>

20402800 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:88
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402800:	1101                	addi	sp,sp,-32
20402802:	ce06                	sw	ra,28(sp)
20402804:	cc22                	sw	s0,24(sp)
20402806:	1000                	addi	s0,sp,32
20402808:	fea42623          	sw	a0,-20(s0)
2040280c:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:89
    metal_shutdown(200);
20402810:	0c800513          	li	a0,200
20402814:	73c010ef          	jal	ra,20403f50 <metal_shutdown>

20402818 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:92
}

void __metal_default_sw_handler (int id, void *priv) {
20402818:	7179                	addi	sp,sp,-48
2040281a:	d606                	sw	ra,44(sp)
2040281c:	d422                	sw	s0,40(sp)
2040281e:	1800                	addi	s0,sp,48
20402820:	fca42e23          	sw	a0,-36(s0)
20402824:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:95
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402828:	3549                	jal	204026aa <__metal_myhart_id>
2040282a:	872a                	mv	a4,a0
2040282c:	070a                	slli	a4,a4,0x2
2040282e:	81418793          	addi	a5,gp,-2028 # 80001044 <__metal_cpu_table>
20402832:	97ba                	add	a5,a5,a4
20402834:	439c                	lw	a5,0(a5)
20402836:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:97

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
2040283a:	342027f3          	csrr	a5,mcause
2040283e:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:98
    if ( cpu ) {
20402842:	fec42783          	lw	a5,-20(s0)
20402846:	c795                	beqz	a5,20402872 <__metal_default_sw_handler+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:99
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
20402848:	fec42783          	lw	a5,-20(s0)
2040284c:	47dc                	lw	a5,12(a5)
2040284e:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:100
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402852:	fe842783          	lw	a5,-24(s0)
20402856:	3ff7f793          	andi	a5,a5,1023
2040285a:	fe442703          	lw	a4,-28(s0)
2040285e:	0e478793          	addi	a5,a5,228
20402862:	078a                	slli	a5,a5,0x2
20402864:	97ba                	add	a5,a5,a4
20402866:	439c                	lw	a5,0(a5)
20402868:	fdc42583          	lw	a1,-36(s0)
2040286c:	fec42503          	lw	a0,-20(s0)
20402870:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:102
    }
}
20402872:	0001                	nop
20402874:	50b2                	lw	ra,44(sp)
20402876:	5422                	lw	s0,40(sp)
20402878:	6145                	addi	sp,sp,48
2040287a:	8082                	ret

2040287c <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:104

void __metal_default_timer_handler (int id, void *priv) {
2040287c:	7179                	addi	sp,sp,-48
2040287e:	d606                	sw	ra,44(sp)
20402880:	d422                	sw	s0,40(sp)
20402882:	1800                	addi	s0,sp,48
20402884:	fca42e23          	sw	a0,-36(s0)
20402888:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:105
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040288c:	3d39                	jal	204026aa <__metal_myhart_id>
2040288e:	87aa                	mv	a5,a0
20402890:	853e                	mv	a0,a5
20402892:	33f5                	jal	2040267e <__metal_driver_cpu_get>
20402894:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:106
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402898:	fec42503          	lw	a0,-20(s0)
2040289c:	7b2000ef          	jal	ra,2040304e <__metal_driver_cpu_mtime_get>
204028a0:	fea42023          	sw	a0,-32(s0)
204028a4:	feb42223          	sw	a1,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:109

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204028a8:	fe042783          	lw	a5,-32(s0)
204028ac:	fe442803          	lw	a6,-28(s0)
204028b0:	45a9                	li	a1,10
204028b2:	4601                	li	a2,0
204028b4:	00b786b3          	add	a3,a5,a1
204028b8:	8536                	mv	a0,a3
204028ba:	00f53533          	sltu	a0,a0,a5
204028be:	00c80733          	add	a4,a6,a2
204028c2:	00e507b3          	add	a5,a0,a4
204028c6:	873e                	mv	a4,a5
204028c8:	87b6                	mv	a5,a3
204028ca:	883a                	mv	a6,a4
204028cc:	85be                	mv	a1,a5
204028ce:	8642                	mv	a2,a6
204028d0:	fec42503          	lw	a0,-20(s0)
204028d4:	7e8000ef          	jal	ra,204030bc <__metal_driver_cpu_mtimecmp_set>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:110
}
204028d8:	0001                	nop
204028da:	50b2                	lw	ra,44(sp)
204028dc:	5422                	lw	s0,40(sp)
204028de:	6145                	addi	sp,sp,48
204028e0:	8082                	ret
	...

20402900 <__metal_exception_handler>:
__metal_exception_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:113

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402900:	7119                	addi	sp,sp,-128
20402902:	de86                	sw	ra,124(sp)
20402904:	dc96                	sw	t0,120(sp)
20402906:	da9a                	sw	t1,116(sp)
20402908:	d89e                	sw	t2,112(sp)
2040290a:	d6a2                	sw	s0,108(sp)
2040290c:	d4aa                	sw	a0,104(sp)
2040290e:	d2ae                	sw	a1,100(sp)
20402910:	d0b2                	sw	a2,96(sp)
20402912:	ceb6                	sw	a3,92(sp)
20402914:	ccba                	sw	a4,88(sp)
20402916:	cabe                	sw	a5,84(sp)
20402918:	c8c2                	sw	a6,80(sp)
2040291a:	c6c6                	sw	a7,76(sp)
2040291c:	c4f2                	sw	t3,72(sp)
2040291e:	c2f6                	sw	t4,68(sp)
20402920:	c0fa                	sw	t5,64(sp)
20402922:	de7e                	sw	t6,60(sp)
20402924:	0100                	addi	s0,sp,128
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:118
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402926:	3351                	jal	204026aa <__metal_myhart_id>
20402928:	872a                	mv	a4,a0
2040292a:	070a                	slli	a4,a4,0x2
2040292c:	81418793          	addi	a5,gp,-2028 # 80001044 <__metal_cpu_table>
20402930:	97ba                	add	a5,a5,a4
20402932:	439c                	lw	a5,0(a5)
20402934:	faf42623          	sw	a5,-84(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:120

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
20402938:	342027f3          	csrr	a5,mcause
2040293c:	faf42423          	sw	a5,-88(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:121
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20402940:	341027f3          	csrr	a5,mepc
20402944:	faf42223          	sw	a5,-92(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:122
    asm volatile ("csrr %0, mtval" : "=r"(mtval));
20402948:	343027f3          	csrr	a5,mtval
2040294c:	faf42023          	sw	a5,-96(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:123
    asm volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402950:	305027f3          	csrr	a5,mtvec
20402954:	f8f42e23          	sw	a5,-100(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:125

    if ( cpu ) {
20402958:	fac42783          	lw	a5,-84(s0)
2040295c:	c3f9                	beqz	a5,20402a22 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:126
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
2040295e:	fac42783          	lw	a5,-84(s0)
20402962:	47dc                	lw	a5,12(a5)
20402964:	f8f42c23          	sw	a5,-104(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:127
        id = mcause & METAL_MCAUSE_CAUSE;
20402968:	fa842783          	lw	a5,-88(s0)
2040296c:	3ff7f793          	andi	a5,a5,1023
20402970:	f8f42a23          	sw	a5,-108(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:128
        if (mcause & METAL_MCAUSE_INTR) {
20402974:	fa842783          	lw	a5,-88(s0)
20402978:	0807d763          	bgez	a5,20402a06 <__metal_exception_handler+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2040297c:	f9442703          	lw	a4,-108(s0)
20402980:	47bd                	li	a5,15
20402982:	00e7d763          	bge	a5,a4,20402990 <__metal_exception_handler+0x90>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:130 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402986:	f9c42783          	lw	a5,-100(s0)
2040298a:	03f7f793          	andi	a5,a5,63
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2040298e:	ef9d                	bnez	a5,204029cc <__metal_exception_handler+0xcc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:131
                priv = intc->metal_int_table[id].exint_data;
20402990:	f9842683          	lw	a3,-104(s0)
20402994:	f9442703          	lw	a4,-108(s0)
20402998:	87ba                	mv	a5,a4
2040299a:	0786                	slli	a5,a5,0x1
2040299c:	97ba                	add	a5,a5,a4
2040299e:	078e                	slli	a5,a5,0x3
204029a0:	97b6                	add	a5,a5,a3
204029a2:	0a07a783          	lw	a5,160(a5)
204029a6:	f8f42623          	sw	a5,-116(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:132
                intc->metal_int_table[id].handler(id, priv);
204029aa:	f9842683          	lw	a3,-104(s0)
204029ae:	f9442703          	lw	a4,-108(s0)
204029b2:	87ba                	mv	a5,a4
204029b4:	0786                	slli	a5,a5,0x1
204029b6:	97ba                	add	a5,a5,a4
204029b8:	078e                	slli	a5,a5,0x3
204029ba:	97b6                	add	a5,a5,a3
204029bc:	0987a783          	lw	a5,152(a5)
204029c0:	f8c42583          	lw	a1,-116(s0)
204029c4:	f9442503          	lw	a0,-108(s0)
204029c8:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:133
		return;
204029ca:	a8a1                	j	20402a22 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:135
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204029cc:	f9c42783          	lw	a5,-100(s0)
204029d0:	03f7f713          	andi	a4,a5,63
204029d4:	4789                	li	a5,2
204029d6:	04f71663          	bne	a4,a5,20402a22 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:139
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                asm volatile ("csrr %0, mtvt" : "=r"(mtvt));
204029da:	307027f3          	csrr	a5,mtvt
204029de:	f8f42823          	sw	a5,-112(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:140
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204029e2:	f9842783          	lw	a5,-104(s0)
204029e6:	0e47a783          	lw	a5,228(a5)
204029ea:	f8f42623          	sw	a5,-116(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:141
               	mtvt_handler = (metal_interrupt_handler_t)mtvt;
204029ee:	f9042783          	lw	a5,-112(s0)
204029f2:	f8f42423          	sw	a5,-120(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:142
               	mtvt_handler(id, priv);
204029f6:	f8842783          	lw	a5,-120(s0)
204029fa:	f8c42583          	lw	a1,-116(s0)
204029fe:	f9442503          	lw	a0,-108(s0)
20402a02:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:143
		return;
20402a04:	a839                	j	20402a22 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:146
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402a06:	f9842703          	lw	a4,-104(s0)
20402a0a:	f9442783          	lw	a5,-108(s0)
20402a0e:	0e478793          	addi	a5,a5,228
20402a12:	078a                	slli	a5,a5,0x2
20402a14:	97ba                	add	a5,a5,a4
20402a16:	439c                	lw	a5,0(a5)
20402a18:	f9442583          	lw	a1,-108(s0)
20402a1c:	fac42503          	lw	a0,-84(s0)
20402a20:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:149
        }
    }
}
20402a22:	50f6                	lw	ra,124(sp)
20402a24:	52e6                	lw	t0,120(sp)
20402a26:	5356                	lw	t1,116(sp)
20402a28:	53c6                	lw	t2,112(sp)
20402a2a:	5436                	lw	s0,108(sp)
20402a2c:	5526                	lw	a0,104(sp)
20402a2e:	5596                	lw	a1,100(sp)
20402a30:	5606                	lw	a2,96(sp)
20402a32:	46f6                	lw	a3,92(sp)
20402a34:	4766                	lw	a4,88(sp)
20402a36:	47d6                	lw	a5,84(sp)
20402a38:	4846                	lw	a6,80(sp)
20402a3a:	48b6                	lw	a7,76(sp)
20402a3c:	4e26                	lw	t3,72(sp)
20402a3e:	4e96                	lw	t4,68(sp)
20402a40:	4f06                	lw	t5,64(sp)
20402a42:	5ff2                	lw	t6,60(sp)
20402a44:	6109                	addi	sp,sp,128
20402a46:	30200073          	mret
	...

20402a78 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:152

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20402a78:	7179                	addi	sp,sp,-48
20402a7a:	d622                	sw	s0,44(sp)
20402a7c:	1800                	addi	s0,sp,48
20402a7e:	fca42e23          	sw	a0,-36(s0)
20402a82:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:155
    uintptr_t trap_entry, val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20402a86:	305027f3          	csrr	a5,mtvec
20402a8a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:156
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20402a8e:	fec42783          	lw	a5,-20(s0)
20402a92:	fc07f793          	andi	a5,a5,-64
20402a96:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:157
    trap_entry = (uintptr_t)vec_table;
20402a9a:	fd842783          	lw	a5,-40(s0)
20402a9e:	fef42423          	sw	a5,-24(s0)
20402aa2:	fdc42703          	lw	a4,-36(s0)
20402aa6:	4785                	li	a5,1
20402aa8:	04f70a63          	beq	a4,a5,20402afc <__metal_controller_interrupt_vector+0x84>
20402aac:	fdc42783          	lw	a5,-36(s0)
20402ab0:	cfa9                	beqz	a5,20402b0a <__metal_controller_interrupt_vector+0x92>
20402ab2:	fdc42703          	lw	a4,-36(s0)
20402ab6:	4789                	li	a5,2
20402ab8:	00f70863          	beq	a4,a5,20402ac8 <__metal_controller_interrupt_vector+0x50>
20402abc:	fdc42703          	lw	a4,-36(s0)
20402ac0:	478d                	li	a5,3
20402ac2:	02f70063          	beq	a4,a5,20402ae2 <__metal_controller_interrupt_vector+0x6a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
        break;
    case METAL_DIRECT_MODE:
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
20402ac6:	a881                	j	20402b16 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:161
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC));
20402ac8:	fe842783          	lw	a5,-24(s0)
20402acc:	0027e793          	ori	a5,a5,2
20402ad0:	30779073          	csrw	mtvt,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:162
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20402ad4:	fec42783          	lw	a5,-20(s0)
20402ad8:	0027e793          	ori	a5,a5,2
20402adc:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:163
        break;
20402ae0:	a81d                	j	20402b16 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:165
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC_VECTORED));
20402ae2:	fe842783          	lw	a5,-24(s0)
20402ae6:	0037e793          	ori	a5,a5,3
20402aea:	30779073          	csrw	mtvt,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:166
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20402aee:	fec42783          	lw	a5,-20(s0)
20402af2:	0037e793          	ori	a5,a5,3
20402af6:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:167
        break;
20402afa:	a831                	j	20402b16 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:169
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20402afc:	fe842783          	lw	a5,-24(s0)
20402b00:	0017e793          	ori	a5,a5,1
20402b04:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:170
        break;
20402b08:	a039                	j	20402b16 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:172
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20402b0a:	fe842783          	lw	a5,-24(s0)
20402b0e:	9bf1                	andi	a5,a5,-4
20402b10:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:173
        break;
20402b14:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
}
20402b16:	0001                	nop
20402b18:	5432                	lw	s0,44(sp)
20402b1a:	6145                	addi	sp,sp,48
20402b1c:	8082                	ret

20402b1e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:178

int __metal_valid_interrupt_id (int id)
{
20402b1e:	1101                	addi	sp,sp,-32
20402b20:	ce22                	sw	s0,28(sp)
20402b22:	1000                	addi	s0,sp,32
20402b24:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:179
    switch (id) {
20402b28:	fec42783          	lw	a5,-20(s0)
20402b2c:	17f5                	addi	a5,a5,-3
20402b2e:	4771                	li	a4,28
20402b30:	00f76d63          	bltu	a4,a5,20402b4a <__metal_valid_interrupt_id+0x2c>
20402b34:	00279713          	slli	a4,a5,0x2
20402b38:	204057b7          	lui	a5,0x20405
20402b3c:	ab878793          	addi	a5,a5,-1352 # 20404ab8 <__metal_driver_vtable_sifive_led+0x48>
20402b40:	97ba                	add	a5,a5,a4
20402b42:	439c                	lw	a5,0(a5)
20402b44:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:199
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20402b46:	4785                	li	a5,1
20402b48:	a019                	j	20402b4e <__metal_valid_interrupt_id+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:201
    default:
        break;
20402b4a:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:204
    }

    return 0;
20402b4c:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:205
}
20402b4e:	853e                	mv	a0,a5
20402b50:	4472                	lw	s0,28(sp)
20402b52:	6105                	addi	sp,sp,32
20402b54:	8082                	ret

20402b56 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:210

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20402b56:	7179                	addi	sp,sp,-48
20402b58:	d606                	sw	ra,44(sp)
20402b5a:	d422                	sw	s0,40(sp)
20402b5c:	1800                	addi	s0,sp,48
20402b5e:	fca42e23          	sw	a0,-36(s0)
20402b62:	fcb42c23          	sw	a1,-40(s0)
20402b66:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:211
    int rc = 0;
20402b6a:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:213
  
    if ( !controller) {
20402b6e:	fdc42783          	lw	a5,-36(s0)
20402b72:	e399                	bnez	a5,20402b78 <__metal_local_interrupt_enable+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:214
        return -1;
20402b74:	57fd                	li	a5,-1
20402b76:	a071                	j	20402c02 <__metal_local_interrupt_enable+0xac>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:217
    }

    switch (id) {
20402b78:	fd842703          	lw	a4,-40(s0)
20402b7c:	47fd                	li	a5,31
20402b7e:	08e7e063          	bltu	a5,a4,20402bfe <__metal_local_interrupt_enable+0xa8>
20402b82:	fd842783          	lw	a5,-40(s0)
20402b86:	00279713          	slli	a4,a5,0x2
20402b8a:	204057b7          	lui	a5,0x20405
20402b8e:	b2c78793          	addi	a5,a5,-1236 # 20404b2c <__metal_driver_vtable_sifive_led+0xbc>
20402b92:	97ba                	add	a5,a5,a4
20402b94:	439c                	lw	a5,0(a5)
20402b96:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:219
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20402b98:	fd442783          	lw	a5,-44(s0)
20402b9c:	c781                	beqz	a5,20402ba4 <__metal_local_interrupt_enable+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:220
            __metal_interrupt_global_enable();
20402b9e:	b27ff0ef          	jal	ra,204026c4 <__metal_interrupt_global_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20402ba2:	a8b1                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:222
            __metal_interrupt_global_disable();
20402ba4:	b39ff0ef          	jal	ra,204026dc <__metal_interrupt_global_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        break;
20402ba8:	a899                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:226
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20402baa:	fd442783          	lw	a5,-44(s0)
20402bae:	c781                	beqz	a5,20402bb6 <__metal_local_interrupt_enable+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:227
            __metal_interrupt_software_enable();
20402bb0:	b45ff0ef          	jal	ra,204026f4 <__metal_interrupt_software_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20402bb4:	a0a9                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:229
            __metal_interrupt_software_disable();
20402bb6:	b57ff0ef          	jal	ra,2040270c <__metal_interrupt_software_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        break;
20402bba:	a091                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:233
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20402bbc:	fd442783          	lw	a5,-44(s0)
20402bc0:	c781                	beqz	a5,20402bc8 <__metal_local_interrupt_enable+0x72>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:234
	    __metal_interrupt_timer_enable();
20402bc2:	b63ff0ef          	jal	ra,20402724 <__metal_interrupt_timer_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20402bc6:	a825                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:236
	    __metal_interrupt_timer_disable();
20402bc8:	b77ff0ef          	jal	ra,2040273e <__metal_interrupt_timer_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	break;
20402bcc:	a80d                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:240
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20402bce:	fd442783          	lw	a5,-44(s0)
20402bd2:	c781                	beqz	a5,20402bda <__metal_local_interrupt_enable+0x84>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:241
            __metal_interrupt_external_enable();
20402bd4:	b85ff0ef          	jal	ra,20402758 <__metal_interrupt_external_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20402bd8:	a01d                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:243
            __metal_interrupt_external_disable();
20402bda:	b9bff0ef          	jal	ra,20402774 <__metal_interrupt_external_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        break;
20402bde:	a005                	j	20402bfe <__metal_local_interrupt_enable+0xa8>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:262
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20402be0:	fd442783          	lw	a5,-44(s0)
20402be4:	c799                	beqz	a5,20402bf2 <__metal_local_interrupt_enable+0x9c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:263
            __metal_interrupt_local_enable(id);
20402be6:	fd842783          	lw	a5,-40(s0)
20402bea:	853e                	mv	a0,a5
20402bec:	ba5ff0ef          	jal	ra,20402790 <__metal_interrupt_local_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20402bf0:	a031                	j	20402bfc <__metal_local_interrupt_enable+0xa6>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:265
            __metal_interrupt_local_disable(id);
20402bf2:	fd842783          	lw	a5,-40(s0)
20402bf6:	853e                	mv	a0,a5
20402bf8:	bc5ff0ef          	jal	ra,204027bc <__metal_interrupt_local_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        break;
20402bfc:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:271
    defaut:
        rc = -1;
    }
    return rc;
20402bfe:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:272
}
20402c02:	853e                	mv	a0,a5
20402c04:	50b2                	lw	ra,44(sp)
20402c06:	5422                	lw	s0,40(sp)
20402c08:	6145                	addi	sp,sp,48
20402c0a:	8082                	ret

20402c0c <__metal_exception_register>:
__metal_exception_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:276

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20402c0c:	7179                	addi	sp,sp,-48
20402c0e:	d622                	sw	s0,44(sp)
20402c10:	1800                	addi	s0,sp,48
20402c12:	fca42e23          	sw	a0,-36(s0)
20402c16:	fcb42c23          	sw	a1,-40(s0)
20402c1a:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:277
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402c1e:	fdc42783          	lw	a5,-36(s0)
20402c22:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20402c26:	fd842703          	lw	a4,-40(s0)
20402c2a:	47ad                	li	a5,11
20402c2c:	02e7c263          	blt	a5,a4,20402c50 <__metal_exception_register+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279 (discriminator 1)
20402c30:	fd442783          	lw	a5,-44(s0)
20402c34:	cf91                	beqz	a5,20402c50 <__metal_exception_register+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:280
        intc->metal_exception_table[ecode] = isr;
20402c36:	fec42703          	lw	a4,-20(s0)
20402c3a:	fd842783          	lw	a5,-40(s0)
20402c3e:	0e478793          	addi	a5,a5,228
20402c42:	078a                	slli	a5,a5,0x2
20402c44:	97ba                	add	a5,a5,a4
20402c46:	fd442703          	lw	a4,-44(s0)
20402c4a:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:281
        return 0;
20402c4c:	4781                	li	a5,0
20402c4e:	a011                	j	20402c52 <__metal_exception_register+0x46>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:283
    }
    return -1;
20402c50:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:284
}
20402c52:	853e                	mv	a0,a5
20402c54:	5432                	lw	s0,44(sp)
20402c56:	6145                	addi	sp,sp,48
20402c58:	8082                	ret

20402c5a <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:287

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20402c5a:	7179                	addi	sp,sp,-48
20402c5c:	d606                	sw	ra,44(sp)
20402c5e:	d422                	sw	s0,40(sp)
20402c60:	1800                	addi	s0,sp,48
20402c62:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:288
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402c66:	fdc42783          	lw	a5,-36(s0)
20402c6a:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:291
    uintptr_t val;

    if ( !intc->init_done ) {
20402c6e:	fe442783          	lw	a5,-28(s0)
20402c72:	479c                	lw	a5,8(a5)
20402c74:	ebe1                	bnez	a5,20402d44 <__metal_driver_riscv_cpu_controller_interrupt_init+0xea>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20402c76:	fe042623          	sw	zero,-20(s0)
20402c7a:	a0b9                	j	20402cc8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:294 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20402c7c:	fe442683          	lw	a3,-28(s0)
20402c80:	fec42703          	lw	a4,-20(s0)
20402c84:	87ba                	mv	a5,a4
20402c86:	0786                	slli	a5,a5,0x1
20402c88:	97ba                	add	a5,a5,a4
20402c8a:	078e                	slli	a5,a5,0x3
20402c8c:	97b6                	add	a5,a5,a3
20402c8e:	0807ac23          	sw	zero,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:295 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20402c92:	fe442683          	lw	a3,-28(s0)
20402c96:	fec42703          	lw	a4,-20(s0)
20402c9a:	87ba                	mv	a5,a4
20402c9c:	0786                	slli	a5,a5,0x1
20402c9e:	97ba                	add	a5,a5,a4
20402ca0:	078e                	slli	a5,a5,0x3
20402ca2:	97b6                	add	a5,a5,a3
20402ca4:	0807ae23          	sw	zero,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:296 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20402ca8:	fe442683          	lw	a3,-28(s0)
20402cac:	fec42703          	lw	a4,-20(s0)
20402cb0:	87ba                	mv	a5,a4
20402cb2:	0786                	slli	a5,a5,0x1
20402cb4:	97ba                	add	a5,a5,a4
20402cb6:	078e                	slli	a5,a5,0x3
20402cb8:	97b6                	add	a5,a5,a3
20402cba:	0a07a023          	sw	zero,160(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20402cbe:	fec42783          	lw	a5,-20(s0)
20402cc2:	0785                	addi	a5,a5,1
20402cc4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 1)
20402cc8:	fec42703          	lw	a4,-20(s0)
20402ccc:	47fd                	li	a5,31
20402cce:	fae7d7e3          	bge	a5,a4,20402c7c <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20402cd2:	fe042423          	sw	zero,-24(s0)
20402cd6:	a01d                	j	20402cfc <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:299 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20402cd8:	fe442703          	lw	a4,-28(s0)
20402cdc:	fe842783          	lw	a5,-24(s0)
20402ce0:	0e478793          	addi	a5,a5,228
20402ce4:	078a                	slli	a5,a5,0x2
20402ce6:	97ba                	add	a5,a5,a4
20402ce8:	20402737          	lui	a4,0x20402
20402cec:	7e870713          	addi	a4,a4,2024 # 204027e8 <__metal_default_exception_handler>
20402cf0:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20402cf2:	fe842783          	lw	a5,-24(s0)
20402cf6:	0785                	addi	a5,a5,1
20402cf8:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 1)
20402cfc:	fe842703          	lw	a4,-24(s0)
20402d00:	47ad                	li	a5,11
20402d02:	fce7dbe3          	bge	a5,a4,20402cd8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:301
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
20402d06:	204037b7          	lui	a5,0x20403
20402d0a:	90078593          	addi	a1,a5,-1792 # 20402900 <__metal_exception_handler>
20402d0e:	4501                	li	a0,0
20402d10:	33a5                	jal	20402a78 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:302
	asm volatile ("csrr %0, misa" : "=r"(val));
20402d12:	301027f3          	csrr	a5,misa
20402d16:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:303
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20402d1a:	fe042703          	lw	a4,-32(s0)
20402d1e:	67c1                	lui	a5,0x10
20402d20:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xfc28>
20402d24:	8ff9                	and	a5,a5,a4
20402d26:	cb99                	beqz	a5,20402d3c <__metal_driver_riscv_cpu_controller_interrupt_init+0xe2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:305
	    /* Floating point architecture, so turn on FP register saving*/
	    asm volatile ("csrr %0, mstatus" : "=r"(val));
20402d28:	300027f3          	csrr	a5,mstatus
20402d2c:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:306
	    asm volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20402d30:	fe042703          	lw	a4,-32(s0)
20402d34:	6789                	lui	a5,0x2
20402d36:	8fd9                	or	a5,a5,a4
20402d38:	30079073          	csrw	mstatus,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:308
	}
	intc->init_done = 1;
20402d3c:	fe442783          	lw	a5,-28(s0)
20402d40:	4705                	li	a4,1
20402d42:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:310
    }
}
20402d44:	0001                	nop
20402d46:	50b2                	lw	ra,44(sp)
20402d48:	5422                	lw	s0,40(sp)
20402d4a:	6145                	addi	sp,sp,48
20402d4c:	8082                	ret

20402d4e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:315

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20402d4e:	7179                	addi	sp,sp,-48
20402d50:	d606                	sw	ra,44(sp)
20402d52:	d422                	sw	s0,40(sp)
20402d54:	1800                	addi	s0,sp,48
20402d56:	fca42e23          	sw	a0,-36(s0)
20402d5a:	fcb42c23          	sw	a1,-40(s0)
20402d5e:	fcc42a23          	sw	a2,-44(s0)
20402d62:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:316
    int rc = 0;
20402d66:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:317
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402d6a:	fdc42783          	lw	a5,-36(s0)
20402d6e:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:319
 
    if ( !__metal_valid_interrupt_id(id) ) {
20402d72:	fd842503          	lw	a0,-40(s0)
20402d76:	3365                	jal	20402b1e <__metal_valid_interrupt_id>
20402d78:	87aa                	mv	a5,a0
20402d7a:	e399                	bnez	a5,20402d80 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:320
        return -11;
20402d7c:	57d5                	li	a5,-11
20402d7e:	a239                	j	20402e8c <__metal_driver_riscv_cpu_controller_interrupt_register+0x13e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:323
    }

    if (isr) {
20402d80:	fd442783          	lw	a5,-44(s0)
20402d84:	cf85                	beqz	a5,20402dbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:324
        intc->metal_int_table[id].handler = isr;
20402d86:	fe842683          	lw	a3,-24(s0)
20402d8a:	fd842703          	lw	a4,-40(s0)
20402d8e:	87ba                	mv	a5,a4
20402d90:	0786                	slli	a5,a5,0x1
20402d92:	97ba                	add	a5,a5,a4
20402d94:	078e                	slli	a5,a5,0x3
20402d96:	97b6                	add	a5,a5,a3
20402d98:	fd442703          	lw	a4,-44(s0)
20402d9c:	08e7ac23          	sw	a4,152(a5) # 2098 <__heap_size+0x1c98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:325
        intc->metal_int_table[id].exint_data = priv;
20402da0:	fe842683          	lw	a3,-24(s0)
20402da4:	fd842703          	lw	a4,-40(s0)
20402da8:	87ba                	mv	a5,a4
20402daa:	0786                	slli	a5,a5,0x1
20402dac:	97ba                	add	a5,a5,a4
20402dae:	078e                	slli	a5,a5,0x3
20402db0:	97b6                	add	a5,a5,a3
20402db2:	fd042703          	lw	a4,-48(s0)
20402db6:	0ae7a023          	sw	a4,160(a5)
20402dba:	a0f9                	j	20402e88 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:327
    } else {
	switch (id) {
20402dbc:	fd842783          	lw	a5,-40(s0)
20402dc0:	17f5                	addi	a5,a5,-3
20402dc2:	4771                	li	a4,28
20402dc4:	0cf76263          	bltu	a4,a5,20402e88 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20402dc8:	00279713          	slli	a4,a5,0x2
20402dcc:	204057b7          	lui	a5,0x20405
20402dd0:	bac78793          	addi	a5,a5,-1108 # 20404bac <__metal_driver_vtable_sifive_led+0x13c>
20402dd4:	97ba                	add	a5,a5,a4
20402dd6:	439c                	lw	a5,0(a5)
20402dd8:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:329
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20402dda:	fe842683          	lw	a3,-24(s0)
20402dde:	fd842703          	lw	a4,-40(s0)
20402de2:	87ba                	mv	a5,a4
20402de4:	0786                	slli	a5,a5,0x1
20402de6:	97ba                	add	a5,a5,a4
20402de8:	078e                	slli	a5,a5,0x3
20402dea:	97b6                	add	a5,a5,a3
20402dec:	20403737          	lui	a4,0x20403
20402df0:	81870713          	addi	a4,a4,-2024 # 20402818 <__metal_default_sw_handler>
20402df4:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:330
            intc->metal_int_table[id].sub_int = priv;
20402df8:	fe842683          	lw	a3,-24(s0)
20402dfc:	fd842703          	lw	a4,-40(s0)
20402e00:	87ba                	mv	a5,a4
20402e02:	0786                	slli	a5,a5,0x1
20402e04:	97ba                	add	a5,a5,a4
20402e06:	078e                	slli	a5,a5,0x3
20402e08:	97b6                	add	a5,a5,a3
20402e0a:	fd042703          	lw	a4,-48(s0)
20402e0e:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:331
	  break;
20402e12:	a89d                	j	20402e88 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:333
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20402e14:	fe842683          	lw	a3,-24(s0)
20402e18:	fd842703          	lw	a4,-40(s0)
20402e1c:	87ba                	mv	a5,a4
20402e1e:	0786                	slli	a5,a5,0x1
20402e20:	97ba                	add	a5,a5,a4
20402e22:	078e                	slli	a5,a5,0x3
20402e24:	97b6                	add	a5,a5,a3
20402e26:	20403737          	lui	a4,0x20403
20402e2a:	87c70713          	addi	a4,a4,-1924 # 2040287c <__metal_default_timer_handler>
20402e2e:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:334
            intc->metal_int_table[id].sub_int = priv;
20402e32:	fe842683          	lw	a3,-24(s0)
20402e36:	fd842703          	lw	a4,-40(s0)
20402e3a:	87ba                	mv	a5,a4
20402e3c:	0786                	slli	a5,a5,0x1
20402e3e:	97ba                	add	a5,a5,a4
20402e40:	078e                	slli	a5,a5,0x3
20402e42:	97b6                	add	a5,a5,a3
20402e44:	fd042703          	lw	a4,-48(s0)
20402e48:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:335
	  break;
20402e4c:	a835                	j	20402e88 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:353
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20402e4e:	fe842683          	lw	a3,-24(s0)
20402e52:	fd842703          	lw	a4,-40(s0)
20402e56:	87ba                	mv	a5,a4
20402e58:	0786                	slli	a5,a5,0x1
20402e5a:	97ba                	add	a5,a5,a4
20402e5c:	078e                	slli	a5,a5,0x3
20402e5e:	97b6                	add	a5,a5,a3
20402e60:	20403737          	lui	a4,0x20403
20402e64:	80070713          	addi	a4,a4,-2048 # 20402800 <__metal_default_interrupt_handler>
20402e68:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:354
            intc->metal_int_table[id].sub_int = priv;
20402e6c:	fe842683          	lw	a3,-24(s0)
20402e70:	fd842703          	lw	a4,-40(s0)
20402e74:	87ba                	mv	a5,a4
20402e76:	0786                	slli	a5,a5,0x1
20402e78:	97ba                	add	a5,a5,a4
20402e7a:	078e                	slli	a5,a5,0x3
20402e7c:	97b6                	add	a5,a5,a3
20402e7e:	fd042703          	lw	a4,-48(s0)
20402e82:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:355
	  break;
20402e86:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:360
	defaut:
	  rc = -12;
	}
    }
    return rc;
20402e88:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:361
}
20402e8c:	853e                	mv	a0,a5
20402e8e:	50b2                	lw	ra,44(sp)
20402e90:	5422                	lw	s0,40(sp)
20402e92:	6145                	addi	sp,sp,48
20402e94:	8082                	ret

20402e96 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:365

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20402e96:	1101                	addi	sp,sp,-32
20402e98:	ce06                	sw	ra,28(sp)
20402e9a:	cc22                	sw	s0,24(sp)
20402e9c:	1000                	addi	s0,sp,32
20402e9e:	fea42623          	sw	a0,-20(s0)
20402ea2:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:366
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20402ea6:	fe842783          	lw	a5,-24(s0)
20402eaa:	4605                	li	a2,1
20402eac:	85be                	mv	a1,a5
20402eae:	fec42503          	lw	a0,-20(s0)
20402eb2:	3155                	jal	20402b56 <__metal_local_interrupt_enable>
20402eb4:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:367
}
20402eb6:	853e                	mv	a0,a5
20402eb8:	40f2                	lw	ra,28(sp)
20402eba:	4462                	lw	s0,24(sp)
20402ebc:	6105                	addi	sp,sp,32
20402ebe:	8082                	ret

20402ec0 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:371

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20402ec0:	1101                	addi	sp,sp,-32
20402ec2:	ce06                	sw	ra,28(sp)
20402ec4:	cc22                	sw	s0,24(sp)
20402ec6:	1000                	addi	s0,sp,32
20402ec8:	fea42623          	sw	a0,-20(s0)
20402ecc:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:372
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20402ed0:	fe842783          	lw	a5,-24(s0)
20402ed4:	4601                	li	a2,0
20402ed6:	85be                	mv	a1,a5
20402ed8:	fec42503          	lw	a0,-20(s0)
20402edc:	39ad                	jal	20402b56 <__metal_local_interrupt_enable>
20402ede:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:373
}
20402ee0:	853e                	mv	a0,a5
20402ee2:	40f2                	lw	ra,28(sp)
20402ee4:	4462                	lw	s0,24(sp)
20402ee6:	6105                	addi	sp,sp,32
20402ee8:	8082                	ret

20402eea <__metal_driver_riscv_cpu_controller_interrupt_enable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_enable_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:377

int __metal_driver_riscv_cpu_controller_interrupt_enable_vector(struct metal_interrupt *controller,
                                                             int id, metal_vector_mode mode)
{
20402eea:	7179                	addi	sp,sp,-48
20402eec:	d606                	sw	ra,44(sp)
20402eee:	d422                	sw	s0,40(sp)
20402ef0:	1800                	addi	s0,sp,48
20402ef2:	fca42e23          	sw	a0,-36(s0)
20402ef6:	fcb42c23          	sw	a1,-40(s0)
20402efa:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:378
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402efe:	fdc42783          	lw	a5,-36(s0)
20402f02:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:380

    if (id == METAL_INTERRUPT_ID_BASE) {
20402f06:	fd842783          	lw	a5,-40(s0)
20402f0a:	ef8d                	bnez	a5,20402f44 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:381
        if (mode == METAL_DIRECT_MODE) {
20402f0c:	fd442783          	lw	a5,-44(s0)
20402f10:	eb99                	bnez	a5,20402f26 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x3c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:382
            __metal_controller_interrupt_vector(mode, &__metal_exception_handler);
20402f12:	204037b7          	lui	a5,0x20403
20402f16:	90078593          	addi	a1,a5,-1792 # 20402900 <__metal_exception_handler>
20402f1a:	fd442503          	lw	a0,-44(s0)
20402f1e:	b5bff0ef          	jal	ra,20402a78 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:383
            return 0;
20402f22:	4781                	li	a5,0
20402f24:	a00d                	j	20402f46 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:385
        }   
        if (mode == METAL_VECTOR_MODE) {
20402f26:	fd442703          	lw	a4,-44(s0)
20402f2a:	4785                	li	a5,1
20402f2c:	00f71c63          	bne	a4,a5,20402f44 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:386
            __metal_controller_interrupt_vector(mode, &intc->metal_mtvec_table);
20402f30:	fec42783          	lw	a5,-20(s0)
20402f34:	07c1                	addi	a5,a5,16
20402f36:	85be                	mv	a1,a5
20402f38:	fd442503          	lw	a0,-44(s0)
20402f3c:	b3dff0ef          	jal	ra,20402a78 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:387
            return 0;
20402f40:	4781                	li	a5,0
20402f42:	a011                	j	20402f46 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:390
        }
    }
    return -1;
20402f44:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:391
}
20402f46:	853e                	mv	a0,a5
20402f48:	50b2                	lw	ra,44(sp)
20402f4a:	5422                	lw	s0,40(sp)
20402f4c:	6145                	addi	sp,sp,48
20402f4e:	8082                	ret

20402f50 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_disable_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:395

int __metal_driver_riscv_cpu_controller_interrupt_disable_vector(struct metal_interrupt *controller,
                                                              int id)
{
20402f50:	7179                	addi	sp,sp,-48
20402f52:	d606                	sw	ra,44(sp)
20402f54:	d422                	sw	s0,40(sp)
20402f56:	1800                	addi	s0,sp,48
20402f58:	fca42e23          	sw	a0,-36(s0)
20402f5c:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:396
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402f60:	fdc42783          	lw	a5,-36(s0)
20402f64:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:398

    if (id == METAL_INTERRUPT_ID_BASE) {
20402f68:	fd842783          	lw	a5,-40(s0)
20402f6c:	eb91                	bnez	a5,20402f80 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:399
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
20402f6e:	204037b7          	lui	a5,0x20403
20402f72:	90078593          	addi	a1,a5,-1792 # 20402900 <__metal_exception_handler>
20402f76:	4501                	li	a0,0
20402f78:	b01ff0ef          	jal	ra,20402a78 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:400
        return 0;
20402f7c:	4781                	li	a5,0
20402f7e:	a011                	j	20402f82 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:402
    }
    return -1;
20402f80:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:403
}
20402f82:	853e                	mv	a0,a5
20402f84:	50b2                	lw	ra,44(sp)
20402f86:	5422                	lw	s0,40(sp)
20402f88:	6145                	addi	sp,sp,48
20402f8a:	8082                	ret

20402f8c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:407

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20402f8c:	1101                	addi	sp,sp,-32
20402f8e:	ce22                	sw	s0,28(sp)
20402f90:	1000                	addi	s0,sp,32
20402f92:	fea42623          	sw	a0,-20(s0)
20402f96:	feb42423          	sw	a1,-24(s0)
20402f9a:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:409
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20402f9e:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:410
}
20402fa0:	853e                	mv	a0,a5
20402fa2:	4472                	lw	s0,28(sp)
20402fa4:	6105                	addi	sp,sp,32
20402fa6:	8082                	ret

20402fa8 <__metal_driver_cpu_timer_get>:
__metal_driver_cpu_timer_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:417
extern inline int __metal_controller_interrupt_is_selective_vectored(void);

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_timer_get(struct metal_cpu *cpu)
{
20402fa8:	7139                	addi	sp,sp,-64
20402faa:	de22                	sw	s0,60(sp)
20402fac:	0080                	addi	s0,sp,64
20402fae:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:418
    unsigned long long val = 0;
20402fb2:	4301                	li	t1,0
20402fb4:	4381                	li	t2,0
20402fb6:	fe642423          	sw	t1,-24(s0)
20402fba:	fe742623          	sw	t2,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:423

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    asm volatile ("csrr %0, mcycleh" : "=r"(hi));
20402fbe:	b8002573          	csrr	a0,mcycleh
20402fc2:	fea42223          	sw	a0,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:424
    asm volatile ("csrr %0, mcycle" : "=r"(lo));
20402fc6:	b0002573          	csrr	a0,mcycle
20402fca:	fea42023          	sw	a0,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:425
    asm volatile ("csrr %0, mcycleh" : "=r"(hi1));
20402fce:	b8002573          	csrr	a0,mcycleh
20402fd2:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:426
    if (hi == hi1) {
20402fd6:	fe442883          	lw	a7,-28(s0)
20402fda:	fdc42503          	lw	a0,-36(s0)
20402fde:	02a89563          	bne	a7,a0,20403008 <__metal_driver_cpu_timer_get+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:427
        val = ((unsigned long long)hi << 32) | lo;
20402fe2:	fe442503          	lw	a0,-28(s0)
20402fe6:	85aa                	mv	a1,a0
20402fe8:	4601                	li	a2,0
20402fea:	00059813          	slli	a6,a1,0x0
20402fee:	4781                	li	a5,0
20402ff0:	fe042603          	lw	a2,-32(s0)
20402ff4:	86b2                	mv	a3,a2
20402ff6:	4701                	li	a4,0
20402ff8:	00d7e633          	or	a2,a5,a3
20402ffc:	fec42423          	sw	a2,-24(s0)
20403000:	00e867b3          	or	a5,a6,a4
20403004:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:433
    }
#else
    asm volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403008:	fe842783          	lw	a5,-24(s0)
2040300c:	fec42803          	lw	a6,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:434
}
20403010:	853e                	mv	a0,a5
20403012:	85c2                	mv	a1,a6
20403014:	5472                	lw	s0,60(sp)
20403016:	6121                	addi	sp,sp,64
20403018:	8082                	ret

2040301a <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:437

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2040301a:	7179                	addi	sp,sp,-48
2040301c:	d622                	sw	s0,44(sp)
2040301e:	1800                	addi	s0,sp,48
20403020:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:438
    struct __metal_driver_cpu *_cpu = (void *)(cpu);
20403024:	fdc42703          	lw	a4,-36(s0)
20403028:	fee42623          	sw	a4,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:439
    if (!_cpu) {
2040302c:	fec42703          	lw	a4,-20(s0)
20403030:	e701                	bnez	a4,20403038 <__metal_driver_cpu_timebase_get+0x1e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:440
        return 0;
20403032:	4781                	li	a5,0
20403034:	4801                	li	a6,0
20403036:	a039                	j	20403044 <__metal_driver_cpu_timebase_get+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:443
    }

    return _cpu->timebase;
20403038:	fec42703          	lw	a4,-20(s0)
2040303c:	4718                	lw	a4,8(a4)
2040303e:	87ba                	mv	a5,a4
20403040:	877d                	srai	a4,a4,0x1f
20403042:	883a                	mv	a6,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:444
}
20403044:	853e                	mv	a0,a5
20403046:	85c2                	mv	a1,a6
20403048:	5432                	lw	s0,44(sp)
2040304a:	6145                	addi	sp,sp,48
2040304c:	8082                	ret

2040304e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:447

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
2040304e:	7139                	addi	sp,sp,-64
20403050:	de06                	sw	ra,60(sp)
20403052:	dc22                	sw	s0,56(sp)
20403054:	0080                	addi	s0,sp,64
20403056:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:448
    unsigned long long time = 0;
2040305a:	4781                	li	a5,0
2040305c:	4801                	li	a6,0
2040305e:	fcf42c23          	sw	a5,-40(s0)
20403062:	fd042e23          	sw	a6,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:451
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20403066:	fcc42783          	lw	a5,-52(s0)
2040306a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:453

    if (_cpu->interrupt_controller) {
2040306e:	fec42783          	lw	a5,-20(s0)
20403072:	47dc                	lw	a5,12(a5)
20403074:	cb95                	beqz	a5,204030a8 <__metal_driver_cpu_mtime_get+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:454
        intc = (void *)_cpu->interrupt_controller;
20403076:	fec42783          	lw	a5,-20(s0)
2040307a:	47dc                	lw	a5,12(a5)
2040307c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:455
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403080:	fe842783          	lw	a5,-24(s0)
20403084:	1447a783          	lw	a5,324(a5)
20403088:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:456
        if (tmr_intc) {
2040308c:	fe442783          	lw	a5,-28(s0)
20403090:	cf81                	beqz	a5,204030a8 <__metal_driver_cpu_mtime_get+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:457
            tmr_intc->vtable->command_request(tmr_intc,
20403092:	fe442783          	lw	a5,-28(s0)
20403096:	439c                	lw	a5,0(a5)
20403098:	4f98                	lw	a4,24(a5)
2040309a:	fd840793          	addi	a5,s0,-40
2040309e:	863e                	mv	a2,a5
204030a0:	4585                	li	a1,1
204030a2:	fe442503          	lw	a0,-28(s0)
204030a6:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:461
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204030a8:	fd842783          	lw	a5,-40(s0)
204030ac:	fdc42803          	lw	a6,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:462
}
204030b0:	853e                	mv	a0,a5
204030b2:	85c2                	mv	a1,a6
204030b4:	50f2                	lw	ra,60(sp)
204030b6:	5462                	lw	s0,56(sp)
204030b8:	6121                	addi	sp,sp,64
204030ba:	8082                	ret

204030bc <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:465

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204030bc:	7179                	addi	sp,sp,-48
204030be:	d606                	sw	ra,44(sp)
204030c0:	d422                	sw	s0,40(sp)
204030c2:	1800                	addi	s0,sp,48
204030c4:	fca42e23          	sw	a0,-36(s0)
204030c8:	fcb42823          	sw	a1,-48(s0)
204030cc:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:466
    int rc = -1;
204030d0:	57fd                	li	a5,-1
204030d2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:469
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
204030d6:	fdc42783          	lw	a5,-36(s0)
204030da:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:471

    if (_cpu->interrupt_controller) {
204030de:	fe842783          	lw	a5,-24(s0)
204030e2:	47dc                	lw	a5,12(a5)
204030e4:	cf85                	beqz	a5,2040311c <__metal_driver_cpu_mtimecmp_set+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:472
        intc = (void *)_cpu->interrupt_controller;
204030e6:	fe842783          	lw	a5,-24(s0)
204030ea:	47dc                	lw	a5,12(a5)
204030ec:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:473
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204030f0:	fe442783          	lw	a5,-28(s0)
204030f4:	1447a783          	lw	a5,324(a5)
204030f8:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:474
        if (tmr_intc) {
204030fc:	fe042783          	lw	a5,-32(s0)
20403100:	cf91                	beqz	a5,2040311c <__metal_driver_cpu_mtimecmp_set+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:475
            rc = tmr_intc->vtable->command_request(tmr_intc,
20403102:	fe042783          	lw	a5,-32(s0)
20403106:	439c                	lw	a5,0(a5)
20403108:	4f98                	lw	a4,24(a5)
2040310a:	fd040793          	addi	a5,s0,-48
2040310e:	863e                	mv	a2,a5
20403110:	4589                	li	a1,2
20403112:	fe042503          	lw	a0,-32(s0)
20403116:	9702                	jalr	a4
20403118:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:479
                                                   METAL_TIMER_MTIME_SET, &time);
        }
    }
    return rc;
2040311c:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:480
}
20403120:	853e                	mv	a0,a5
20403122:	50b2                	lw	ra,44(sp)
20403124:	5422                	lw	s0,40(sp)
20403126:	6145                	addi	sp,sp,48
20403128:	8082                	ret

2040312a <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:484

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
2040312a:	1101                	addi	sp,sp,-32
2040312c:	ce22                	sw	s0,28(sp)
2040312e:	1000                	addi	s0,sp,32
20403130:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:486
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403134:	800017b7          	lui	a5,0x80001
20403138:	84c78793          	addi	a5,a5,-1972 # 8000084c <metal_segment_heap_target_end+0xffffc84c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:495
#else
#warning "There is no interrupt controller for Timer interrupt"
    return NULL;
#endif
#endif
}
2040313c:	853e                	mv	a0,a5
2040313e:	4472                	lw	s0,28(sp)
20403140:	6105                	addi	sp,sp,32
20403142:	8082                	ret

20403144 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:498

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403144:	1101                	addi	sp,sp,-32
20403146:	ce22                	sw	s0,28(sp)
20403148:	1000                	addi	s0,sp,32
2040314a:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:499
    return METAL_INTERRUPT_ID_TMR;
2040314e:	479d                	li	a5,7
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:500
}
20403150:	853e                	mv	a0,a5
20403152:	4472                	lw	s0,28(sp)
20403154:	6105                	addi	sp,sp,32
20403156:	8082                	ret

20403158 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:504

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403158:	1101                	addi	sp,sp,-32
2040315a:	ce22                	sw	s0,28(sp)
2040315c:	1000                	addi	s0,sp,32
2040315e:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:506
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403162:	800017b7          	lui	a5,0x80001
20403166:	84c78793          	addi	a5,a5,-1972 # 8000084c <metal_segment_heap_target_end+0xffffc84c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:515
#else
#warning "There is no interrupt controller for Software interrupt"
    return NULL;
#endif
#endif
}
2040316a:	853e                	mv	a0,a5
2040316c:	4472                	lw	s0,28(sp)
2040316e:	6105                	addi	sp,sp,32
20403170:	8082                	ret

20403172 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:518

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403172:	1101                	addi	sp,sp,-32
20403174:	ce22                	sw	s0,28(sp)
20403176:	1000                	addi	s0,sp,32
20403178:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:519
    return METAL_INTERRUPT_ID_SW;
2040317c:	478d                	li	a5,3
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:520
}
2040317e:	853e                	mv	a0,a5
20403180:	4472                	lw	s0,28(sp)
20403182:	6105                	addi	sp,sp,32
20403184:	8082                	ret

20403186 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:523

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403186:	7179                	addi	sp,sp,-48
20403188:	d606                	sw	ra,44(sp)
2040318a:	d422                	sw	s0,40(sp)
2040318c:	1800                	addi	s0,sp,48
2040318e:	fca42e23          	sw	a0,-36(s0)
20403192:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:524
    int rc = -1;
20403196:	57fd                	li	a5,-1
20403198:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:527
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
2040319c:	fdc42783          	lw	a5,-36(s0)
204031a0:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:529

    if (_cpu->interrupt_controller) {
204031a4:	fe842783          	lw	a5,-24(s0)
204031a8:	47dc                	lw	a5,12(a5)
204031aa:	cf85                	beqz	a5,204031e2 <__metal_driver_cpu_set_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:530
        intc = (void *)_cpu->interrupt_controller;
204031ac:	fe842783          	lw	a5,-24(s0)
204031b0:	47dc                	lw	a5,12(a5)
204031b2:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:531
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204031b6:	fe442783          	lw	a5,-28(s0)
204031ba:	0e47a783          	lw	a5,228(a5)
204031be:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:532
        if (sw_intc) {
204031c2:	fe042783          	lw	a5,-32(s0)
204031c6:	cf91                	beqz	a5,204031e2 <__metal_driver_cpu_set_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:533
            rc = sw_intc->vtable->command_request(sw_intc,
204031c8:	fe042783          	lw	a5,-32(s0)
204031cc:	439c                	lw	a5,0(a5)
204031ce:	4f98                	lw	a4,24(a5)
204031d0:	fd840793          	addi	a5,s0,-40
204031d4:	863e                	mv	a2,a5
204031d6:	4591                	li	a1,4
204031d8:	fe042503          	lw	a0,-32(s0)
204031dc:	9702                	jalr	a4
204031de:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:537
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204031e2:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:538
}
204031e6:	853e                	mv	a0,a5
204031e8:	50b2                	lw	ra,44(sp)
204031ea:	5422                	lw	s0,40(sp)
204031ec:	6145                	addi	sp,sp,48
204031ee:	8082                	ret

204031f0 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:541

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204031f0:	7179                	addi	sp,sp,-48
204031f2:	d606                	sw	ra,44(sp)
204031f4:	d422                	sw	s0,40(sp)
204031f6:	1800                	addi	s0,sp,48
204031f8:	fca42e23          	sw	a0,-36(s0)
204031fc:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:542
    int rc = -1;
20403200:	57fd                	li	a5,-1
20403202:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:545
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20403206:	fdc42783          	lw	a5,-36(s0)
2040320a:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:547

    if (_cpu->interrupt_controller) {
2040320e:	fe842783          	lw	a5,-24(s0)
20403212:	47dc                	lw	a5,12(a5)
20403214:	cf85                	beqz	a5,2040324c <__metal_driver_cpu_clear_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:548
        intc = (void *)_cpu->interrupt_controller;
20403216:	fe842783          	lw	a5,-24(s0)
2040321a:	47dc                	lw	a5,12(a5)
2040321c:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:549
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403220:	fe442783          	lw	a5,-28(s0)
20403224:	0e47a783          	lw	a5,228(a5)
20403228:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:550
        if (sw_intc) {
2040322c:	fe042783          	lw	a5,-32(s0)
20403230:	cf91                	beqz	a5,2040324c <__metal_driver_cpu_clear_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:551
            rc = sw_intc->vtable->command_request(sw_intc,
20403232:	fe042783          	lw	a5,-32(s0)
20403236:	439c                	lw	a5,0(a5)
20403238:	4f98                	lw	a4,24(a5)
2040323a:	fd840793          	addi	a5,s0,-40
2040323e:	863e                	mv	a2,a5
20403240:	458d                	li	a1,3
20403242:	fe042503          	lw	a0,-32(s0)
20403246:	9702                	jalr	a4
20403248:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:555
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040324c:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:556
}
20403250:	853e                	mv	a0,a5
20403252:	50b2                	lw	ra,44(sp)
20403254:	5422                	lw	s0,40(sp)
20403256:	6145                	addi	sp,sp,48
20403258:	8082                	ret

2040325a <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:559

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
2040325a:	7179                	addi	sp,sp,-48
2040325c:	d606                	sw	ra,44(sp)
2040325e:	d422                	sw	s0,40(sp)
20403260:	1800                	addi	s0,sp,48
20403262:	fca42e23          	sw	a0,-36(s0)
20403266:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:560
    int rc = 0;
2040326a:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:563
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
2040326e:	fdc42783          	lw	a5,-36(s0)
20403272:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:565

    if (_cpu->interrupt_controller) {
20403276:	fe842783          	lw	a5,-24(s0)
2040327a:	47dc                	lw	a5,12(a5)
2040327c:	cf85                	beqz	a5,204032b4 <__metal_driver_cpu_get_msip+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:566
        intc = (void *)_cpu->interrupt_controller;
2040327e:	fe842783          	lw	a5,-24(s0)
20403282:	47dc                	lw	a5,12(a5)
20403284:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:567
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403288:	fe442783          	lw	a5,-28(s0)
2040328c:	0e47a783          	lw	a5,228(a5)
20403290:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:568
        if (sw_intc) {
20403294:	fe042783          	lw	a5,-32(s0)
20403298:	cf91                	beqz	a5,204032b4 <__metal_driver_cpu_get_msip+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:569
            rc = sw_intc->vtable->command_request(sw_intc,
2040329a:	fe042783          	lw	a5,-32(s0)
2040329e:	439c                	lw	a5,0(a5)
204032a0:	4f98                	lw	a4,24(a5)
204032a2:	fd840793          	addi	a5,s0,-40
204032a6:	863e                	mv	a2,a5
204032a8:	4595                	li	a1,5
204032aa:	fe042503          	lw	a0,-32(s0)
204032ae:	9702                	jalr	a4
204032b0:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:573
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204032b4:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:574
}
204032b8:	853e                	mv	a0,a5
204032ba:	50b2                	lw	ra,44(sp)
204032bc:	5422                	lw	s0,40(sp)
204032be:	6145                	addi	sp,sp,48
204032c0:	8082                	ret

204032c2 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:578

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204032c2:	7179                	addi	sp,sp,-48
204032c4:	d622                	sw	s0,44(sp)
204032c6:	1800                	addi	s0,sp,48
204032c8:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:579
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
204032cc:	fdc42783          	lw	a5,-36(s0)
204032d0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:580
    return (struct metal_interrupt *)cpu0->interrupt_controller;
204032d4:	fec42783          	lw	a5,-20(s0)
204032d8:	47dc                	lw	a5,12(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:581
}
204032da:	853e                	mv	a0,a5
204032dc:	5432                	lw	s0,44(sp)
204032de:	6145                	addi	sp,sp,48
204032e0:	8082                	ret

204032e2 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:607
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204032e2:	7179                	addi	sp,sp,-48
204032e4:	d606                	sw	ra,44(sp)
204032e6:	d422                	sw	s0,40(sp)
204032e8:	1800                	addi	s0,sp,48
204032ea:	fca42e23          	sw	a0,-36(s0)
204032ee:	fcb42c23          	sw	a1,-40(s0)
204032f2:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:608
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
204032f6:	fdc42783          	lw	a5,-36(s0)
204032fa:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:609
    if (cpu0->interrupt_controller) {
204032fe:	fec42783          	lw	a5,-20(s0)
20403302:	47dc                	lw	a5,12(a5)
20403304:	cf89                	beqz	a5,2040331e <__metal_driver_cpu_exception_register+0x3c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:610
	return __metal_exception_register(cpu0->interrupt_controller, ecode, isr);
20403306:	fec42783          	lw	a5,-20(s0)
2040330a:	47dc                	lw	a5,12(a5)
2040330c:	fd442603          	lw	a2,-44(s0)
20403310:	fd842583          	lw	a1,-40(s0)
20403314:	853e                	mv	a0,a5
20403316:	8f7ff0ef          	jal	ra,20402c0c <__metal_exception_register>
2040331a:	87aa                	mv	a5,a0
2040331c:	a011                	j	20403320 <__metal_driver_cpu_exception_register+0x3e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:612
    }
    return -1;
2040331e:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:613
}
20403320:	853e                	mv	a0,a5
20403322:	50b2                	lw	ra,44(sp)
20403324:	5422                	lw	s0,40(sp)
20403326:	6145                	addi	sp,sp,48
20403328:	8082                	ret

2040332a <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:616

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2040332a:	1101                	addi	sp,sp,-32
2040332c:	ce22                	sw	s0,28(sp)
2040332e:	1000                	addi	s0,sp,32
20403330:	fea42623          	sw	a0,-20(s0)
20403334:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618
    /* Per ISA compressed instruction has last two bits of opcode set */
    return (*(unsigned short*)epc & 3) ? 4 : 2;
20403338:	fe842783          	lw	a5,-24(s0)
2040333c:	0007d783          	lhu	a5,0(a5)
20403340:	8b8d                	andi	a5,a5,3
20403342:	c399                	beqz	a5,20403348 <__metal_driver_cpu_get_instruction_length+0x1e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 1)
20403344:	4791                	li	a5,4
20403346:	a011                	j	2040334a <__metal_driver_cpu_get_instruction_length+0x20>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 2)
20403348:	4789                	li	a5,2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:619 (discriminator 5)
}
2040334a:	853e                	mv	a0,a5
2040334c:	4472                	lw	s0,28(sp)
2040334e:	6105                	addi	sp,sp,32
20403350:	8082                	ret

20403352 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:622

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403352:	7179                	addi	sp,sp,-48
20403354:	d622                	sw	s0,44(sp)
20403356:	1800                	addi	s0,sp,48
20403358:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:624
    uintptr_t mepc;
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
2040335c:	341027f3          	csrr	a5,mepc
20403360:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:625
    return mepc;
20403364:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:626
}
20403368:	853e                	mv	a0,a5
2040336a:	5432                	lw	s0,44(sp)
2040336c:	6145                	addi	sp,sp,48
2040336e:	8082                	ret

20403370 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:629

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403370:	1101                	addi	sp,sp,-32
20403372:	ce22                	sw	s0,28(sp)
20403374:	1000                	addi	s0,sp,32
20403376:	fea42623          	sw	a0,-20(s0)
2040337a:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:630
    asm volatile ("csrw mepc, %0" :: "r"(mepc));
2040337e:	fe842783          	lw	a5,-24(s0)
20403382:	34179073          	csrw	mepc,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:631
    return 0;
20403386:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:632
}
20403388:	853e                	mv	a0,a5
2040338a:	4472                	lw	s0,28(sp)
2040338c:	6105                	addi	sp,sp,32
2040338e:	8082                	ret

20403390 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:10
#include <metal/shutdown.h>
#include <metal/drivers/riscv,plic0.h>


unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403390:	1101                	addi	sp,sp,-32
20403392:	ce22                	sw	s0,28(sp)
20403394:	1000                	addi	s0,sp,32
20403396:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
2040339a:	fec42783          	lw	a5,-20(s0)
2040339e:	4798                	lw	a4,8(a5)
204033a0:	002007b7          	lui	a5,0x200
204033a4:	0791                	addi	a5,a5,4
204033a6:	97ba                	add	a5,a5,a4
204033a8:	439c                	lw	a5,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:13
					      METAL_PLIC_CLAIM_OFFSET));
}
204033aa:	853e                	mv	a0,a5
204033ac:	4472                	lw	s0,28(sp)
204033ae:	6105                	addi	sp,sp,32
204033b0:	8082                	ret

204033b2 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:17

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
204033b2:	1101                	addi	sp,sp,-32
204033b4:	ce22                	sw	s0,28(sp)
204033b6:	1000                	addi	s0,sp,32
204033b8:	fea42623          	sw	a0,-20(s0)
204033bc:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:18
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204033c0:	fec42783          	lw	a5,-20(s0)
204033c4:	4798                	lw	a4,8(a5)
204033c6:	002007b7          	lui	a5,0x200
204033ca:	0791                	addi	a5,a5,4
204033cc:	97ba                	add	a5,a5,a4
204033ce:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:19
				       METAL_PLIC_CLAIM_OFFSET)) = id;
204033d0:	fe842783          	lw	a5,-24(s0)
204033d4:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:20
}
204033d6:	0001                	nop
204033d8:	4472                	lw	s0,28(sp)
204033da:	6105                	addi	sp,sp,32
204033dc:	8082                	ret

204033de <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:24

void __metal_plic0_set_threshold(struct __metal_driver_riscv_plic0 *plic,
			       unsigned int threshold)
{
204033de:	1101                	addi	sp,sp,-32
204033e0:	ce22                	sw	s0,28(sp)
204033e2:	1000                	addi	s0,sp,32
204033e4:	fea42623          	sw	a0,-20(s0)
204033e8:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:25
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204033ec:	fec42783          	lw	a5,-20(s0)
204033f0:	4798                	lw	a4,8(a5)
204033f2:	002007b7          	lui	a5,0x200
204033f6:	97ba                	add	a5,a5,a4
204033f8:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:26
				       METAL_PLIC_THRESHOLD_OFFSET)) = threshold;
204033fa:	fe842783          	lw	a5,-24(s0)
204033fe:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:27
}
20403400:	0001                	nop
20403402:	4472                	lw	s0,28(sp)
20403404:	6105                	addi	sp,sp,32
20403406:	8082                	ret

20403408 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:31

void __metal_plic0_set_priority(struct __metal_driver_riscv_plic0 *plic,
			      int id, unsigned int priority)
{
20403408:	1101                	addi	sp,sp,-32
2040340a:	ce22                	sw	s0,28(sp)
2040340c:	1000                	addi	s0,sp,32
2040340e:	fea42623          	sw	a0,-20(s0)
20403412:	feb42423          	sw	a1,-24(s0)
20403416:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32
    if ( (plic->max_priority) &&
2040341a:	fec42783          	lw	a5,-20(s0)
2040341e:	4f9c                	lw	a5,24(a5)
20403420:	c785                	beqz	a5,20403448 <__metal_plic0_set_priority+0x40>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:33 (discriminator 1)
	 (priority < plic->max_priority) ) {
20403422:	fec42783          	lw	a5,-20(s0)
20403426:	4f9c                	lw	a5,24(a5)
20403428:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32 (discriminator 1)
    if ( (plic->max_priority) &&
2040342a:	fe442783          	lw	a5,-28(s0)
2040342e:	00e7fd63          	bgeu	a5,a4,20403448 <__metal_plic0_set_priority+0x40>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:34
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20403432:	fec42783          	lw	a5,-20(s0)
20403436:	479c                	lw	a5,8(a5)
20403438:	fe842703          	lw	a4,-24(s0)
2040343c:	070a                	slli	a4,a4,0x2
2040343e:	97ba                	add	a5,a5,a4
20403440:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:36
					   METAL_PLIC_PRIORITY_OFFSET +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403442:	fe442783          	lw	a5,-28(s0)
20403446:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:38
    }
}
20403448:	0001                	nop
2040344a:	4472                	lw	s0,28(sp)
2040344c:	6105                	addi	sp,sp,32
2040344e:	8082                	ret

20403450 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:41

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403450:	7179                	addi	sp,sp,-48
20403452:	d606                	sw	ra,44(sp)
20403454:	d422                	sw	s0,40(sp)
20403456:	1800                	addi	s0,sp,48
20403458:	fca42e23          	sw	a0,-36(s0)
2040345c:	fcb42c23          	sw	a1,-40(s0)
20403460:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:43
    unsigned int current;
    unsigned long hartid = __metal_myhart_id();
20403464:	a46ff0ef          	jal	ra,204026aa <__metal_myhart_id>
20403468:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:45

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
2040346c:	fdc42783          	lw	a5,-36(s0)
20403470:	479c                	lw	a5,8(a5)
20403472:	fd842703          	lw	a4,-40(s0)
20403476:	8715                	srai	a4,a4,0x5
20403478:	070a                	slli	a4,a4,0x2
2040347a:	973e                	add	a4,a4,a5
2040347c:	6789                	lui	a5,0x2
2040347e:	97ba                	add	a5,a5,a4
20403480:	439c                	lw	a5,0(a5)
20403482:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
					METAL_PLIC_ENABLE_OFFSET +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403486:	fd442783          	lw	a5,-44(s0)
2040348a:	cf81                	beqz	a5,204034a2 <__metal_plic0_enable+0x52>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:51 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
2040348c:	fd842783          	lw	a5,-40(s0)
20403490:	8bfd                	andi	a5,a5,31
20403492:	4705                	li	a4,1
20403494:	00f717b3          	sll	a5,a4,a5
20403498:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2040349a:	fe842783          	lw	a5,-24(s0)
2040349e:	8fd9                	or	a5,a5,a4
204034a0:	a829                	j	204034ba <__metal_plic0_enable+0x6a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 2)
204034a2:	fd842783          	lw	a5,-40(s0)
204034a6:	8bfd                	andi	a5,a5,31
204034a8:	4705                	li	a4,1
204034aa:	00f717b3          	sll	a5,a4,a5
204034ae:	fff7c793          	not	a5,a5
204034b2:	873e                	mv	a4,a5
204034b4:	fe842783          	lw	a5,-24(s0)
204034b8:	8ff9                	and	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204034ba:	fdc42703          	lw	a4,-36(s0)
204034be:	4718                	lw	a4,8(a4)
204034c0:	fd842683          	lw	a3,-40(s0)
204034c4:	8695                	srai	a3,a3,0x5
204034c6:	068a                	slli	a3,a3,0x2
204034c8:	96ba                	add	a3,a3,a4
204034ca:	6709                	lui	a4,0x2
204034cc:	9736                	add	a4,a4,a3
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:50
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204034ce:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:53
}
204034d0:	0001                	nop
204034d2:	50b2                	lw	ra,44(sp)
204034d4:	5422                	lw	s0,40(sp)
204034d6:	6145                	addi	sp,sp,48
204034d8:	8082                	ret

204034da <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:55

void __metal_plic0_default_handler (int id, void *priv) {
204034da:	1101                	addi	sp,sp,-32
204034dc:	ce06                	sw	ra,28(sp)
204034de:	cc22                	sw	s0,24(sp)
204034e0:	1000                	addi	s0,sp,32
204034e2:	fea42623          	sw	a0,-20(s0)
204034e6:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:56
    metal_shutdown(300);
204034ea:	12c00513          	li	a0,300
204034ee:	263000ef          	jal	ra,20403f50 <metal_shutdown>

204034f2 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:60
}

void __metal_plic0_handler (int id, void *priv)
{
204034f2:	7179                	addi	sp,sp,-48
204034f4:	d606                	sw	ra,44(sp)
204034f6:	d422                	sw	s0,40(sp)
204034f8:	1800                	addi	s0,sp,48
204034fa:	fca42e23          	sw	a0,-36(s0)
204034fe:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:61
    struct __metal_driver_riscv_plic0 *plic = priv;
20403502:	fd842783          	lw	a5,-40(s0)
20403506:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:62
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
2040350a:	fec42503          	lw	a0,-20(s0)
2040350e:	3549                	jal	20403390 <__metal_plic0_claim_interrupt>
20403510:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64

    if ( (idx < plic->num_interrupts) &&
20403514:	fec42783          	lw	a5,-20(s0)
20403518:	4fdc                	lw	a5,28(a5)
2040351a:	873e                	mv	a4,a5
2040351c:	fe842783          	lw	a5,-24(s0)
20403520:	04e7f463          	bgeu	a5,a4,20403568 <__metal_plic0_handler+0x76>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:65 (discriminator 1)
	 (plic->metal_exint_table[idx]) ) {
20403524:	fec42703          	lw	a4,-20(s0)
20403528:	fe842783          	lw	a5,-24(s0)
2040352c:	07a1                	addi	a5,a5,8
2040352e:	078a                	slli	a5,a5,0x2
20403530:	97ba                	add	a5,a5,a4
20403532:	479c                	lw	a5,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64 (discriminator 1)
    if ( (idx < plic->num_interrupts) &&
20403534:	cb95                	beqz	a5,20403568 <__metal_plic0_handler+0x76>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:66
	plic->metal_exint_table[idx](idx,
20403536:	fec42703          	lw	a4,-20(s0)
2040353a:	fe842783          	lw	a5,-24(s0)
2040353e:	07a1                	addi	a5,a5,8
20403540:	078a                	slli	a5,a5,0x2
20403542:	97ba                	add	a5,a5,a4
20403544:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1c08>
20403548:	fe842603          	lw	a2,-24(s0)
2040354c:	fec42683          	lw	a3,-20(s0)
20403550:	fe842703          	lw	a4,-24(s0)
20403554:	87ba                	mv	a5,a4
20403556:	0786                	slli	a5,a5,0x1
20403558:	97ba                	add	a5,a5,a4
2040355a:	078e                	slli	a5,a5,0x3
2040355c:	97b6                	add	a5,a5,a3
2040355e:	0a87a783          	lw	a5,168(a5)
20403562:	85be                	mv	a1,a5
20403564:	8532                	mv	a0,a2
20403566:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:70
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403568:	fe842583          	lw	a1,-24(s0)
2040356c:	fec42503          	lw	a0,-20(s0)
20403570:	3589                	jal	204033b2 <__metal_plic0_complete_interrupt>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:71
}
20403572:	0001                	nop
20403574:	50b2                	lw	ra,44(sp)
20403576:	5422                	lw	s0,40(sp)
20403578:	6145                	addi	sp,sp,48
2040357a:	8082                	ret

2040357c <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:74

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
2040357c:	7179                	addi	sp,sp,-48
2040357e:	d606                	sw	ra,44(sp)
20403580:	d422                	sw	s0,40(sp)
20403582:	1800                	addi	s0,sp,48
20403584:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:75
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403588:	fdc42783          	lw	a5,-36(s0)
2040358c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:77

    if ( !plic->init_done ) {
20403590:	fe842783          	lw	a5,-24(s0)
20403594:	539c                	lw	a5,32(a5)
20403596:	0e079b63          	bnez	a5,2040368c <__metal_driver_riscv_plic0_init+0x110>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:80
        struct metal_interrupt *intc;

        intc = plic->interrupt_parent;
2040359a:	fe842783          	lw	a5,-24(s0)
2040359e:	4b9c                	lw	a5,16(a5)
204035a0:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:83

	/* Initialize ist parent controller, aka cpu_intc. */
	intc->vtable->interrupt_init(intc);
204035a4:	fe442783          	lw	a5,-28(s0)
204035a8:	439c                	lw	a5,0(a5)
204035aa:	439c                	lw	a5,0(a5)
204035ac:	fe442503          	lw	a0,-28(s0)
204035b0:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85

	for (int i = 0; i < plic->num_interrupts; i++) {
204035b2:	fe042623          	sw	zero,-20(s0)
204035b6:	a08d                	j	20403618 <__metal_driver_riscv_plic0_init+0x9c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:86 (discriminator 3)
	    __metal_plic0_enable(plic, i, METAL_DISABLE);
204035b8:	4601                	li	a2,0
204035ba:	fec42583          	lw	a1,-20(s0)
204035be:	fe842503          	lw	a0,-24(s0)
204035c2:	3579                	jal	20403450 <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:87 (discriminator 3)
	    __metal_plic0_set_priority(plic, i, 0);
204035c4:	4601                	li	a2,0
204035c6:	fec42583          	lw	a1,-20(s0)
204035ca:	fe842503          	lw	a0,-24(s0)
204035ce:	3d2d                	jal	20403408 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:88 (discriminator 3)
	    plic->metal_exint_table[i] = NULL;
204035d0:	fe842703          	lw	a4,-24(s0)
204035d4:	fec42783          	lw	a5,-20(s0)
204035d8:	07a1                	addi	a5,a5,8
204035da:	078a                	slli	a5,a5,0x2
204035dc:	97ba                	add	a5,a5,a4
204035de:	0007a423          	sw	zero,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:89 (discriminator 3)
	    plic->metal_exdata_table[i].sub_int = NULL;
204035e2:	fe842683          	lw	a3,-24(s0)
204035e6:	fec42703          	lw	a4,-20(s0)
204035ea:	87ba                	mv	a5,a4
204035ec:	0786                	slli	a5,a5,0x1
204035ee:	97ba                	add	a5,a5,a4
204035f0:	078e                	slli	a5,a5,0x3
204035f2:	97b6                	add	a5,a5,a3
204035f4:	0a07a223          	sw	zero,164(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:90 (discriminator 3)
	    plic->metal_exdata_table[i].exint_data = NULL;
204035f8:	fe842683          	lw	a3,-24(s0)
204035fc:	fec42703          	lw	a4,-20(s0)
20403600:	87ba                	mv	a5,a4
20403602:	0786                	slli	a5,a5,0x1
20403604:	97ba                	add	a5,a5,a4
20403606:	078e                	slli	a5,a5,0x3
20403608:	97b6                	add	a5,a5,a3
2040360a:	0a07a423          	sw	zero,168(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 3)
	for (int i = 0; i < plic->num_interrupts; i++) {
2040360e:	fec42783          	lw	a5,-20(s0)
20403612:	0785                	addi	a5,a5,1
20403614:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 1)
20403618:	fe842783          	lw	a5,-24(s0)
2040361c:	4fdc                	lw	a5,28(a5)
2040361e:	fec42703          	lw	a4,-20(s0)
20403622:	f8f74be3          	blt	a4,a5,204035b8 <__metal_driver_riscv_plic0_init+0x3c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:93
	}

	__metal_plic0_set_threshold(plic, 0);
20403626:	4581                	li	a1,0
20403628:	fe842503          	lw	a0,-24(s0)
2040362c:	3b4d                	jal	204033de <__metal_plic0_set_threshold>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:96

	/* Register plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_register(intc,
2040362e:	fe442783          	lw	a5,-28(s0)
20403632:	439c                	lw	a5,0(a5)
20403634:	43d8                	lw	a4,4(a5)
20403636:	fe842783          	lw	a5,-24(s0)
2040363a:	4bdc                	lw	a5,20(a5)
2040363c:	fe842683          	lw	a3,-24(s0)
20403640:	4601                	li	a2,0
20403642:	85be                	mv	a1,a5
20403644:	fe442503          	lw	a0,-28(s0)
20403648:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:100
                                         plic->interrupt_line,
                                         NULL, plic);
	/* Register plic handler for dispatching its device interrupts */
	intc->vtable->interrupt_register(intc,
2040364a:	fe442783          	lw	a5,-28(s0)
2040364e:	439c                	lw	a5,0(a5)
20403650:	0047a803          	lw	a6,4(a5)
20403654:	fe842783          	lw	a5,-24(s0)
20403658:	4bd8                	lw	a4,20(a5)
2040365a:	fe842683          	lw	a3,-24(s0)
2040365e:	204037b7          	lui	a5,0x20403
20403662:	4f278613          	addi	a2,a5,1266 # 204034f2 <__metal_plic0_handler>
20403666:	85ba                	mv	a1,a4
20403668:	fe442503          	lw	a0,-28(s0)
2040366c:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:104
					 plic->interrupt_line,
					 __metal_plic0_handler, plic);
	/* Enable plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_enable(intc, plic->interrupt_line);
2040366e:	fe442783          	lw	a5,-28(s0)
20403672:	439c                	lw	a5,0(a5)
20403674:	4798                	lw	a4,8(a5)
20403676:	fe842783          	lw	a5,-24(s0)
2040367a:	4bdc                	lw	a5,20(a5)
2040367c:	85be                	mv	a1,a5
2040367e:	fe442503          	lw	a0,-28(s0)
20403682:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:105
        plic->init_done = 1;
20403684:	fe842783          	lw	a5,-24(s0)
20403688:	4705                	li	a4,1
2040368a:	d398                	sw	a4,32(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:107
    }
}
2040368c:	0001                	nop
2040368e:	50b2                	lw	ra,44(sp)
20403690:	5422                	lw	s0,40(sp)
20403692:	6145                	addi	sp,sp,48
20403694:	8082                	ret

20403696 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:112

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403696:	7179                	addi	sp,sp,-48
20403698:	d606                	sw	ra,44(sp)
2040369a:	d422                	sw	s0,40(sp)
2040369c:	1800                	addi	s0,sp,48
2040369e:	fca42e23          	sw	a0,-36(s0)
204036a2:	fcb42c23          	sw	a1,-40(s0)
204036a6:	fcc42a23          	sw	a2,-44(s0)
204036aa:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:113
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204036ae:	fdc42783          	lw	a5,-36(s0)
204036b2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:115

    if (id >= plic->num_interrupts ) {
204036b6:	fec42783          	lw	a5,-20(s0)
204036ba:	4fdc                	lw	a5,28(a5)
204036bc:	fd842703          	lw	a4,-40(s0)
204036c0:	00f74463          	blt	a4,a5,204036c8 <__metal_driver_riscv_plic0_register+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:116
        return -1;
204036c4:	57fd                	li	a5,-1
204036c6:	a051                	j	2040374a <__metal_driver_riscv_plic0_register+0xb4>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:119
    }
 
    if (isr) {
204036c8:	fd442783          	lw	a5,-44(s0)
204036cc:	cf9d                	beqz	a5,2040370a <__metal_driver_riscv_plic0_register+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:120
        __metal_plic0_set_priority(plic ,id, 2);
204036ce:	4609                	li	a2,2
204036d0:	fd842583          	lw	a1,-40(s0)
204036d4:	fec42503          	lw	a0,-20(s0)
204036d8:	3b05                	jal	20403408 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:121
	plic->metal_exint_table[id] = isr;
204036da:	fec42703          	lw	a4,-20(s0)
204036de:	fd842783          	lw	a5,-40(s0)
204036e2:	07a1                	addi	a5,a5,8
204036e4:	078a                	slli	a5,a5,0x2
204036e6:	97ba                	add	a5,a5,a4
204036e8:	fd442703          	lw	a4,-44(s0)
204036ec:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:122
	plic->metal_exdata_table[id].exint_data = priv;
204036ee:	fec42683          	lw	a3,-20(s0)
204036f2:	fd842703          	lw	a4,-40(s0)
204036f6:	87ba                	mv	a5,a4
204036f8:	0786                	slli	a5,a5,0x1
204036fa:	97ba                	add	a5,a5,a4
204036fc:	078e                	slli	a5,a5,0x3
204036fe:	97b6                	add	a5,a5,a3
20403700:	fd042703          	lw	a4,-48(s0)
20403704:	0ae7a423          	sw	a4,168(a5)
20403708:	a081                	j	20403748 <__metal_driver_riscv_plic0_register+0xb2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:124
    } else {
        __metal_plic0_set_priority(plic, id, 1);
2040370a:	4605                	li	a2,1
2040370c:	fd842583          	lw	a1,-40(s0)
20403710:	fec42503          	lw	a0,-20(s0)
20403714:	39d5                	jal	20403408 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:125
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403716:	fec42703          	lw	a4,-20(s0)
2040371a:	fd842783          	lw	a5,-40(s0)
2040371e:	07a1                	addi	a5,a5,8
20403720:	078a                	slli	a5,a5,0x2
20403722:	97ba                	add	a5,a5,a4
20403724:	20403737          	lui	a4,0x20403
20403728:	4da70713          	addi	a4,a4,1242 # 204034da <__metal_plic0_default_handler>
2040372c:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:126
	plic->metal_exdata_table[id].sub_int = priv;
2040372e:	fec42683          	lw	a3,-20(s0)
20403732:	fd842703          	lw	a4,-40(s0)
20403736:	87ba                	mv	a5,a4
20403738:	0786                	slli	a5,a5,0x1
2040373a:	97ba                	add	a5,a5,a4
2040373c:	078e                	slli	a5,a5,0x3
2040373e:	97b6                	add	a5,a5,a3
20403740:	fd042703          	lw	a4,-48(s0)
20403744:	0ae7a223          	sw	a4,164(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:129
    }

    return 0;
20403748:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:130
}
2040374a:	853e                	mv	a0,a5
2040374c:	50b2                	lw	ra,44(sp)
2040374e:	5422                	lw	s0,40(sp)
20403750:	6145                	addi	sp,sp,48
20403752:	8082                	ret

20403754 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:133

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20403754:	7179                	addi	sp,sp,-48
20403756:	d606                	sw	ra,44(sp)
20403758:	d422                	sw	s0,40(sp)
2040375a:	1800                	addi	s0,sp,48
2040375c:	fca42e23          	sw	a0,-36(s0)
20403760:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:134
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403764:	fdc42783          	lw	a5,-36(s0)
20403768:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:136

    if ( id >= plic->num_interrupts ) {
2040376c:	fec42783          	lw	a5,-20(s0)
20403770:	4fdc                	lw	a5,28(a5)
20403772:	fd842703          	lw	a4,-40(s0)
20403776:	00f74463          	blt	a4,a5,2040377e <__metal_driver_riscv_plic0_enable+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:137
        return -1;
2040377a:	57fd                	li	a5,-1
2040377c:	a801                	j	2040378c <__metal_driver_riscv_plic0_enable+0x38>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:140
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040377e:	4605                	li	a2,1
20403780:	fd842583          	lw	a1,-40(s0)
20403784:	fec42503          	lw	a0,-20(s0)
20403788:	31e1                	jal	20403450 <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:141
    return 0;
2040378a:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:142
}
2040378c:	853e                	mv	a0,a5
2040378e:	50b2                	lw	ra,44(sp)
20403790:	5422                	lw	s0,40(sp)
20403792:	6145                	addi	sp,sp,48
20403794:	8082                	ret

20403796 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:145

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20403796:	7179                	addi	sp,sp,-48
20403798:	d606                	sw	ra,44(sp)
2040379a:	d422                	sw	s0,40(sp)
2040379c:	1800                	addi	s0,sp,48
2040379e:	fca42e23          	sw	a0,-36(s0)
204037a2:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:146
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204037a6:	fdc42783          	lw	a5,-36(s0)
204037aa:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:148

    if ( id >= plic->num_interrupts ) {
204037ae:	fec42783          	lw	a5,-20(s0)
204037b2:	4fdc                	lw	a5,28(a5)
204037b4:	fd842703          	lw	a4,-40(s0)
204037b8:	00f74463          	blt	a4,a5,204037c0 <__metal_driver_riscv_plic0_disable+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:149
        return -1;
204037bc:	57fd                	li	a5,-1
204037be:	a801                	j	204037ce <__metal_driver_riscv_plic0_disable+0x38>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:151
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204037c0:	4601                	li	a2,0
204037c2:	fd842583          	lw	a1,-40(s0)
204037c6:	fec42503          	lw	a0,-20(s0)
204037ca:	3159                	jal	20403450 <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:152
    return 0;
204037cc:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:153
}
204037ce:	853e                	mv	a0,a5
204037d0:	50b2                	lw	ra,44(sp)
204037d2:	5422                	lw	s0,40(sp)
204037d4:	6145                	addi	sp,sp,48
204037d6:	8082                	ret

204037d8 <__metal_driver_led_exist>:
__metal_driver_led_exist():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:9
#include <string.h>
#include <metal/gpio.h>
#include <metal/drivers/sifive,gpio-leds.h>

int  __metal_driver_led_exist (struct metal_led *led, char *label)
{
204037d8:	7179                	addi	sp,sp,-48
204037da:	d606                	sw	ra,44(sp)
204037dc:	d422                	sw	s0,40(sp)
204037de:	1800                	addi	s0,sp,48
204037e0:	fca42e23          	sw	a0,-36(s0)
204037e4:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:10
    struct __metal_driver_sifive_gpio_led *_led = (void *)(led);
204037e8:	fdc42783          	lw	a5,-36(s0)
204037ec:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:12

    if (strcmp(_led->label, label) == 0) {
204037f0:	fec42783          	lw	a5,-20(s0)
204037f4:	47dc                	lw	a5,12(a5)
204037f6:	fd842583          	lw	a1,-40(s0)
204037fa:	853e                	mv	a0,a5
204037fc:	275000ef          	jal	ra,20404270 <strcmp>
20403800:	87aa                	mv	a5,a0
20403802:	e399                	bnez	a5,20403808 <__metal_driver_led_exist+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:13
	return 1;
20403804:	4785                	li	a5,1
20403806:	a011                	j	2040380a <__metal_driver_led_exist+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:15
    }
    return 0;
20403808:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:16
}
2040380a:	853e                	mv	a0,a5
2040380c:	50b2                	lw	ra,44(sp)
2040380e:	5422                	lw	s0,40(sp)
20403810:	6145                	addi	sp,sp,48
20403812:	8082                	ret

20403814 <__metal_driver_led_enable>:
__metal_driver_led_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:19

void __metal_driver_led_enable (struct metal_led *led)
{
20403814:	7179                	addi	sp,sp,-48
20403816:	d606                	sw	ra,44(sp)
20403818:	d422                	sw	s0,40(sp)
2040381a:	1800                	addi	s0,sp,48
2040381c:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:20
    struct __metal_driver_sifive_gpio_led *_led = (void *)(led);
20403820:	fdc42783          	lw	a5,-36(s0)
20403824:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:22

    if (_led->gpio != NULL) {
20403828:	fec42783          	lw	a5,-20(s0)
2040382c:	479c                	lw	a5,8(a5)
2040382e:	c39d                	beqz	a5,20403854 <__metal_driver_led_enable+0x40>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:24
	/* Configure LED as output */
        metal_gpio_disable_input((struct metal_gpio *) _led->gpio, _led->pin);
20403830:	fec42783          	lw	a5,-20(s0)
20403834:	4798                	lw	a4,8(a5)
20403836:	fec42783          	lw	a5,-20(s0)
2040383a:	4b9c                	lw	a5,16(a5)
2040383c:	85be                	mv	a1,a5
2040383e:	853a                	mv	a0,a4
20403840:	23e5                	jal	20403e28 <metal_gpio_disable_input>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:25
        metal_gpio_enable_output((struct metal_gpio *) _led->gpio, _led->pin);
20403842:	fec42783          	lw	a5,-20(s0)
20403846:	4798                	lw	a4,8(a5)
20403848:	fec42783          	lw	a5,-20(s0)
2040384c:	4b9c                	lw	a5,16(a5)
2040384e:	85be                	mv	a1,a5
20403850:	853a                	mv	a0,a4
20403852:	2d19                	jal	20403e68 <metal_gpio_enable_output>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:27
    }
}
20403854:	0001                	nop
20403856:	50b2                	lw	ra,44(sp)
20403858:	5422                	lw	s0,40(sp)
2040385a:	6145                	addi	sp,sp,48
2040385c:	8082                	ret

2040385e <__metal_driver_led_on>:
__metal_driver_led_on():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:30

void __metal_driver_led_on (struct metal_led *led)
{
2040385e:	7179                	addi	sp,sp,-48
20403860:	d606                	sw	ra,44(sp)
20403862:	d422                	sw	s0,40(sp)
20403864:	1800                	addi	s0,sp,48
20403866:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:31
    struct __metal_driver_sifive_gpio_led *_led = (void *)(led);
2040386a:	fdc42783          	lw	a5,-36(s0)
2040386e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:33

    if (_led->gpio != NULL) {
20403872:	fec42783          	lw	a5,-20(s0)
20403876:	479c                	lw	a5,8(a5)
20403878:	cb99                	beqz	a5,2040388e <__metal_driver_led_on+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:34
        metal_gpio_set_pin((struct metal_gpio *) _led->gpio, _led->pin, 1);
2040387a:	fec42783          	lw	a5,-20(s0)
2040387e:	4798                	lw	a4,8(a5)
20403880:	fec42783          	lw	a5,-20(s0)
20403884:	4b9c                	lw	a5,16(a5)
20403886:	4605                	li	a2,1
20403888:	85be                	mv	a1,a5
2040388a:	853a                	mv	a0,a4
2040388c:	2d31                	jal	20403ea8 <metal_gpio_set_pin>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:36
    }
}
2040388e:	0001                	nop
20403890:	50b2                	lw	ra,44(sp)
20403892:	5422                	lw	s0,40(sp)
20403894:	6145                	addi	sp,sp,48
20403896:	8082                	ret

20403898 <__metal_driver_led_off>:
__metal_driver_led_off():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:39

void __metal_driver_led_off (struct metal_led *led)
{
20403898:	7179                	addi	sp,sp,-48
2040389a:	d606                	sw	ra,44(sp)
2040389c:	d422                	sw	s0,40(sp)
2040389e:	1800                	addi	s0,sp,48
204038a0:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:40
    struct __metal_driver_sifive_gpio_led *_led = (void *)(led);
204038a4:	fdc42783          	lw	a5,-36(s0)
204038a8:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:42

    if (_led->gpio != NULL) {
204038ac:	fec42783          	lw	a5,-20(s0)
204038b0:	479c                	lw	a5,8(a5)
204038b2:	cb99                	beqz	a5,204038c8 <__metal_driver_led_off+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:43
        metal_gpio_set_pin((struct metal_gpio *) _led->gpio, _led->pin, 0);
204038b4:	fec42783          	lw	a5,-20(s0)
204038b8:	4798                	lw	a4,8(a5)
204038ba:	fec42783          	lw	a5,-20(s0)
204038be:	4b9c                	lw	a5,16(a5)
204038c0:	4601                	li	a2,0
204038c2:	85be                	mv	a1,a5
204038c4:	853a                	mv	a0,a4
204038c6:	23cd                	jal	20403ea8 <metal_gpio_set_pin>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:45
    }
}
204038c8:	0001                	nop
204038ca:	50b2                	lw	ra,44(sp)
204038cc:	5422                	lw	s0,40(sp)
204038ce:	6145                	addi	sp,sp,48
204038d0:	8082                	ret

204038d2 <__metal_driver_led_toggle>:
__metal_driver_led_toggle():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:48

void __metal_driver_led_toggle (struct metal_led *led)
{
204038d2:	7179                	addi	sp,sp,-48
204038d4:	d606                	sw	ra,44(sp)
204038d6:	d422                	sw	s0,40(sp)
204038d8:	1800                	addi	s0,sp,48
204038da:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:49
    struct __metal_driver_sifive_gpio_led *_led = (void *)(led);
204038de:	fdc42783          	lw	a5,-36(s0)
204038e2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:51

    if (_led->gpio != NULL) {
204038e6:	fec42783          	lw	a5,-20(s0)
204038ea:	479c                	lw	a5,8(a5)
204038ec:	cb91                	beqz	a5,20403900 <__metal_driver_led_toggle+0x2e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:52
        metal_gpio_toggle_pin((struct metal_gpio *) _led->gpio, _led->pin);
204038ee:	fec42783          	lw	a5,-20(s0)
204038f2:	4798                	lw	a4,8(a5)
204038f4:	fec42783          	lw	a5,-20(s0)
204038f8:	4b9c                	lw	a5,16(a5)
204038fa:	85be                	mv	a1,a5
204038fc:	853a                	mv	a0,a4
204038fe:	2d09                	jal	20403f10 <metal_gpio_toggle_pin>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio-leds.c:54
    }
}
20403900:	0001                	nop
20403902:	50b2                	lw	ra,44(sp)
20403904:	5422                	lw	s0,40(sp)
20403906:	6145                	addi	sp,sp,48
20403908:	8082                	ret

2040390a <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:16

#define GPIO_IOF_EN     (0x38)
#define GPIO_IOF_SEL    (0x3C)

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
2040390a:	7179                	addi	sp,sp,-48
2040390c:	d622                	sw	s0,44(sp)
2040390e:	1800                	addi	s0,sp,48
20403910:	fca42e23          	sw	a0,-36(s0)
20403914:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:17
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403918:	fdc42783          	lw	a5,-36(s0)
2040391c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:19

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_INPUT_EN))  &= ~source;
20403920:	fec42783          	lw	a5,-20(s0)
20403924:	479c                	lw	a5,8(a5)
20403926:	0791                	addi	a5,a5,4
20403928:	439c                	lw	a5,0(a5)
2040392a:	fd842703          	lw	a4,-40(s0)
2040392e:	fff74713          	not	a4,a4
20403932:	86ba                	mv	a3,a4
20403934:	fec42703          	lw	a4,-20(s0)
20403938:	4718                	lw	a4,8(a4)
2040393a:	0711                	addi	a4,a4,4
2040393c:	8ff5                	and	a5,a5,a3
2040393e:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:21

    return 0;
20403940:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:22
}
20403942:	853e                	mv	a0,a5
20403944:	5432                	lw	s0,44(sp)
20403946:	6145                	addi	sp,sp,48
20403948:	8082                	ret

2040394a <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:25

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
2040394a:	7179                	addi	sp,sp,-48
2040394c:	d622                	sw	s0,44(sp)
2040394e:	1800                	addi	s0,sp,48
20403950:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:26
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403954:	fdc42783          	lw	a5,-36(s0)
20403958:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:28

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL));
2040395c:	fec42783          	lw	a5,-20(s0)
20403960:	479c                	lw	a5,8(a5)
20403962:	07b1                	addi	a5,a5,12
20403964:	439c                	lw	a5,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:29
}
20403966:	853e                	mv	a0,a5
20403968:	5432                	lw	s0,44(sp)
2040396a:	6145                	addi	sp,sp,48
2040396c:	8082                	ret

2040396e <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:32

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040396e:	7179                	addi	sp,sp,-48
20403970:	d622                	sw	s0,44(sp)
20403972:	1800                	addi	s0,sp,48
20403974:	fca42e23          	sw	a0,-36(s0)
20403978:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:33
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040397c:	fdc42783          	lw	a5,-36(s0)
20403980:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:35

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_EN))  |= source;
20403984:	fec42783          	lw	a5,-20(s0)
20403988:	479c                	lw	a5,8(a5)
2040398a:	07a1                	addi	a5,a5,8
2040398c:	4398                	lw	a4,0(a5)
2040398e:	fd842783          	lw	a5,-40(s0)
20403992:	fec42683          	lw	a3,-20(s0)
20403996:	4694                	lw	a3,8(a3)
20403998:	06a1                	addi	a3,a3,8
2040399a:	8fd9                	or	a5,a5,a4
2040399c:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:37

    return 0;
2040399e:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:38
}
204039a0:	853e                	mv	a0,a5
204039a2:	5432                	lw	s0,44(sp)
204039a4:	6145                	addi	sp,sp,48
204039a6:	8082                	ret

204039a8 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:41

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204039a8:	7179                	addi	sp,sp,-48
204039aa:	d622                	sw	s0,44(sp)
204039ac:	1800                	addi	s0,sp,48
204039ae:	fca42e23          	sw	a0,-36(s0)
204039b2:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:42
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204039b6:	fdc42783          	lw	a5,-36(s0)
204039ba:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:44

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) |= value;
204039be:	fec42783          	lw	a5,-20(s0)
204039c2:	479c                	lw	a5,8(a5)
204039c4:	07b1                	addi	a5,a5,12
204039c6:	4398                	lw	a4,0(a5)
204039c8:	fd842783          	lw	a5,-40(s0)
204039cc:	fec42683          	lw	a3,-20(s0)
204039d0:	4694                	lw	a3,8(a3)
204039d2:	06b1                	addi	a3,a3,12
204039d4:	8fd9                	or	a5,a5,a4
204039d6:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:46

    return 0;
204039d8:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:47
}
204039da:	853e                	mv	a0,a5
204039dc:	5432                	lw	s0,44(sp)
204039de:	6145                	addi	sp,sp,48
204039e0:	8082                	ret

204039e2 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:50

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204039e2:	7179                	addi	sp,sp,-48
204039e4:	d622                	sw	s0,44(sp)
204039e6:	1800                	addi	s0,sp,48
204039e8:	fca42e23          	sw	a0,-36(s0)
204039ec:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:51
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204039f0:	fdc42783          	lw	a5,-36(s0)
204039f4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:53

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) &= ~value;
204039f8:	fec42783          	lw	a5,-20(s0)
204039fc:	479c                	lw	a5,8(a5)
204039fe:	07b1                	addi	a5,a5,12
20403a00:	439c                	lw	a5,0(a5)
20403a02:	fd842703          	lw	a4,-40(s0)
20403a06:	fff74713          	not	a4,a4
20403a0a:	86ba                	mv	a3,a4
20403a0c:	fec42703          	lw	a4,-20(s0)
20403a10:	4718                	lw	a4,8(a4)
20403a12:	0731                	addi	a4,a4,12
20403a14:	8ff5                	and	a5,a5,a3
20403a16:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:55

    return 0;
20403a18:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:56
}
20403a1a:	853e                	mv	a0,a5
20403a1c:	5432                	lw	s0,44(sp)
20403a1e:	6145                	addi	sp,sp,48
20403a20:	8082                	ret

20403a22 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:59

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20403a22:	7179                	addi	sp,sp,-48
20403a24:	d622                	sw	s0,44(sp)
20403a26:	1800                	addi	s0,sp,48
20403a28:	fca42e23          	sw	a0,-36(s0)
20403a2c:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:60
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403a30:	fdc42783          	lw	a5,-36(s0)
20403a34:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20403a38:	fec42783          	lw	a5,-20(s0)
20403a3c:	479c                	lw	a5,8(a5)
20403a3e:	07b1                	addi	a5,a5,12
20403a40:	4398                	lw	a4,0(a5)
20403a42:	fd842783          	lw	a5,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20403a46:	fec42683          	lw	a3,-20(s0)
20403a4a:	4694                	lw	a3,8(a3)
20403a4c:	06b1                	addi	a3,a3,12
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20403a4e:	8fb9                	xor	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20403a50:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:65

    return 0;
20403a52:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:66
}
20403a54:	853e                	mv	a0,a5
20403a56:	5432                	lw	s0,44(sp)
20403a58:	6145                	addi	sp,sp,48
20403a5a:	8082                	ret

20403a5c <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:69

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20403a5c:	7179                	addi	sp,sp,-48
20403a5e:	d622                	sw	s0,44(sp)
20403a60:	1800                	addi	s0,sp,48
20403a62:	fca42e23          	sw	a0,-36(s0)
20403a66:	fcb42c23          	sw	a1,-40(s0)
20403a6a:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:70
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403a6e:	fdc42783          	lw	a5,-36(s0)
20403a72:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:72

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_SEL)) &= ~source;
20403a76:	fec42783          	lw	a5,-20(s0)
20403a7a:	479c                	lw	a5,8(a5)
20403a7c:	03c78793          	addi	a5,a5,60
20403a80:	439c                	lw	a5,0(a5)
20403a82:	fd842703          	lw	a4,-40(s0)
20403a86:	fff74713          	not	a4,a4
20403a8a:	86ba                	mv	a3,a4
20403a8c:	fec42703          	lw	a4,-20(s0)
20403a90:	4718                	lw	a4,8(a4)
20403a92:	03c70713          	addi	a4,a4,60
20403a96:	8ff5                	and	a5,a5,a3
20403a98:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:73
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_EN))  |= dest;
20403a9a:	fec42783          	lw	a5,-20(s0)
20403a9e:	479c                	lw	a5,8(a5)
20403aa0:	03878793          	addi	a5,a5,56
20403aa4:	4398                	lw	a4,0(a5)
20403aa6:	fd442783          	lw	a5,-44(s0)
20403aaa:	fec42683          	lw	a3,-20(s0)
20403aae:	4694                	lw	a3,8(a3)
20403ab0:	03868693          	addi	a3,a3,56
20403ab4:	8fd9                	or	a5,a5,a4
20403ab6:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:75

    return 0;
20403ab8:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:76
}
20403aba:	853e                	mv	a0,a5
20403abc:	5432                	lw	s0,44(sp)
20403abe:	6145                	addi	sp,sp,48
20403ac0:	8082                	ret

20403ac2 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:37
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20403ac2:	7179                	addi	sp,sp,-48
20403ac4:	d622                	sw	s0,44(sp)
20403ac6:	1800                	addi	s0,sp,48
20403ac8:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:38
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20403acc:	fdc42783          	lw	a5,-36(s0)
20403ad0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:39
    return (struct metal_interrupt *)uart0->interrupt_parent;
20403ad4:	fec42783          	lw	a5,-20(s0)
20403ad8:	53dc                	lw	a5,36(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:40
}
20403ada:	853e                	mv	a0,a5
20403adc:	5432                	lw	s0,44(sp)
20403ade:	6145                	addi	sp,sp,48
20403ae0:	8082                	ret

20403ae2 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:43

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20403ae2:	7179                	addi	sp,sp,-48
20403ae4:	d622                	sw	s0,44(sp)
20403ae6:	1800                	addi	s0,sp,48
20403ae8:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:44
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20403aec:	fdc42783          	lw	a5,-36(s0)
20403af0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:45
    return (uart0->interrupt_line + METAL_INTERRUPT_ID_GL0);
20403af4:	fec42783          	lw	a5,-20(s0)
20403af8:	57dc                	lw	a5,44(a5)
20403afa:	02078793          	addi	a5,a5,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:46
}
20403afe:	853e                	mv	a0,a5
20403b00:	5432                	lw	s0,44(sp)
20403b02:	6145                	addi	sp,sp,48
20403b04:	8082                	ret

20403b06 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:49

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, unsigned char c)
{
20403b06:	1101                	addi	sp,sp,-32
20403b08:	ce22                	sw	s0,28(sp)
20403b0a:	1000                	addi	s0,sp,32
20403b0c:	fea42623          	sw	a0,-20(s0)
20403b10:	87ae                	mv	a5,a1
20403b12:	fef405a3          	sb	a5,-21(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50
    while ((UART_REGW(UART_REG_TXDATA) & UART_TXFULL) != 0) { }
20403b16:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50 (discriminator 1)
20403b18:	fec42783          	lw	a5,-20(s0)
20403b1c:	47dc                	lw	a5,12(a5)
20403b1e:	439c                	lw	a5,0(a5)
20403b20:	fe07cce3          	bltz	a5,20403b18 <__metal_driver_sifive_uart0_putc+0x12>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:51
    UART_REGW(UART_REG_TXDATA) = c;
20403b24:	fec42783          	lw	a5,-20(s0)
20403b28:	47dc                	lw	a5,12(a5)
20403b2a:	873e                	mv	a4,a5
20403b2c:	feb44783          	lbu	a5,-21(s0)
20403b30:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:52
    return 0;
20403b32:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:53
}
20403b34:	853e                	mv	a0,a5
20403b36:	4472                	lw	s0,28(sp)
20403b38:	6105                	addi	sp,sp,32
20403b3a:	8082                	ret

20403b3c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:56

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, unsigned char *c)
{
20403b3c:	7179                	addi	sp,sp,-48
20403b3e:	d622                	sw	s0,44(sp)
20403b40:	1800                	addi	s0,sp,48
20403b42:	fca42e23          	sw	a0,-36(s0)
20403b46:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:57
    uint32_t ch = UART_RXEMPTY;
20403b4a:	800007b7          	lui	a5,0x80000
20403b4e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20403b52:	a801                	j	20403b62 <__metal_driver_sifive_uart0_getc+0x26>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:59
        ch = UART_REGW(UART_REG_RXDATA);
20403b54:	fdc42783          	lw	a5,-36(s0)
20403b58:	47dc                	lw	a5,12(a5)
20403b5a:	0791                	addi	a5,a5,4
20403b5c:	439c                	lw	a5,0(a5)
20403b5e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20403b62:	fec42783          	lw	a5,-20(s0)
20403b66:	fe07c7e3          	bltz	a5,20403b54 <__metal_driver_sifive_uart0_getc+0x18>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:61
    }
    *c = ch & 0xff;
20403b6a:	fec42783          	lw	a5,-20(s0)
20403b6e:	0ff7f713          	andi	a4,a5,255
20403b72:	fd842783          	lw	a5,-40(s0)
20403b76:	00e78023          	sb	a4,0(a5) # 80000000 <metal_segment_heap_target_end+0xffffc000>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:62
    return 0;
20403b7a:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:63
}
20403b7c:	853e                	mv	a0,a5
20403b7e:	5432                	lw	s0,44(sp)
20403b80:	6145                	addi	sp,sp,48
20403b82:	8082                	ret

20403b84 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:66

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20403b84:	7179                	addi	sp,sp,-48
20403b86:	d622                	sw	s0,44(sp)
20403b88:	1800                	addi	s0,sp,48
20403b8a:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:67
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20403b8e:	fdc42783          	lw	a5,-36(s0)
20403b92:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:68
    return uart->baud_rate;
20403b96:	fec42783          	lw	a5,-20(s0)
20403b9a:	4bdc                	lw	a5,20(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:69
}
20403b9c:	853e                	mv	a0,a5
20403b9e:	5432                	lw	s0,44(sp)
20403ba0:	6145                	addi	sp,sp,48
20403ba2:	8082                	ret

20403ba4 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:72

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20403ba4:	7179                	addi	sp,sp,-48
20403ba6:	d606                	sw	ra,44(sp)
20403ba8:	d422                	sw	s0,40(sp)
20403baa:	1800                	addi	s0,sp,48
20403bac:	fca42e23          	sw	a0,-36(s0)
20403bb0:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:73
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20403bb4:	fdc42783          	lw	a5,-36(s0)
20403bb8:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:75

    uart->baud_rate = baud_rate;
20403bbc:	fd842703          	lw	a4,-40(s0)
20403bc0:	fec42783          	lw	a5,-20(s0)
20403bc4:	cbd8                	sw	a4,20(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:77

    if (uart->clock != NULL) {
20403bc6:	fec42783          	lw	a5,-20(s0)
20403bca:	479c                	lw	a5,8(a5)
20403bcc:	c3b5                	beqz	a5,20403c30 <__metal_driver_sifive_uart0_set_baud_rate+0x8c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:78
        long clock_rate = uart->clock->vtable->get_rate_hz(uart->clock);
20403bce:	fec42783          	lw	a5,-20(s0)
20403bd2:	479c                	lw	a5,8(a5)
20403bd4:	439c                	lw	a5,0(a5)
20403bd6:	4398                	lw	a4,0(a5)
20403bd8:	fec42783          	lw	a5,-20(s0)
20403bdc:	479c                	lw	a5,8(a5)
20403bde:	853e                	mv	a0,a5
20403be0:	9702                	jalr	a4
20403be2:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:79
        UART_REGW(UART_REG_DIV) = clock_rate / baud_rate - 1;
20403be6:	fe842703          	lw	a4,-24(s0)
20403bea:	fd842783          	lw	a5,-40(s0)
20403bee:	02f747b3          	div	a5,a4,a5
20403bf2:	fff78713          	addi	a4,a5,-1
20403bf6:	fec42783          	lw	a5,-20(s0)
20403bfa:	47dc                	lw	a5,12(a5)
20403bfc:	07e1                	addi	a5,a5,24
20403bfe:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:80
        UART_REGW(UART_REG_TXCTRL) |= UART_TXEN;
20403c00:	fec42783          	lw	a5,-20(s0)
20403c04:	47dc                	lw	a5,12(a5)
20403c06:	07a1                	addi	a5,a5,8
20403c08:	439c                	lw	a5,0(a5)
20403c0a:	fec42703          	lw	a4,-20(s0)
20403c0e:	4758                	lw	a4,12(a4)
20403c10:	0721                	addi	a4,a4,8
20403c12:	0017e793          	ori	a5,a5,1
20403c16:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:81
        UART_REGW(UART_REG_RXCTRL) |= UART_RXEN;
20403c18:	fec42783          	lw	a5,-20(s0)
20403c1c:	47dc                	lw	a5,12(a5)
20403c1e:	07b1                	addi	a5,a5,12
20403c20:	439c                	lw	a5,0(a5)
20403c22:	fec42703          	lw	a4,-20(s0)
20403c26:	4758                	lw	a4,12(a4)
20403c28:	0731                	addi	a4,a4,12
20403c2a:	0017e793          	ori	a5,a5,1
20403c2e:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:83
    }
    return 0;
20403c30:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:84
}
20403c32:	853e                	mv	a0,a5
20403c34:	50b2                	lw	ra,44(sp)
20403c36:	5422                	lw	s0,40(sp)
20403c38:	6145                	addi	sp,sp,48
20403c3a:	8082                	ret

20403c3c <pre_rate_change_callback>:
pre_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:87

static void pre_rate_change_callback(void *priv)
{
20403c3c:	7139                	addi	sp,sp,-64
20403c3e:	de06                	sw	ra,60(sp)
20403c40:	dc22                	sw	s0,56(sp)
20403c42:	0080                	addi	s0,sp,64
20403c44:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:88
    struct __metal_driver_sifive_uart0 *uart = priv;
20403c48:	fcc42783          	lw	a5,-52(s0)
20403c4c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:93

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(UART_REG_TXCTRL) &= ~(UART_TXCNT(0x7));
20403c50:	fec42783          	lw	a5,-20(s0)
20403c54:	47dc                	lw	a5,12(a5)
20403c56:	07a1                	addi	a5,a5,8
20403c58:	4398                	lw	a4,0(a5)
20403c5a:	fec42783          	lw	a5,-20(s0)
20403c5e:	47dc                	lw	a5,12(a5)
20403c60:	07a1                	addi	a5,a5,8
20403c62:	86be                	mv	a3,a5
20403c64:	fff907b7          	lui	a5,0xfff90
20403c68:	17fd                	addi	a5,a5,-1
20403c6a:	8ff9                	and	a5,a5,a4
20403c6c:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:94
    UART_REGW(UART_REG_TXCTRL) |= UART_TXCNT(1);
20403c6e:	fec42783          	lw	a5,-20(s0)
20403c72:	47dc                	lw	a5,12(a5)
20403c74:	07a1                	addi	a5,a5,8
20403c76:	4398                	lw	a4,0(a5)
20403c78:	fec42783          	lw	a5,-20(s0)
20403c7c:	47dc                	lw	a5,12(a5)
20403c7e:	07a1                	addi	a5,a5,8
20403c80:	86be                	mv	a3,a5
20403c82:	67c1                	lui	a5,0x10
20403c84:	8fd9                	or	a5,a5,a4
20403c86:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96

    while((UART_REGW(UART_REG_IP) & UART_TXWM) == 0) ;
20403c88:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96 (discriminator 1)
20403c8a:	fec42783          	lw	a5,-20(s0)
20403c8e:	47dc                	lw	a5,12(a5)
20403c90:	07d1                	addi	a5,a5,20
20403c92:	439c                	lw	a5,0(a5)
20403c94:	8b85                	andi	a5,a5,1
20403c96:	dbf5                	beqz	a5,20403c8a <pre_rate_change_callback+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(UART_REG_TXCTRL) & (1 << 1)) ? 9 : 10;
20403c98:	fec42783          	lw	a5,-20(s0)
20403c9c:	47dc                	lw	a5,12(a5)
20403c9e:	07a1                	addi	a5,a5,8
20403ca0:	439c                	lw	a5,0(a5)
20403ca2:	8b89                	andi	a5,a5,2
20403ca4:	c399                	beqz	a5,20403caa <pre_rate_change_callback+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 1)
20403ca6:	47a5                	li	a5,9
20403ca8:	a011                	j	20403cac <pre_rate_change_callback+0x70>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 2)
20403caa:	47a9                	li	a5,10
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 4)
20403cac:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:103 (discriminator 4)
    long clk_freq = uart->clock->vtable->get_rate_hz(uart->clock);
20403cb0:	fec42783          	lw	a5,-20(s0)
20403cb4:	479c                	lw	a5,8(a5)
20403cb6:	439c                	lw	a5,0(a5)
20403cb8:	4398                	lw	a4,0(a5)
20403cba:	fec42783          	lw	a5,-20(s0)
20403cbe:	479c                	lw	a5,8(a5)
20403cc0:	853e                	mv	a0,a5
20403cc2:	9702                	jalr	a4
20403cc4:	fea42223          	sw	a0,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:104 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20403cc8:	fe842703          	lw	a4,-24(s0)
20403ccc:	fe442783          	lw	a5,-28(s0)
20403cd0:	02f707b3          	mul	a5,a4,a5
20403cd4:	873e                	mv	a4,a5
20403cd6:	fec42783          	lw	a5,-20(s0)
20403cda:	4bdc                	lw	a5,20(a5)
20403cdc:	02f757b3          	divu	a5,a4,a5
20403ce0:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20403ce4:	fc042e23          	sw	zero,-36(s0)
20403ce8:	a039                	j	20403cf6 <pre_rate_change_callback+0xba>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:107 (discriminator 3)
        asm("nop");
20403cea:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20403cec:	fdc42783          	lw	a5,-36(s0)
20403cf0:	0785                	addi	a5,a5,1
20403cf2:	fcf42e23          	sw	a5,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 1)
20403cf6:	fdc42783          	lw	a5,-36(s0)
20403cfa:	fe042703          	lw	a4,-32(s0)
20403cfe:	fee7c6e3          	blt	a5,a4,20403cea <pre_rate_change_callback+0xae>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:108
}
20403d02:	0001                	nop
20403d04:	50f2                	lw	ra,60(sp)
20403d06:	5462                	lw	s0,56(sp)
20403d08:	6121                	addi	sp,sp,64
20403d0a:	8082                	ret

20403d0c <post_rate_change_callback>:
post_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:111

static void post_rate_change_callback(void *priv)
{
20403d0c:	7179                	addi	sp,sp,-48
20403d0e:	d606                	sw	ra,44(sp)
20403d10:	d422                	sw	s0,40(sp)
20403d12:	1800                	addi	s0,sp,48
20403d14:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:112
    struct __metal_driver_sifive_uart0 *uart = priv;
20403d18:	fdc42783          	lw	a5,-36(s0)
20403d1c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:113
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20403d20:	fec42703          	lw	a4,-20(s0)
20403d24:	fec42783          	lw	a5,-20(s0)
20403d28:	4bdc                	lw	a5,20(a5)
20403d2a:	85be                	mv	a1,a5
20403d2c:	853a                	mv	a0,a4
20403d2e:	2471                	jal	20403fba <metal_uart_set_baud_rate>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:114
}
20403d30:	0001                	nop
20403d32:	50b2                	lw	ra,44(sp)
20403d34:	5422                	lw	s0,40(sp)
20403d36:	6145                	addi	sp,sp,48
20403d38:	8082                	ret

20403d3a <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:117

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20403d3a:	7179                	addi	sp,sp,-48
20403d3c:	d606                	sw	ra,44(sp)
20403d3e:	d422                	sw	s0,40(sp)
20403d40:	1800                	addi	s0,sp,48
20403d42:	fca42e23          	sw	a0,-36(s0)
20403d46:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:118
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20403d4a:	fdc42783          	lw	a5,-36(s0)
20403d4e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:120

    if(uart->clock != NULL) {
20403d52:	fec42783          	lw	a5,-20(s0)
20403d56:	479c                	lw	a5,8(a5)
20403d58:	c79d                	beqz	a5,20403d86 <__metal_driver_sifive_uart0_init+0x4c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:121
        metal_clock_register_pre_rate_change_callback(uart->clock, &pre_rate_change_callback, uart);
20403d5a:	fec42783          	lw	a5,-20(s0)
20403d5e:	4798                	lw	a4,8(a5)
20403d60:	fec42603          	lw	a2,-20(s0)
20403d64:	204047b7          	lui	a5,0x20404
20403d68:	c3c78593          	addi	a1,a5,-964 # 20403c3c <pre_rate_change_callback>
20403d6c:	853a                	mv	a0,a4
20403d6e:	28b9                	jal	20403dcc <metal_clock_register_pre_rate_change_callback>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:122
        metal_clock_register_post_rate_change_callback(uart->clock, &post_rate_change_callback, uart);
20403d70:	fec42783          	lw	a5,-20(s0)
20403d74:	4798                	lw	a4,8(a5)
20403d76:	fec42603          	lw	a2,-20(s0)
20403d7a:	204047b7          	lui	a5,0x20404
20403d7e:	d0c78593          	addi	a1,a5,-756 # 20403d0c <post_rate_change_callback>
20403d82:	853a                	mv	a0,a4
20403d84:	289d                	jal	20403dfa <metal_clock_register_post_rate_change_callback>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:125
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20403d86:	fec42783          	lw	a5,-20(s0)
20403d8a:	fd842583          	lw	a1,-40(s0)
20403d8e:	853e                	mv	a0,a5
20403d90:	242d                	jal	20403fba <metal_uart_set_baud_rate>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:127

    if (uart->pinmux != NULL) {
20403d92:	fec42783          	lw	a5,-20(s0)
20403d96:	4f9c                	lw	a5,24(a5)
20403d98:	c78d                	beqz	a5,20403dc2 <__metal_driver_sifive_uart0_init+0x88>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20403d9a:	fec42783          	lw	a5,-20(s0)
20403d9e:	4f9c                	lw	a5,24(a5)
20403da0:	43dc                	lw	a5,4(a5)
20403da2:	0187a803          	lw	a6,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:129
            (struct metal_gpio *) uart->pinmux,
20403da6:	fec42783          	lw	a5,-20(s0)
20403daa:	4f98                	lw	a4,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:130
            uart->pinmux_output_selector,
20403dac:	fec42783          	lw	a5,-20(s0)
20403db0:	4fdc                	lw	a5,28(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20403db2:	86be                	mv	a3,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:131
            uart->pinmux_source_selector
20403db4:	fec42783          	lw	a5,-20(s0)
20403db8:	539c                	lw	a5,32(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20403dba:	863e                	mv	a2,a5
20403dbc:	85b6                	mv	a1,a3
20403dbe:	853a                	mv	a0,a4
20403dc0:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:134
        );
    }
}
20403dc2:	0001                	nop
20403dc4:	50b2                	lw	ra,44(sp)
20403dc6:	5422                	lw	s0,40(sp)
20403dc8:	6145                	addi	sp,sp,48
20403dca:	8082                	ret

20403dcc <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:101
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_pre_rate_change_callback cb, void *priv)
{
20403dcc:	1101                	addi	sp,sp,-32
20403dce:	ce22                	sw	s0,28(sp)
20403dd0:	1000                	addi	s0,sp,32
20403dd2:	fea42623          	sw	a0,-20(s0)
20403dd6:	feb42423          	sw	a1,-24(s0)
20403dda:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:102
    clk->_pre_rate_change_callback = cb;
20403dde:	fec42783          	lw	a5,-20(s0)
20403de2:	fe842703          	lw	a4,-24(s0)
20403de6:	c3d8                	sw	a4,4(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:103
    clk->_pre_rate_change_callback_priv = priv;
20403de8:	fec42783          	lw	a5,-20(s0)
20403dec:	fe442703          	lw	a4,-28(s0)
20403df0:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:104
}
20403df2:	0001                	nop
20403df4:	4472                	lw	s0,28(sp)
20403df6:	6105                	addi	sp,sp,32
20403df8:	8082                	ret

20403dfa <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:114
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_post_rate_change_callback cb, void *priv)
{
20403dfa:	1101                	addi	sp,sp,-32
20403dfc:	ce22                	sw	s0,28(sp)
20403dfe:	1000                	addi	s0,sp,32
20403e00:	fea42623          	sw	a0,-20(s0)
20403e04:	feb42423          	sw	a1,-24(s0)
20403e08:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:115
    clk->_post_rate_change_callback = cb;
20403e0c:	fec42783          	lw	a5,-20(s0)
20403e10:	fe842703          	lw	a4,-24(s0)
20403e14:	c7d8                	sw	a4,12(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:116
    clk->_post_rate_change_callback_priv = priv;
20403e16:	fec42783          	lw	a5,-20(s0)
20403e1a:	fe442703          	lw	a4,-28(s0)
20403e1e:	cb98                	sw	a4,16(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:117
}
20403e20:	0001                	nop
20403e22:	4472                	lw	s0,28(sp)
20403e24:	6105                	addi	sp,sp,32
20403e26:	8082                	ret

20403e28 <metal_gpio_disable_input>:
metal_gpio_disable_input():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:47
 * @brief Disable input on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the input is successfully disabled
 */
inline int metal_gpio_disable_input(struct metal_gpio *gpio, int pin) {
20403e28:	1101                	addi	sp,sp,-32
20403e2a:	ce06                	sw	ra,28(sp)
20403e2c:	cc22                	sw	s0,24(sp)
20403e2e:	1000                	addi	s0,sp,32
20403e30:	fea42623          	sw	a0,-20(s0)
20403e34:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:48
    if(!gpio) {
20403e38:	fec42783          	lw	a5,-20(s0)
20403e3c:	e399                	bnez	a5,20403e42 <metal_gpio_disable_input+0x1a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:49
	return 1;
20403e3e:	4785                	li	a5,1
20403e40:	a839                	j	20403e5e <metal_gpio_disable_input+0x36>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:52
    }

    return gpio->vtable->disable_input(gpio, (1 << pin));
20403e42:	fec42783          	lw	a5,-20(s0)
20403e46:	439c                	lw	a5,0(a5)
20403e48:	4394                	lw	a3,0(a5)
20403e4a:	fe842783          	lw	a5,-24(s0)
20403e4e:	4705                	li	a4,1
20403e50:	00f717b3          	sll	a5,a4,a5
20403e54:	85be                	mv	a1,a5
20403e56:	fec42503          	lw	a0,-20(s0)
20403e5a:	9682                	jalr	a3
20403e5c:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:53
}
20403e5e:	853e                	mv	a0,a5
20403e60:	40f2                	lw	ra,28(sp)
20403e62:	4462                	lw	s0,24(sp)
20403e64:	6105                	addi	sp,sp,32
20403e66:	8082                	ret

20403e68 <metal_gpio_enable_output>:
metal_gpio_enable_output():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:61
 * @brief Enable output on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the output is successfully enabled
 */
inline int metal_gpio_enable_output(struct metal_gpio *gpio, int pin) {
20403e68:	1101                	addi	sp,sp,-32
20403e6a:	ce06                	sw	ra,28(sp)
20403e6c:	cc22                	sw	s0,24(sp)
20403e6e:	1000                	addi	s0,sp,32
20403e70:	fea42623          	sw	a0,-20(s0)
20403e74:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:62
    if(!gpio) {
20403e78:	fec42783          	lw	a5,-20(s0)
20403e7c:	e399                	bnez	a5,20403e82 <metal_gpio_enable_output+0x1a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:63
	return 1;
20403e7e:	4785                	li	a5,1
20403e80:	a839                	j	20403e9e <metal_gpio_enable_output+0x36>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:66
    }

    return gpio->vtable->enable_output(gpio, (1 << pin));
20403e82:	fec42783          	lw	a5,-20(s0)
20403e86:	439c                	lw	a5,0(a5)
20403e88:	4794                	lw	a3,8(a5)
20403e8a:	fe842783          	lw	a5,-24(s0)
20403e8e:	4705                	li	a4,1
20403e90:	00f717b3          	sll	a5,a4,a5
20403e94:	85be                	mv	a1,a5
20403e96:	fec42503          	lw	a0,-20(s0)
20403e9a:	9682                	jalr	a3
20403e9c:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:67
}
20403e9e:	853e                	mv	a0,a5
20403ea0:	40f2                	lw	ra,28(sp)
20403ea2:	4462                	lw	s0,24(sp)
20403ea4:	6105                	addi	sp,sp,32
20403ea6:	8082                	ret

20403ea8 <metal_gpio_set_pin>:
metal_gpio_set_pin():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:76
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @param value The value to set the pin to
 * @return 0 if the output is successfully set
 */
inline int metal_gpio_set_pin(struct metal_gpio *gpio, int pin, int value) {
20403ea8:	1101                	addi	sp,sp,-32
20403eaa:	ce06                	sw	ra,28(sp)
20403eac:	cc22                	sw	s0,24(sp)
20403eae:	1000                	addi	s0,sp,32
20403eb0:	fea42623          	sw	a0,-20(s0)
20403eb4:	feb42423          	sw	a1,-24(s0)
20403eb8:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:77
    if(!gpio) {
20403ebc:	fec42783          	lw	a5,-20(s0)
20403ec0:	e399                	bnez	a5,20403ec6 <metal_gpio_set_pin+0x1e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:78
	return 1;
20403ec2:	4785                	li	a5,1
20403ec4:	a089                	j	20403f06 <metal_gpio_set_pin+0x5e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:81
    }

    if(value == 0) {
20403ec6:	fe442783          	lw	a5,-28(s0)
20403eca:	e385                	bnez	a5,20403eea <metal_gpio_set_pin+0x42>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:82
	return gpio->vtable->output_clear(gpio, (1 << pin));
20403ecc:	fec42783          	lw	a5,-20(s0)
20403ed0:	439c                	lw	a5,0(a5)
20403ed2:	4b94                	lw	a3,16(a5)
20403ed4:	fe842783          	lw	a5,-24(s0)
20403ed8:	4705                	li	a4,1
20403eda:	00f717b3          	sll	a5,a4,a5
20403ede:	85be                	mv	a1,a5
20403ee0:	fec42503          	lw	a0,-20(s0)
20403ee4:	9682                	jalr	a3
20403ee6:	87aa                	mv	a5,a0
20403ee8:	a839                	j	20403f06 <metal_gpio_set_pin+0x5e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:84
    } else {
	return gpio->vtable->output_set(gpio, (1 << pin));
20403eea:	fec42783          	lw	a5,-20(s0)
20403eee:	439c                	lw	a5,0(a5)
20403ef0:	47d4                	lw	a3,12(a5)
20403ef2:	fe842783          	lw	a5,-24(s0)
20403ef6:	4705                	li	a4,1
20403ef8:	00f717b3          	sll	a5,a4,a5
20403efc:	85be                	mv	a1,a5
20403efe:	fec42503          	lw	a0,-20(s0)
20403f02:	9682                	jalr	a3
20403f04:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:86
    }
}
20403f06:	853e                	mv	a0,a5
20403f08:	40f2                	lw	ra,28(sp)
20403f0a:	4462                	lw	s0,24(sp)
20403f0c:	6105                	addi	sp,sp,32
20403f0e:	8082                	ret

20403f10 <metal_gpio_toggle_pin>:
metal_gpio_toggle_pin():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:128
 * @brief Toggles the value of the GPIO pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the pin is successfully toggled
 */
inline int metal_gpio_toggle_pin(struct metal_gpio *gpio, int pin) {
20403f10:	1101                	addi	sp,sp,-32
20403f12:	ce06                	sw	ra,28(sp)
20403f14:	cc22                	sw	s0,24(sp)
20403f16:	1000                	addi	s0,sp,32
20403f18:	fea42623          	sw	a0,-20(s0)
20403f1c:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:129
    if(!gpio) {
20403f20:	fec42783          	lw	a5,-20(s0)
20403f24:	e399                	bnez	a5,20403f2a <metal_gpio_toggle_pin+0x1a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:130
	return 1;
20403f26:	4785                	li	a5,1
20403f28:	a839                	j	20403f46 <metal_gpio_toggle_pin+0x36>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:133
    }

    return gpio->vtable->output_toggle(gpio, (1 << pin));
20403f2a:	fec42783          	lw	a5,-20(s0)
20403f2e:	439c                	lw	a5,0(a5)
20403f30:	4bd4                	lw	a3,20(a5)
20403f32:	fe842783          	lw	a5,-24(s0)
20403f36:	4705                	li	a4,1
20403f38:	00f717b3          	sll	a5,a4,a5
20403f3c:	85be                	mv	a1,a5
20403f3e:	fec42503          	lw	a0,-20(s0)
20403f42:	9682                	jalr	a3
20403f44:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/gpio.h:134
}
20403f46:	853e                	mv	a0,a5
20403f48:	40f2                	lw	ra,28(sp)
20403f4a:	4462                	lw	s0,24(sp)
20403f4c:	6105                	addi	sp,sp,32
20403f4e:	8082                	ret

20403f50 <metal_shutdown>:
metal_shutdown():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
# warning "There is no defined shutdown mechanism, metal_shutdown() will spin."
void metal_shutdown(int code)
{
20403f50:	1101                	addi	sp,sp,-32
20403f52:	ce22                	sw	s0,28(sp)
20403f54:	1000                	addi	s0,sp,32
20403f56:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20403f5a:	0001                	nop
20403f5c:	bffd                	j	20403f5a <metal_shutdown+0xa>

20403f5e <metal_uart_init>:
metal_uart_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:42
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
inline void metal_uart_init(struct metal_uart *uart, int baud_rate) { return uart->vtable->init(uart, baud_rate); }
20403f5e:	1101                	addi	sp,sp,-32
20403f60:	ce06                	sw	ra,28(sp)
20403f62:	cc22                	sw	s0,24(sp)
20403f64:	1000                	addi	s0,sp,32
20403f66:	fea42623          	sw	a0,-20(s0)
20403f6a:	feb42423          	sw	a1,-24(s0)
20403f6e:	fec42783          	lw	a5,-20(s0)
20403f72:	439c                	lw	a5,0(a5)
20403f74:	439c                	lw	a5,0(a5)
20403f76:	fe842583          	lw	a1,-24(s0)
20403f7a:	fec42503          	lw	a0,-20(s0)
20403f7e:	9782                	jalr	a5
20403f80:	40f2                	lw	ra,28(sp)
20403f82:	4462                	lw	s0,24(sp)
20403f84:	6105                	addi	sp,sp,32
20403f86:	8082                	ret

20403f88 <metal_uart_putc>:
metal_uart_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:50
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
inline int metal_uart_putc(struct metal_uart *uart, unsigned char c) { return uart->vtable->putc(uart, c); }
20403f88:	1101                	addi	sp,sp,-32
20403f8a:	ce06                	sw	ra,28(sp)
20403f8c:	cc22                	sw	s0,24(sp)
20403f8e:	1000                	addi	s0,sp,32
20403f90:	fea42623          	sw	a0,-20(s0)
20403f94:	87ae                	mv	a5,a1
20403f96:	fef405a3          	sb	a5,-21(s0)
20403f9a:	fec42783          	lw	a5,-20(s0)
20403f9e:	439c                	lw	a5,0(a5)
20403fa0:	43d8                	lw	a4,4(a5)
20403fa2:	feb44783          	lbu	a5,-21(s0)
20403fa6:	85be                	mv	a1,a5
20403fa8:	fec42503          	lw	a0,-20(s0)
20403fac:	9702                	jalr	a4
20403fae:	87aa                	mv	a5,a0
20403fb0:	853e                	mv	a0,a5
20403fb2:	40f2                	lw	ra,28(sp)
20403fb4:	4462                	lw	s0,24(sp)
20403fb6:	6105                	addi	sp,sp,32
20403fb8:	8082                	ret

20403fba <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:73
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
inline int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20403fba:	1101                	addi	sp,sp,-32
20403fbc:	ce06                	sw	ra,28(sp)
20403fbe:	cc22                	sw	s0,24(sp)
20403fc0:	1000                	addi	s0,sp,32
20403fc2:	fea42623          	sw	a0,-20(s0)
20403fc6:	feb42423          	sw	a1,-24(s0)
20403fca:	fec42783          	lw	a5,-20(s0)
20403fce:	439c                	lw	a5,0(a5)
20403fd0:	4b9c                	lw	a5,16(a5)
20403fd2:	fe842583          	lw	a1,-24(s0)
20403fd6:	fec42503          	lw	a0,-20(s0)
20403fda:	9782                	jalr	a5
20403fdc:	87aa                	mv	a5,a0
20403fde:	853e                	mv	a0,a5
20403fe0:	40f2                	lw	ra,28(sp)
20403fe2:	4462                	lw	s0,24(sp)
20403fe4:	6105                	addi	sp,sp,32
20403fe6:	8082                	ret

20403fe8 <_close>:
_close():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20403fe8:	1101                	addi	sp,sp,-32
20403fea:	ce06                	sw	ra,28(sp)
20403fec:	cc22                	sw	s0,24(sp)
20403fee:	1000                	addi	s0,sp,32
20403ff0:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20403ff4:	2271                	jal	20404180 <__errno>
20403ff6:	872a                	mv	a4,a0
20403ff8:	05800793          	li	a5,88
20403ffc:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20403ffe:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20404000:	853e                	mv	a0,a5
20404002:	40f2                	lw	ra,28(sp)
20404004:	4462                	lw	s0,24(sp)
20404006:	6105                	addi	sp,sp,32
20404008:	8082                	ret

2040400a <_fstat>:
_fstat():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
2040400a:	1101                	addi	sp,sp,-32
2040400c:	ce06                	sw	ra,28(sp)
2040400e:	cc22                	sw	s0,24(sp)
20404010:	1000                	addi	s0,sp,32
20404012:	fea42623          	sw	a0,-20(s0)
20404016:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
2040401a:	229d                	jal	20404180 <__errno>
2040401c:	872a                	mv	a4,a0
2040401e:	fa800793          	li	a5,-88
20404022:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20404024:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20404026:	853e                	mv	a0,a5
20404028:	40f2                	lw	ra,28(sp)
2040402a:	4462                	lw	s0,24(sp)
2040402c:	6105                	addi	sp,sp,32
2040402e:	8082                	ret

20404030 <_isatty>:
_isatty():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20404030:	1101                	addi	sp,sp,-32
20404032:	ce22                	sw	s0,28(sp)
20404034:	1000                	addi	s0,sp,32
20404036:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
2040403a:	fec42783          	lw	a5,-20(s0)
2040403e:	17fd                	addi	a5,a5,-1
20404040:	0017b793          	seqz	a5,a5
20404044:	0ff7f793          	andi	a5,a5,255
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20404048:	853e                	mv	a0,a5
2040404a:	4472                	lw	s0,28(sp)
2040404c:	6105                	addi	sp,sp,32
2040404e:	8082                	ret

20404050 <_lseek>:
_lseek():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20404050:	1101                	addi	sp,sp,-32
20404052:	ce06                	sw	ra,28(sp)
20404054:	cc22                	sw	s0,24(sp)
20404056:	1000                	addi	s0,sp,32
20404058:	fea42623          	sw	a0,-20(s0)
2040405c:	feb42423          	sw	a1,-24(s0)
20404060:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20404064:	2a31                	jal	20404180 <__errno>
20404066:	872a                	mv	a4,a0
20404068:	05800793          	li	a5,88
2040406c:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040406e:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20404070:	853e                	mv	a0,a5
20404072:	40f2                	lw	ra,28(sp)
20404074:	4462                	lw	s0,24(sp)
20404076:	6105                	addi	sp,sp,32
20404078:	8082                	ret

2040407a <_read>:
_read():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
2040407a:	1101                	addi	sp,sp,-32
2040407c:	ce06                	sw	ra,28(sp)
2040407e:	cc22                	sw	s0,24(sp)
20404080:	1000                	addi	s0,sp,32
20404082:	fea42623          	sw	a0,-20(s0)
20404086:	feb42423          	sw	a1,-24(s0)
2040408a:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040408e:	28cd                	jal	20404180 <__errno>
20404090:	872a                	mv	a4,a0
20404092:	05800793          	li	a5,88
20404096:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20404098:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
2040409a:	853e                	mv	a0,a5
2040409c:	40f2                	lw	ra,28(sp)
2040409e:	4462                	lw	s0,24(sp)
204040a0:	6105                	addi	sp,sp,32
204040a2:	8082                	ret

204040a4 <_sbrk>:
_sbrk():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204040a4:	7179                	addi	sp,sp,-48
204040a6:	d622                	sw	s0,44(sp)
204040a8:	1800                	addi	s0,sp,48
204040aa:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204040ae:	8181a783          	lw	a5,-2024(gp) # 80001048 <brk>
204040b2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204040b6:	c7018713          	addi	a4,gp,-912 # 800014a0 <metal_segment_stack_end>
204040ba:	800047b7          	lui	a5,0x80004
204040be:	00078793          	mv	a5,a5
204040c2:	00f71463          	bne	a4,a5,204040ca <_sbrk+0x26>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return NULL;
204040c6:	4781                	li	a5,0
204040c8:	a825                	j	20404100 <_sbrk+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204040ca:	8181a703          	lw	a4,-2024(gp) # 80001048 <brk>
204040ce:	fdc42783          	lw	a5,-36(s0)
204040d2:	973e                	add	a4,a4,a5
204040d4:	800047b7          	lui	a5,0x80004
204040d8:	00078793          	mv	a5,a5
204040dc:	00f77a63          	bgeu	a4,a5,204040f0 <_sbrk+0x4c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204040e0:	8181a703          	lw	a4,-2024(gp) # 80001048 <brk>
204040e4:	fdc42783          	lw	a5,-36(s0)
204040e8:	973e                	add	a4,a4,a5
204040ea:	80e1ac23          	sw	a4,-2024(gp) # 80001048 <brk>
204040ee:	a039                	j	204040fc <_sbrk+0x58>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
  } else {
    brk = &metal_segment_heap_target_end;
204040f0:	80004737          	lui	a4,0x80004
204040f4:	00070713          	mv	a4,a4
204040f8:	80e1ac23          	sw	a4,-2024(gp) # 80001048 <brk>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:37
  }

  return old;
204040fc:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
}
20404100:	853e                	mv	a0,a5
20404102:	5432                	lw	s0,44(sp)
20404104:	6145                	addi	sp,sp,48
20404106:	8082                	ret

20404108 <_write>:
_write():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20404108:	7179                	addi	sp,sp,-48
2040410a:	d606                	sw	ra,44(sp)
2040410c:	d422                	sw	s0,40(sp)
2040410e:	1800                	addi	s0,sp,48
20404110:	fca42e23          	sw	a0,-36(s0)
20404114:	fcb42c23          	sw	a1,-40(s0)
20404118:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040411c:	fdc42703          	lw	a4,-36(s0)
20404120:	4785                	li	a5,1
20404122:	00f70963          	beq	a4,a5,20404134 <_write+0x2c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20404126:	28a9                	jal	20404180 <__errno>
20404128:	872a                	mv	a4,a0
2040412a:	05800793          	li	a5,88
2040412e:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20404130:	57fd                	li	a5,-1
20404132:	a82d                	j	2040416c <_write+0x64>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20404134:	fd842783          	lw	a5,-40(s0)
20404138:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
2040413c:	fe042623          	sw	zero,-20(s0)
20404140:	a839                	j	2040415e <_write+0x56>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20404142:	fe842703          	lw	a4,-24(s0)
20404146:	fec42783          	lw	a5,-20(s0)
2040414a:	97ba                	add	a5,a5,a4
2040414c:	0007c783          	lbu	a5,0(a5) # 80004000 <metal_segment_heap_target_end+0x0>
20404150:	853e                	mv	a0,a5
20404152:	2eb9                	jal	204044b0 <metal_tty_putc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20404154:	fec42783          	lw	a5,-20(s0)
20404158:	0785                	addi	a5,a5,1
2040415a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
2040415e:	fec42703          	lw	a4,-20(s0)
20404162:	fd442783          	lw	a5,-44(s0)
20404166:	fcf76ee3          	bltu	a4,a5,20404142 <_write+0x3a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
2040416a:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
2040416c:	853e                	mv	a0,a5
2040416e:	50b2                	lw	ra,44(sp)
20404170:	5422                	lw	s0,40(sp)
20404172:	6145                	addi	sp,sp,48
20404174:	8082                	ret

20404176 <atexit>:
atexit():
20404176:	85aa                	mv	a1,a0
20404178:	4681                	li	a3,0
2040417a:	4601                	li	a2,0
2040417c:	4501                	li	a0,0
2040417e:	a40d                	j	204043a0 <__register_exitproc>

20404180 <__errno>:
__errno():
20404180:	5fbfd797          	auipc	a5,0x5fbfd
20404184:	eb078793          	addi	a5,a5,-336 # 80001030 <_impure_ptr>
20404188:	4388                	lw	a0,0(a5)
2040418a:	8082                	ret

2040418c <exit>:
exit():
2040418c:	1141                	addi	sp,sp,-16
2040418e:	4581                	li	a1,0
20404190:	c422                	sw	s0,8(sp)
20404192:	c606                	sw	ra,12(sp)
20404194:	842a                	mv	s0,a0
20404196:	24b5                	jal	20404402 <__call_exitprocs>
20404198:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
2040419c:	4388                	lw	a0,0(a5)
2040419e:	5d5c                	lw	a5,60(a0)
204041a0:	c391                	beqz	a5,204041a4 <exit+0x18>
204041a2:	9782                	jalr	a5
204041a4:	8522                	mv	a0,s0
204041a6:	2649                	jal	20404528 <_exit>

204041a8 <__libc_fini_array>:
__libc_fini_array():
204041a8:	1141                	addi	sp,sp,-16
204041aa:	dfbfc797          	auipc	a5,0xdfbfc
204041ae:	e5678793          	addi	a5,a5,-426 # 0 <__heap_size-0x400>
204041b2:	c422                	sw	s0,8(sp)
204041b4:	dfbfc417          	auipc	s0,0xdfbfc
204041b8:	e4c40413          	addi	s0,s0,-436 # 0 <__heap_size-0x400>
204041bc:	8c1d                	sub	s0,s0,a5
204041be:	c226                	sw	s1,4(sp)
204041c0:	c606                	sw	ra,12(sp)
204041c2:	8409                	srai	s0,s0,0x2
204041c4:	84be                	mv	s1,a5
204041c6:	e419                	bnez	s0,204041d4 <__libc_fini_array+0x2c>
204041c8:	4422                	lw	s0,8(sp)
204041ca:	40b2                	lw	ra,12(sp)
204041cc:	4492                	lw	s1,4(sp)
204041ce:	0141                	addi	sp,sp,16
204041d0:	f63fb06f          	j	20400132 <_fini>
204041d4:	147d                	addi	s0,s0,-1
204041d6:	00241793          	slli	a5,s0,0x2
204041da:	97a6                	add	a5,a5,s1
204041dc:	439c                	lw	a5,0(a5)
204041de:	9782                	jalr	a5
204041e0:	b7dd                	j	204041c6 <__libc_fini_array+0x1e>

204041e2 <__libc_init_array>:
__libc_init_array():
204041e2:	1141                	addi	sp,sp,-16
204041e4:	00001797          	auipc	a5,0x1
204041e8:	a4d78793          	addi	a5,a5,-1459 # 20404c31 <__preinit_array_end>
204041ec:	c422                	sw	s0,8(sp)
204041ee:	00001417          	auipc	s0,0x1
204041f2:	a4340413          	addi	s0,s0,-1469 # 20404c31 <__preinit_array_end>
204041f6:	8c1d                	sub	s0,s0,a5
204041f8:	c226                	sw	s1,4(sp)
204041fa:	c04a                	sw	s2,0(sp)
204041fc:	c606                	sw	ra,12(sp)
204041fe:	8409                	srai	s0,s0,0x2
20404200:	4481                	li	s1,0
20404202:	893e                	mv	s2,a5
20404204:	02849863          	bne	s1,s0,20404234 <__libc_init_array+0x52>
20404208:	f2bfb0ef          	jal	ra,20400132 <_fini>
2040420c:	00001797          	auipc	a5,0x1
20404210:	a2878793          	addi	a5,a5,-1496 # 20404c34 <__init_array_start>
20404214:	00001417          	auipc	s0,0x1
20404218:	a2440413          	addi	s0,s0,-1500 # 20404c38 <__init_array_end>
2040421c:	8c1d                	sub	s0,s0,a5
2040421e:	8409                	srai	s0,s0,0x2
20404220:	4481                	li	s1,0
20404222:	893e                	mv	s2,a5
20404224:	00849f63          	bne	s1,s0,20404242 <__libc_init_array+0x60>
20404228:	40b2                	lw	ra,12(sp)
2040422a:	4422                	lw	s0,8(sp)
2040422c:	4492                	lw	s1,4(sp)
2040422e:	4902                	lw	s2,0(sp)
20404230:	0141                	addi	sp,sp,16
20404232:	8082                	ret
20404234:	00249793          	slli	a5,s1,0x2
20404238:	97ca                	add	a5,a5,s2
2040423a:	439c                	lw	a5,0(a5)
2040423c:	0485                	addi	s1,s1,1
2040423e:	9782                	jalr	a5
20404240:	b7d1                	j	20404204 <__libc_init_array+0x22>
20404242:	00249793          	slli	a5,s1,0x2
20404246:	97ca                	add	a5,a5,s2
20404248:	439c                	lw	a5,0(a5)
2040424a:	0485                	addi	s1,s1,1
2040424c:	9782                	jalr	a5
2040424e:	bfd9                	j	20404224 <__libc_init_array+0x42>

20404250 <strcat>:
strcat():
20404250:	87aa                	mv	a5,a0
20404252:	0007c703          	lbu	a4,0(a5)
20404256:	00178693          	addi	a3,a5,1
2040425a:	eb09                	bnez	a4,2040426c <strcat+0x1c>
2040425c:	0585                	addi	a1,a1,1
2040425e:	fff5c703          	lbu	a4,-1(a1)
20404262:	0785                	addi	a5,a5,1
20404264:	fee78fa3          	sb	a4,-1(a5)
20404268:	fb75                	bnez	a4,2040425c <strcat+0xc>
2040426a:	8082                	ret
2040426c:	87b6                	mv	a5,a3
2040426e:	b7d5                	j	20404252 <strcat+0x2>

20404270 <strcmp>:
strcmp():
20404270:	00b56733          	or	a4,a0,a1
20404274:	53fd                	li	t2,-1
20404276:	8b0d                	andi	a4,a4,3
20404278:	e779                	bnez	a4,20404346 <strcmp+0xd6>
2040427a:	7f7f87b7          	lui	a5,0x7f7f8
2040427e:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <__init_array_end+0x5f3f3347>
20404282:	4110                	lw	a2,0(a0)
20404284:	4194                	lw	a3,0(a1)
20404286:	00f672b3          	and	t0,a2,a5
2040428a:	00f66333          	or	t1,a2,a5
2040428e:	92be                	add	t0,t0,a5
20404290:	0062e2b3          	or	t0,t0,t1
20404294:	0c729763          	bne	t0,t2,20404362 <strcmp+0xf2>
20404298:	06d61863          	bne	a2,a3,20404308 <strcmp+0x98>
2040429c:	4150                	lw	a2,4(a0)
2040429e:	41d4                	lw	a3,4(a1)
204042a0:	00f672b3          	and	t0,a2,a5
204042a4:	00f66333          	or	t1,a2,a5
204042a8:	92be                	add	t0,t0,a5
204042aa:	0062e2b3          	or	t0,t0,t1
204042ae:	0a729863          	bne	t0,t2,2040435e <strcmp+0xee>
204042b2:	04d61b63          	bne	a2,a3,20404308 <strcmp+0x98>
204042b6:	4510                	lw	a2,8(a0)
204042b8:	4594                	lw	a3,8(a1)
204042ba:	00f672b3          	and	t0,a2,a5
204042be:	00f66333          	or	t1,a2,a5
204042c2:	92be                	add	t0,t0,a5
204042c4:	0062e2b3          	or	t0,t0,t1
204042c8:	0a729163          	bne	t0,t2,2040436a <strcmp+0xfa>
204042cc:	02d61e63          	bne	a2,a3,20404308 <strcmp+0x98>
204042d0:	4550                	lw	a2,12(a0)
204042d2:	45d4                	lw	a3,12(a1)
204042d4:	00f672b3          	and	t0,a2,a5
204042d8:	00f66333          	or	t1,a2,a5
204042dc:	92be                	add	t0,t0,a5
204042de:	0062e2b3          	or	t0,t0,t1
204042e2:	08729a63          	bne	t0,t2,20404376 <strcmp+0x106>
204042e6:	02d61163          	bne	a2,a3,20404308 <strcmp+0x98>
204042ea:	4910                	lw	a2,16(a0)
204042ec:	4994                	lw	a3,16(a1)
204042ee:	00f672b3          	and	t0,a2,a5
204042f2:	00f66333          	or	t1,a2,a5
204042f6:	92be                	add	t0,t0,a5
204042f8:	0062e2b3          	or	t0,t0,t1
204042fc:	08729363          	bne	t0,t2,20404382 <strcmp+0x112>
20404300:	0551                	addi	a0,a0,20
20404302:	05d1                	addi	a1,a1,20
20404304:	f6d60fe3          	beq	a2,a3,20404282 <strcmp+0x12>
20404308:	01061713          	slli	a4,a2,0x10
2040430c:	01069793          	slli	a5,a3,0x10
20404310:	00f71c63          	bne	a4,a5,20404328 <strcmp+0xb8>
20404314:	01065713          	srli	a4,a2,0x10
20404318:	0106d793          	srli	a5,a3,0x10
2040431c:	40f70533          	sub	a0,a4,a5
20404320:	0ff57593          	andi	a1,a0,255
20404324:	e991                	bnez	a1,20404338 <strcmp+0xc8>
20404326:	8082                	ret
20404328:	8341                	srli	a4,a4,0x10
2040432a:	83c1                	srli	a5,a5,0x10
2040432c:	40f70533          	sub	a0,a4,a5
20404330:	0ff57593          	andi	a1,a0,255
20404334:	e191                	bnez	a1,20404338 <strcmp+0xc8>
20404336:	8082                	ret
20404338:	0ff77713          	andi	a4,a4,255
2040433c:	0ff7f793          	andi	a5,a5,255
20404340:	40f70533          	sub	a0,a4,a5
20404344:	8082                	ret
20404346:	00054603          	lbu	a2,0(a0) # c000 <__heap_size+0xbc00>
2040434a:	0005c683          	lbu	a3,0(a1)
2040434e:	0505                	addi	a0,a0,1
20404350:	0585                	addi	a1,a1,1
20404352:	00d61363          	bne	a2,a3,20404358 <strcmp+0xe8>
20404356:	fa65                	bnez	a2,20404346 <strcmp+0xd6>
20404358:	40d60533          	sub	a0,a2,a3
2040435c:	8082                	ret
2040435e:	0511                	addi	a0,a0,4
20404360:	0591                	addi	a1,a1,4
20404362:	fed612e3          	bne	a2,a3,20404346 <strcmp+0xd6>
20404366:	4501                	li	a0,0
20404368:	8082                	ret
2040436a:	0521                	addi	a0,a0,8
2040436c:	05a1                	addi	a1,a1,8
2040436e:	fcd61ce3          	bne	a2,a3,20404346 <strcmp+0xd6>
20404372:	4501                	li	a0,0
20404374:	8082                	ret
20404376:	0531                	addi	a0,a0,12
20404378:	05b1                	addi	a1,a1,12
2040437a:	fcd616e3          	bne	a2,a3,20404346 <strcmp+0xd6>
2040437e:	4501                	li	a0,0
20404380:	8082                	ret
20404382:	0541                	addi	a0,a0,16
20404384:	05c1                	addi	a1,a1,16
20404386:	fcd610e3          	bne	a2,a3,20404346 <strcmp+0xd6>
2040438a:	4501                	li	a0,0
2040438c:	8082                	ret

2040438e <strcpy>:
strcpy():
2040438e:	87aa                	mv	a5,a0
20404390:	0005c703          	lbu	a4,0(a1)
20404394:	0785                	addi	a5,a5,1
20404396:	0585                	addi	a1,a1,1
20404398:	fee78fa3          	sb	a4,-1(a5)
2040439c:	fb75                	bnez	a4,20404390 <strcpy+0x2>
2040439e:	8082                	ret

204043a0 <__register_exitproc>:
__register_exitproc():
204043a0:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
204043a4:	4398                	lw	a4,0(a5)
204043a6:	832a                	mv	t1,a0
204043a8:	14872783          	lw	a5,328(a4) # 80004148 <metal_segment_heap_target_end+0x148>
204043ac:	e789                	bnez	a5,204043b6 <__register_exitproc+0x16>
204043ae:	14c70793          	addi	a5,a4,332
204043b2:	14f72423          	sw	a5,328(a4)
204043b6:	43d8                	lw	a4,4(a5)
204043b8:	487d                	li	a6,31
204043ba:	557d                	li	a0,-1
204043bc:	04e84263          	blt	a6,a4,20404400 <__register_exitproc+0x60>
204043c0:	00271893          	slli	a7,a4,0x2
204043c4:	02030963          	beqz	t1,204043f6 <__register_exitproc+0x56>
204043c8:	01178533          	add	a0,a5,a7
204043cc:	08c52423          	sw	a2,136(a0)
204043d0:	1887a803          	lw	a6,392(a5)
204043d4:	4605                	li	a2,1
204043d6:	00e61633          	sll	a2,a2,a4
204043da:	00c86833          	or	a6,a6,a2
204043de:	1907a423          	sw	a6,392(a5)
204043e2:	10d52423          	sw	a3,264(a0)
204043e6:	4689                	li	a3,2
204043e8:	00d31763          	bne	t1,a3,204043f6 <__register_exitproc+0x56>
204043ec:	18c7a683          	lw	a3,396(a5)
204043f0:	8e55                	or	a2,a2,a3
204043f2:	18c7a623          	sw	a2,396(a5)
204043f6:	0705                	addi	a4,a4,1
204043f8:	c3d8                	sw	a4,4(a5)
204043fa:	97c6                	add	a5,a5,a7
204043fc:	c78c                	sw	a1,8(a5)
204043fe:	4501                	li	a0,0
20404400:	8082                	ret

20404402 <__call_exitprocs>:
__call_exitprocs():
20404402:	7179                	addi	sp,sp,-48
20404404:	82018793          	addi	a5,gp,-2016 # 80001050 <_global_impure_ptr>
20404408:	ce4e                	sw	s3,28(sp)
2040440a:	0007a983          	lw	s3,0(a5)
2040440e:	cc52                	sw	s4,24(sp)
20404410:	ca56                	sw	s5,20(sp)
20404412:	c85a                	sw	s6,16(sp)
20404414:	d606                	sw	ra,44(sp)
20404416:	d422                	sw	s0,40(sp)
20404418:	d226                	sw	s1,36(sp)
2040441a:	d04a                	sw	s2,32(sp)
2040441c:	c65e                	sw	s7,12(sp)
2040441e:	8aaa                	mv	s5,a0
20404420:	8a2e                	mv	s4,a1
20404422:	4b05                	li	s6,1
20404424:	1489a483          	lw	s1,328(s3)
20404428:	c881                	beqz	s1,20404438 <__call_exitprocs+0x36>
2040442a:	40c0                	lw	s0,4(s1)
2040442c:	fff40913          	addi	s2,s0,-1
20404430:	040a                	slli	s0,s0,0x2
20404432:	9426                	add	s0,s0,s1
20404434:	00095d63          	bgez	s2,2040444e <__call_exitprocs+0x4c>
20404438:	50b2                	lw	ra,44(sp)
2040443a:	5422                	lw	s0,40(sp)
2040443c:	5492                	lw	s1,36(sp)
2040443e:	5902                	lw	s2,32(sp)
20404440:	49f2                	lw	s3,28(sp)
20404442:	4a62                	lw	s4,24(sp)
20404444:	4ad2                	lw	s5,20(sp)
20404446:	4b42                	lw	s6,16(sp)
20404448:	4bb2                	lw	s7,12(sp)
2040444a:	6145                	addi	sp,sp,48
2040444c:	8082                	ret
2040444e:	000a0963          	beqz	s4,20404460 <__call_exitprocs+0x5e>
20404452:	10442783          	lw	a5,260(s0)
20404456:	01478563          	beq	a5,s4,20404460 <__call_exitprocs+0x5e>
2040445a:	197d                	addi	s2,s2,-1
2040445c:	1471                	addi	s0,s0,-4
2040445e:	bfd9                	j	20404434 <__call_exitprocs+0x32>
20404460:	40d8                	lw	a4,4(s1)
20404462:	405c                	lw	a5,4(s0)
20404464:	177d                	addi	a4,a4,-1
20404466:	03271663          	bne	a4,s2,20404492 <__call_exitprocs+0x90>
2040446a:	0124a223          	sw	s2,4(s1)
2040446e:	d7f5                	beqz	a5,2040445a <__call_exitprocs+0x58>
20404470:	1884a683          	lw	a3,392(s1)
20404474:	012b1733          	sll	a4,s6,s2
20404478:	0044ab83          	lw	s7,4(s1)
2040447c:	8ef9                	and	a3,a3,a4
2040447e:	ee89                	bnez	a3,20404498 <__call_exitprocs+0x96>
20404480:	9782                	jalr	a5
20404482:	40dc                	lw	a5,4(s1)
20404484:	fb7790e3          	bne	a5,s7,20404424 <__call_exitprocs+0x22>
20404488:	1489a783          	lw	a5,328(s3)
2040448c:	fc9787e3          	beq	a5,s1,2040445a <__call_exitprocs+0x58>
20404490:	bf51                	j	20404424 <__call_exitprocs+0x22>
20404492:	00042223          	sw	zero,4(s0)
20404496:	bfe1                	j	2040446e <__call_exitprocs+0x6c>
20404498:	18c4a683          	lw	a3,396(s1)
2040449c:	08442583          	lw	a1,132(s0)
204044a0:	8f75                	and	a4,a4,a3
204044a2:	e701                	bnez	a4,204044aa <__call_exitprocs+0xa8>
204044a4:	8556                	mv	a0,s5
204044a6:	9782                	jalr	a5
204044a8:	bfe9                	j	20404482 <__call_exitprocs+0x80>
204044aa:	852e                	mv	a0,a1
204044ac:	9782                	jalr	a5
204044ae:	bfd1                	j	20404482 <__call_exitprocs+0x80>

204044b0 <metal_tty_putc>:
metal_tty_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:11

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(unsigned char c)
{
204044b0:	7179                	addi	sp,sp,-48
204044b2:	d606                	sw	ra,44(sp)
204044b4:	d422                	sw	s0,40(sp)
204044b6:	1800                	addi	s0,sp,48
204044b8:	87aa                	mv	a5,a0
204044ba:	fcf40fa3          	sb	a5,-33(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:12
    if (c == '\n') {
204044be:	fdf44703          	lbu	a4,-33(s0)
204044c2:	47a9                	li	a5,10
204044c4:	02f71163          	bne	a4,a5,204044e6 <metal_tty_putc+0x36>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:13
        int out = metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, '\r');
204044c8:	45b5                	li	a1,13
204044ca:	800017b7          	lui	a5,0x80001
204044ce:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
204044d2:	ab7ff0ef          	jal	ra,20403f88 <metal_uart_putc>
204044d6:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:14
        if (out != 0)
204044da:	fec42783          	lw	a5,-20(s0)
204044de:	c781                	beqz	a5,204044e6 <metal_tty_putc+0x36>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:15
            return out;
204044e0:	fec42783          	lw	a5,-20(s0)
204044e4:	a819                	j	204044fa <metal_tty_putc+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:17
    }
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
204044e6:	fdf44783          	lbu	a5,-33(s0)
204044ea:	85be                	mv	a1,a5
204044ec:	800017b7          	lui	a5,0x80001
204044f0:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
204044f4:	a95ff0ef          	jal	ra,20403f88 <metal_uart_putc>
204044f8:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:18
}
204044fa:	853e                	mv	a0,a5
204044fc:	50b2                	lw	ra,44(sp)
204044fe:	5422                	lw	s0,40(sp)
20404500:	6145                	addi	sp,sp,48
20404502:	8082                	ret

20404504 <metal_tty_init>:
metal_tty_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:26
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20404504:	1141                	addi	sp,sp,-16
20404506:	c606                	sw	ra,12(sp)
20404508:	c422                	sw	s0,8(sp)
2040450a:	0800                	addi	s0,sp,16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:27
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040450c:	67f1                	lui	a5,0x1c
2040450e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1be00>
20404512:	800017b7          	lui	a5,0x80001
20404516:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
2040451a:	a45ff0ef          	jal	ra,20403f5e <metal_uart_init>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:28
}
2040451e:	0001                	nop
20404520:	40b2                	lw	ra,12(sp)
20404522:	4422                	lw	s0,8(sp)
20404524:	0141                	addi	sp,sp,16
20404526:	8082                	ret

20404528 <_exit>:
_exit():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20404528:	1101                	addi	sp,sp,-32
2040452a:	ce06                	sw	ra,28(sp)
2040452c:	cc22                	sw	s0,24(sp)
2040452e:	1000                	addi	s0,sp,32
20404530:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20404534:	fec42503          	lw	a0,-20(s0)
20404538:	a19ff0ef          	jal	ra,20403f50 <metal_shutdown>
