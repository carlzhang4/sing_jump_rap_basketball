
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/hello/debug/hello.elf:     file format elf32-littleriscv
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/hello/debug/hello.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00003c7c memsz 0x00003c7c flags rwx
    LOAD off    0x00005000 vaddr 0x80000000 paddr 0x20403c7c align 2**12
         filesz 0x0000100c memsz 0x0000100c flags rw-
    LOAD off    0x0000600c vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    NULL off    0x00000000 vaddr 0x8000100c paddr 0x8000100c align 2**2
         filesz 0x00000000 memsz 0x00002ff4 flags rw-
    NULL off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000134  20400000  20400000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00003884  20400180  20400180  00001180  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000274  20403a04  20403a04  00004a04  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20403c78  20403c78  00004c78  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .litimalign       00000000  20403c7c  20403c7c  0000600c  2**0  CONTENTS
  5 .ditimalign       00000000  08000000  08000000  0000600c  2**0  CONTENTS
  6 .lalign           00000000  20403c7c  20403c7c  0000600c  2**0  CONTENTS
  7 .dalign           00000000  80000000  80000000  0000600c  2**0  CONTENTS
  8 .data             0000100c  80000000  20403c7c  00005000  2**3  CONTENTS, ALLOC, LOAD, DATA
  9 .bss              00000038  8000100c  8000100c  00000000  2**2  ALLOC
 10 .stack            00000400  80001044  80001044  00000000  2**0  ALLOC
 11 .heap             00002bbc  80001444  80001444  00000000  2**0  ALLOC
 12 .debug_info       0000ae41  00000000  00000000  0000600c  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev     00001dea  00000000  00000000  00010e4d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges    00000570  00000000  00000000  00012c38  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges     00000418  00000000  00000000  000131a8  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line       000049e1  00000000  00000000  000135c0  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str        0000280d  00000000  00000000  00017fa1  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment          00000011  00000000  00000000  0001a7ae  2**0  CONTENTS, READONLY
 19 .riscv.attributes 00000029  00000000  00000000  0001a7bf  2**0  CONTENTS, READONLY
 20 .debug_frame      00000f88  00000000  00000000  0001a7e8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400180 l    d  .text	00000000 .text
20403a04 l    d  .rodata	00000000 .rodata
20403c78 l    d  .init_array	00000000 .init_array
20403c7c l    d  .litimalign	00000000 .litimalign
08000000 l    d  .ditimalign	00000000 .ditimalign
20403c7c l    d  .lalign	00000000 .lalign
80000000 l    d  .dalign	00000000 .dalign
80000000 l    d  .data	00000000 .data
8000100c l    d  .bss	00000000 .bss
80001044 l    d  .stack	00000000 .stack
80001444 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20401af4 l       .text	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 crt0.o
20403a18 l       .rodata	00000000 argv
20403a1c l       .rodata	00000000 envp
20403a20 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
2040022e l     F .text	00000004 __fp_lock
20400232 l     F .text	0000006a std
204002a6 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000ff4 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401ec0 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 fixed-clock.c
00000000 l    df *ABS*	00000000 riscv,clint0.c
00000000 l    df *ABS*	00000000 riscv,cpu.c
00000000 l    df *ABS*	00000000 riscv,plic0.c
00000000 l    df *ABS*	00000000 sifive,gpio0.c
00000000 l    df *ABS*	00000000 sifive,uart0.c
204037f4 l     F .text	000000d0 pre_rate_change_callback
204038c4 l     F .text	00000030 post_rate_change_callback
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
20403c7c l       .init_array	00000000 __init_array_end
20403c78 l       .init_array	00000000 __preinit_array_end
20403c78 l       .init_array	00000000 __init_array_start
20403c78 l       .init_array	00000000 __preinit_array_start
20403adc  w    O .rodata	0000001c __metal_driver_vtable_sifive_uart0
20401ac2 g     F .text	00000030 _isatty_r
2040019e g     F .text	00000070 _puts_r
20401926 g     F .text	00000034 _lseek_r
2040375c g     F .text	00000098 __metal_driver_sifive_uart0_set_baud_rate
2040281e g     F .text	00000038 __metal_valid_interrupt_id
800017e8 g       .data	00000000 __global_pointer$
2040309c g     F .text	0000002c __metal_plic0_complete_interrupt
20402a3e g     F .text	00000148 __metal_driver_riscv_cpu_controller_interrupt_register
204012ce g     F .text	00000036 __sseek
204002f8 g     F .text	0000004e __sinit
204002aa g     F .text	00000046 __sfmoreglue
20400e8c g     F .text	00000002 __malloc_unlock
80000fb8  w    O .data	00000030 __metal_dt_serial_10013000
20403a88  w    O .rodata	0000001c __metal_driver_vtable_riscv_clint0
80001048 g       .bss	00000000 metal_segment_bss_target_end
20401fae g     F .text	00000076 __metal_clint0_mtime_get
20403014 g     F .text	00000028 __metal_driver_cpu_get_instruction_length
20400d98 g     F .text	0000004a memmove
204002f0 g     F .text	00000008 _cleanup
204034c2 g     F .text	00000040 __metal_driver_sifive_gpio0_disable_input
20401c8e g     F .text	0000000c __errno
20402024 g     F .text	00000058 __metal_clint0_mtime_set
08000000 g       .ditimalign	00000000 metal_segment_itim_target_start
8000100c g       .bss	00000000 metal_segment_bss_target_start
20401a90 g     F .text	00000032 _fstat_r
20402bda g     F .text	00000062 __metal_driver_riscv_cpu_controller_interrupt_enable_vector
80001040 g     O .bss	00000004 errno
2040127c g     F .text	00000004 __seofread
00000400 g       *ABS*	00000000 __stack_size
20403988 g     F .text	0000002e metal_clock_register_pre_rate_change_callback
20403aa4  w    O .rodata	0000001c __metal_driver_vtable_riscv_plic0
20403a48  w    O .rodata	00000040 __metal_driver_vtable_cpu
20401f3e g     F .text	0000002e metal_uart_set_baud_rate
204038f4 g     F .text	00000094 __metal_driver_sifive_uart0_init
20400ce2 g     F .text	000000b6 memcpy
80001444 g       .heap	00000000 metal_segment_heap_target_start
2040029c g     F .text	0000000a _cleanup_r
80000870  w    O .data	00000010 __metal_dt_cpu_0
2040020e g     F .text	0000000e puts
20402494 g     F .text	00000018 __metal_default_exception_handler
20401b18 g     F .text	00000026 _fstat
204030f2 g     F .text	00000048 __metal_plic0_set_priority
2040232a g     F .text	0000002c __metal_driver_cpu_get
20403a2c  w    O .rodata	0000001c __metal_driver_vtable_riscv_cpu_intc
80001014 g     O .bss	00000004 __malloc_top_pad
20402388 g     F .text	00000018 __metal_interrupt_global_disable
20400412 g     F .text	000002dc __sfvwrite_r
20401218 g     F .text	00000032 _sbrk_r
204028fc g     F .text	0000004e __metal_exception_register
20403480 g     F .text	00000042 __metal_driver_riscv_plic0_disable
20401a5c g     F .text	00000034 _read_r
20402e14 g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
20403526 g     F .text	0000003a __metal_driver_sifive_gpio0_enable_output
2040144c g     F .text	00000086 _fclose_r
20402c92 g     F .text	00000072 __metal_driver_cpu_timer_get
2040166a g     F .text	00000022 fflush
80001010 g     O .bss	00000004 __malloc_max_sbrked_mem
204024c4 g     F .text	00000064 __metal_default_sw_handler
204039b6 g     F .text	0000002e metal_clock_register_post_rate_change_callback
2040367a g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20401b3e g     F .text	00000020 _isatty
204035da g     F .text	0000003a __metal_driver_sifive_gpio0_output_toggle
20402c3c g     F .text	0000003a __metal_driver_riscv_cpu_controller_interrupt_disable_vector
80000ff8  w    O .data	00000008 __metal_driver_vtable_fixed_clock
80001008 g     O .data	00000004 _global_impure_ptr
20400e8e g     F .text	0000038a _realloc_r
20401cf2 g     F .text	0000006e __libc_init_array
20403560 g     F .text	0000003a __metal_driver_sifive_gpio0_output_set
20402b86 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20401bb2 g     F .text	00000064 _sbrk
204003ea g     F .text	00000014 __fp_lock_all
20400132 g     F .init	00000002 _init
204023ea g     F .text	0000001a __metal_interrupt_timer_disable
20402eda g     F .text	0000006a __metal_driver_cpu_clear_sw_ipi
20403ac0  w    O .rodata	0000001c __metal_driver_vtable_sifive_gpio0
20403614 g     F .text	00000066 __metal_driver_sifive_gpio0_enable_io
20401cb8 g     F .text	0000003a __libc_fini_array
20402e5c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .dalign	00000000 metal_segment_data_target_start
2040243c g     F .text	0000002c __metal_interrupt_local_enable
20401e70 g     F .text	00000050 metal_tty_putc
204031c4 g     F .text	00000018 __metal_plic0_default_handler
80000830  w    O .data	0000001c __metal_dt_clock_0
00000400 g       *ABS*	00000000 __heap_size
20402420 g     F .text	0000001c __metal_interrupt_external_disable
2040369a g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20402c76 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040294a g     F .text	000000f4 __metal_driver_riscv_cpu_controller_interrupt_init
20402fcc g     F .text	00000048 __metal_driver_cpu_exception_register
204023a0 g     F .text	00000018 __metal_interrupt_software_enable
204003e2 g     F .text	00000002 __sfp_lock_acquire
20400cc8 g     F .text	0000001a memchr
20401756 g     F .text	000001d0 _free_r
20401dc2 g     F .text	000000ae __call_exitprocs
20400054 g     F .init	00000000 _start
80000fec g     O .data	00000004 __malloc_sbrk_base
20401b5e g     F .text	0000002a _lseek
20402fac g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2040303c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402404 g     F .text	0000001c __metal_interrupt_external_enable
20401d60 g     F .text	00000062 __register_exitproc
204036be g     F .text	00000036 __metal_driver_sifive_uart0_putc
20403266 g     F .text	0000011a __metal_driver_riscv_plic0_init
2040343e g     F .text	00000042 __metal_driver_riscv_plic0_enable
20403502 g     F .text	00000024 __metal_driver_sifive_gpio0_output
80001018 g     O .bss	00000028 __malloc_current_mallinfo
20402356 g     F .text	0000001a __metal_myhart_id
20402bb0 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
2040141c g     F .text	00000030 _close_r
2040373c g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204020fa g     F .text	00000062 __metal_driver_riscv_clint0_register
8000084c  w    O .data	00000024 __metal_dt_clint_2000000
20401340 g     F .text	000000dc __swsetup_r
20400346 g     F .text	0000009c __sfp
80000428 g     O .data	00000408 __malloc_av_
204003e8 g     F .text	00000002 __sinit_lock_release
2040124a g     F .text	00000032 __sread
20400e8a g     F .text	00000002 __malloc_lock
2040163a g     F .text	00000030 _fflush_r
20402856 g     F .text	000000a6 __metal_local_interrupt_enable
20402208 g     F .text	00000122 __metal_driver_riscv_clint0_command_request
20400de2 g     F .text	000000a8 memset
20400180 g     F .text	0000001e main
8000100c g     O .bss	00000004 __malloc_max_total_mem
8000100c g       .bss	00000000 metal_segment_data_target_end
20402e70 g     F .text	0000006a __metal_driver_cpu_set_sw_ipi
20402f44 g     F .text	00000068 __metal_driver_cpu_get_msip
204039e4 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
2040305a g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040307a g     F .text	00000022 __metal_plic0_claim_interrupt
20401304 g     F .text	00000006 __sclose
204014d2 g     F .text	0000000e fclose
204007bc g     F .text	0000050c _malloc_r
80001444 g       .stack	00000000 metal_segment_stack_end
204006ee g     F .text	00000062 _fwalk
20402d04 g     F .text	00000034 __metal_driver_cpu_timebase_get
2040168c g     F .text	000000ca _malloc_trim_r
20400000 g       .init	00000000 _enter
20403c7c g       .litimalign	00000000 metal_segment_itim_source_start
80001000  w    O .data	00000004 __metal_cpu_table
20400132 g     F .init	00000002 _fini
20402370 g     F .text	00000018 __metal_interrupt_global_enable
20401c84 g     F .text	0000000a atexit
2040130a g     F .text	00000036 _write_r
204023d0 g     F .text	0000001a __metal_interrupt_timer_enable
204036f4 g     F .text	00000048 __metal_driver_sifive_uart0_getc
204021b2 g     F .text	00000056 __metal_driver_riscv_clint0_disable
80000fe8 g     O .data	00000004 _impure_ptr
20402da6 g     F .text	0000006e __metal_driver_cpu_mtimecmp_set
204014e0 g     F .text	0000015a __sflush_r
204003fe g     F .text	00000014 __fp_unlock_all
20401f6c g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
2040215c g     F .text	00000056 __metal_driver_riscv_clint0_enable
20403c7c g       .lalign	00000000 metal_segment_data_source_start
80004000 g       .heap	00000000 metal_segment_heap_target_end
20402778 g     F .text	000000a6 __metal_controller_interrupt_vector
80000c40  w    O .data	00000320 __metal_dt_interrupt_controller_c000000
2040195a g     F .text	00000064 __swhatbuf_r
2040359a g     F .text	00000040 __metal_driver_sifive_gpio0_output_clear
80000880  w    O .data	000003c0 __metal_dt_interrupt_controller
20402528 g     F .text	00000066 __metal_default_timer_handler
20401c16 g     F .text	0000006e _write
204031dc g     F .text	0000008a __metal_plic0_handler
20401280 g     F .text	0000004e __swrite
80000ff0 g     O .data	00000004 __malloc_trim_threshold
20401c9a g     F .text	0000001e exit
20400750 g     F .text	0000006c _fwalk_reent
20401f8c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204003e4 g     F .text	00000002 __sfp_lock_release
80000f60  w    O .data	00000058 __metal_dt_gpio_10012000
204024ac g     F .text	00000018 __metal_default_interrupt_handler
20401f0c g     F .text	00000032 metal_uart_putc
20401b88 g     F .text	0000002a _read
20402600 g     F .text	0000014a __metal_exception_handler
204039f2 g     F .text	00000012 _exit
20402d38 g     F .text	0000006e __metal_driver_cpu_mtime_get
204019be g     F .text	0000009e __smakebuf_r
2040021c g     F .text	00000012 strlen
2040207c g     F .text	0000007e __metal_driver_riscv_clint0_init
20402e2e g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
2040313a g     F .text	0000008a __metal_plic0_enable
20402e42 g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
20402468 g     F .text	0000002c __metal_interrupt_local_disable
204023b8 g     F .text	00000018 __metal_interrupt_software_disable
20401ee2 g     F .text	0000002a metal_uart_init
204030c8 g     F .text	0000002a __metal_plic0_set_threshold
20401af6 g     F .text	00000022 _close
204003e6 g     F .text	00000002 __sinit_lock_acquire
20403380 g     F .text	000000be __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	7e818193          	addi	gp,gp,2024 # 800017e8 <__global_pointer$>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00002297          	auipc	t0,0x2
2040000c:	aec28293          	addi	t0,t0,-1300 # 20401af4 <early_trap_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:38
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400014:	dfc00117          	auipc	sp,0xdfc00
20400018:	fec10113          	addi	sp,sp,-20 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:47
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
2040001c:	dfc00097          	auipc	ra,0xdfc00
20400020:	fe408093          	addi	ra,ra,-28 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:48
    beqz ra, 1f
20400024:	00008363          	beqz	ra,2040002a <_enter+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:49
    jalr ra
20400028:	9082                	jalr	ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:55
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2040002a:	f1402573          	csrr	a0,mhartid
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:56
    li a1, 0
2040002e:	4581                	li	a1,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:57
    li a2, 0
20400030:	4601                	li	a2,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:58
    call _start
20400032:	200d                	jal	20400054 <_start>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:63

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400034:	dfc00097          	auipc	ra,0xdfc00
20400038:	fcc08093          	addi	ra,ra,-52 # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:64
    beqz ra, 1f
2040003c:	00008363          	beqz	ra,20400042 <_enter+0x42>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:65
    jalr ra
20400040:	9082                	jalr	ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:70
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20400042:	00000297          	auipc	t0,0x0
20400046:	00c28293          	addi	t0,t0,12 # 2040004e <_enter+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:71
     csrw mtvec, t0
2040004a:	30529073          	csrw	mtvec,t0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:73
1:
     lw t1, 0(x0)
2040004e:	00002303          	lw	t1,0(zero) # 0 <__heap_size-0x400>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:74
     j 1b
20400052:	bff5                	j	2040004e <_enter+0x4e>

20400054 <_start>:
_start():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20400054:	8406                	mv	s0,ra
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400056:	5fc01197          	auipc	gp,0x5fc01
2040005a:	79218193          	addi	gp,gp,1938 # 800017e8 <__global_pointer$>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, metal_segment_stack_end
2040005e:	c5c18113          	addi	sp,gp,-932 # 80001444 <metal_segment_stack_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:52
  andi sp, sp, -16
20400062:	ff017113          	andi	sp,sp,-16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:57

  /* For now we only run on single-hart systems and assume that we're always on
   * hart 0. */
1:
  bnez a0, 1b
20400066:	e101                	bnez	a0,20400066 <_start+0x12>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20400068:	00004297          	auipc	t0,0x4
2040006c:	c1428293          	addi	t0,t0,-1004 # 20403c7c <__init_array_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:67
  la t1, metal_segment_data_target_start
20400070:	5fc00317          	auipc	t1,0x5fc00
20400074:	f9030313          	addi	t1,t1,-112 # 80000000 <metal_segment_data_target_start>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:68
  la t2, metal_segment_data_target_end
20400078:	5fc01397          	auipc	t2,0x5fc01
2040007c:	f9438393          	addi	t2,t2,-108 # 8000100c <__malloc_max_total_mem>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:70

  beq t0, t1, 2f
20400080:	00628c63          	beq	t0,t1,20400098 <_start+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:71
  bge t1, t2, 2f
20400084:	00735a63          	bge	t1,t2,20400098 <_start+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:74

1:
  lw   a0, 0(t0)
20400088:	0002a503          	lw	a0,0(t0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
  addi t0, t0, 4
2040008c:	0291                	addi	t0,t0,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  sw   a0, 0(t1)
2040008e:	00a32023          	sw	a0,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  addi t1, t1, 4
20400092:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:78
  blt  t1, t2, 1b
20400094:	fe734ae3          	blt	t1,t2,20400088 <_start+0x34>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:82
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20400098:	00004297          	auipc	t0,0x4
2040009c:	be428293          	addi	t0,t0,-1052 # 20403c7c <__init_array_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:83
  la t1, metal_segment_itim_target_start
204000a0:	e7c00317          	auipc	t1,0xe7c00
204000a4:	f6030313          	addi	t1,t1,-160 # 8000000 <metal_segment_itim_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:84
  la t2, metal_segment_itim_target_end
204000a8:	e7c00397          	auipc	t2,0xe7c00
204000ac:	f5838393          	addi	t2,t2,-168 # 8000000 <metal_segment_itim_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:86

  beq t0, t1, 2f
204000b0:	00628c63          	beq	t0,t1,204000c8 <_start+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  bge t1, t2, 2f
204000b4:	00735a63          	bge	t1,t2,204000c8 <_start+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:90

1:
  lw   a0, 0(t0)
204000b8:	0002a503          	lw	a0,0(t0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:91
  addi t0, t0, 4
204000bc:	0291                	addi	t0,t0,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:92
  sw   a0, 0(t1)
204000be:	00a32023          	sw	a0,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:93
  addi t1, t1, 4
204000c2:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:94
  blt  t1, t2, 1b
204000c4:	fe734ae3          	blt	t1,t2,204000b8 <_start+0x64>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:98
2:

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
204000c8:	5fc01317          	auipc	t1,0x5fc01
204000cc:	f4430313          	addi	t1,t1,-188 # 8000100c <__malloc_max_total_mem>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  la t2, metal_segment_bss_target_end
204000d0:	5fc01397          	auipc	t2,0x5fc01
204000d4:	f7838393          	addi	t2,t2,-136 # 80001048 <metal_segment_bss_target_end>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:101

  bge t1, t2, 2f
204000d8:	00735763          	bge	t1,t2,204000e6 <_start+0x92>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:104

1:
  sw   x0, 0(t1)
204000dc:	00032023          	sw	zero,0(t1)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:105
  addi t1, t1, 4
204000e0:	0311                	addi	t1,t1,4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:106
  blt  t1, t2, 1b
204000e2:	fe734de3          	blt	t1,t2,204000dc <_start+0x88>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
204000e6:	c211                	beqz	a2,204000ea <_start+0x96>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:113
  jalr a2
204000e8:	9602                	jalr	a2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:117
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
204000ea:	00002517          	auipc	a0,0x2
204000ee:	bce50513          	addi	a0,a0,-1074 # 20401cb8 <__libc_fini_array>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:118
  call atexit
204000f2:	393010ef          	jal	ra,20401c84 <atexit>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:119
  call __libc_init_array
204000f6:	3fd010ef          	jal	ra,20401cf2 <__libc_init_array>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:122

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
204000fa:	301027f3          	csrr	a5,misa
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:123
  li   a4, 0x10028
204000fe:	00010737          	lui	a4,0x10
20400102:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xfc28>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
  and  a5, a5, a4
20400106:	8ff9                	and	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:125
  beqz a5, 1f
20400108:	c799                	beqz	a5,20400116 <_start+0xc2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:126
  csrr a5, mstatus
2040010a:	300027f3          	csrr	a5,mstatus
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:127
  lui  a4, 0x2
2040010e:	6709                	lui	a4,0x2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  or   a5, a5, a4
20400110:	8fd9                	or	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:129
  csrw mstatus, a5
20400112:	30079073          	csrw	mstatus,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400116:	4505                	li	a0,1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  la a1, argv  /* argv = {"libgloss", NULL} */
20400118:	00004597          	auipc	a1,0x4
2040011c:	90058593          	addi	a1,a1,-1792 # 20403a18 <argv>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:137
  la a2, envp  /* envp = {NULL} */
20400120:	00004617          	auipc	a2,0x4
20400124:	8fc60613          	addi	a2,a2,-1796 # 20403a1c <envp>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:138
  call main
20400128:	28a1                	jal	20400180 <main>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:144

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040012a:	371010ef          	jal	ra,20401c9a <exit>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:149

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
2040012e:	80a2                	mv	ra,s0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:150
  ret
20400130:	8082                	ret

20400132 <_fini>:
_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/crt0.S:162
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400132:	8082                	ret

Disassembly of section .text:

20400180 <main>:
main():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/hello/hello.c:3
#include <stdio.h>

int main() {
20400180:	1141                	addi	sp,sp,-16
20400182:	c606                	sw	ra,12(sp)
20400184:	c422                	sw	s0,8(sp)
20400186:	0800                	addi	s0,sp,16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/hello/hello.c:4
    printf("Hello, World!\n");
20400188:	204047b7          	lui	a5,0x20404
2040018c:	a0478513          	addi	a0,a5,-1532 # 20403a04 <_exit+0x12>
20400190:	28bd                	jal	2040020e <puts>
20400192:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/software/hello/hello.c:5
}
20400194:	853e                	mv	a0,a5
20400196:	40b2                	lw	ra,12(sp)
20400198:	4422                	lw	s0,8(sp)
2040019a:	0141                	addi	sp,sp,16
2040019c:	8082                	ret

2040019e <_puts_r>:
_puts_r():
2040019e:	7139                	addi	sp,sp,-64
204001a0:	dc22                	sw	s0,56(sp)
204001a2:	842a                	mv	s0,a0
204001a4:	852e                	mv	a0,a1
204001a6:	c62e                	sw	a1,12(sp)
204001a8:	de06                	sw	ra,60(sp)
204001aa:	288d                	jal	2040021c <strlen>
204001ac:	00004797          	auipc	a5,0x4
204001b0:	86878793          	addi	a5,a5,-1944 # 20403a14 <_exit+0x22>
204001b4:	d43e                	sw	a5,40(sp)
204001b6:	4785                	li	a5,1
204001b8:	d63e                	sw	a5,44(sp)
204001ba:	101c                	addi	a5,sp,32
204001bc:	45b2                	lw	a1,12(sp)
204001be:	ca3e                	sw	a5,20(sp)
204001c0:	4789                	li	a5,2
204001c2:	cc3e                	sw	a5,24(sp)
204001c4:	5c1c                	lw	a5,56(s0)
204001c6:	d22a                	sw	a0,36(sp)
204001c8:	0505                	addi	a0,a0,1
204001ca:	d02e                	sw	a1,32(sp)
204001cc:	ce2a                	sw	a0,28(sp)
204001ce:	440c                	lw	a1,8(s0)
204001d0:	e789                	bnez	a5,204001da <_puts_r+0x3c>
204001d2:	8522                	mv	a0,s0
204001d4:	c62e                	sw	a1,12(sp)
204001d6:	220d                	jal	204002f8 <__sinit>
204001d8:	45b2                	lw	a1,12(sp)
204001da:	00c59783          	lh	a5,12(a1)
204001de:	01279713          	slli	a4,a5,0x12
204001e2:	00074b63          	bltz	a4,204001f8 <_puts_r+0x5a>
204001e6:	6689                	lui	a3,0x2
204001e8:	51f8                	lw	a4,100(a1)
204001ea:	8fd5                	or	a5,a5,a3
204001ec:	00f59623          	sh	a5,12(a1)
204001f0:	77f9                	lui	a5,0xffffe
204001f2:	17fd                	addi	a5,a5,-1
204001f4:	8ff9                	and	a5,a5,a4
204001f6:	d1fc                	sw	a5,100(a1)
204001f8:	0850                	addi	a2,sp,20
204001fa:	8522                	mv	a0,s0
204001fc:	2c19                	jal	20400412 <__sfvwrite_r>
204001fe:	57fd                	li	a5,-1
20400200:	e111                	bnez	a0,20400204 <_puts_r+0x66>
20400202:	47a9                	li	a5,10
20400204:	50f2                	lw	ra,60(sp)
20400206:	5462                	lw	s0,56(sp)
20400208:	853e                	mv	a0,a5
2040020a:	6121                	addi	sp,sp,64
2040020c:	8082                	ret

2040020e <puts>:
puts():
2040020e:	5fc01797          	auipc	a5,0x5fc01
20400212:	dda78793          	addi	a5,a5,-550 # 80000fe8 <_impure_ptr>
20400216:	85aa                	mv	a1,a0
20400218:	4388                	lw	a0,0(a5)
2040021a:	b751                	j	2040019e <_puts_r>

2040021c <strlen>:
strlen():
2040021c:	87aa                	mv	a5,a0
2040021e:	0785                	addi	a5,a5,1
20400220:	fff7c703          	lbu	a4,-1(a5)
20400224:	ff6d                	bnez	a4,2040021e <strlen+0x2>
20400226:	40a78533          	sub	a0,a5,a0
2040022a:	157d                	addi	a0,a0,-1
2040022c:	8082                	ret

2040022e <__fp_lock>:
__fp_lock():
2040022e:	4501                	li	a0,0
20400230:	8082                	ret

20400232 <std>:
std():
20400232:	1141                	addi	sp,sp,-16
20400234:	c422                	sw	s0,8(sp)
20400236:	c606                	sw	ra,12(sp)
20400238:	842a                	mv	s0,a0
2040023a:	00b51623          	sh	a1,12(a0)
2040023e:	00c51723          	sh	a2,14(a0)
20400242:	00052023          	sw	zero,0(a0)
20400246:	00052223          	sw	zero,4(a0)
2040024a:	00052423          	sw	zero,8(a0)
2040024e:	06052223          	sw	zero,100(a0)
20400252:	00052823          	sw	zero,16(a0)
20400256:	00052a23          	sw	zero,20(a0)
2040025a:	00052c23          	sw	zero,24(a0)
2040025e:	4621                	li	a2,8
20400260:	4581                	li	a1,0
20400262:	05c50513          	addi	a0,a0,92
20400266:	37d000ef          	jal	ra,20400de2 <memset>
2040026a:	00001797          	auipc	a5,0x1
2040026e:	fe078793          	addi	a5,a5,-32 # 2040124a <__sread>
20400272:	d01c                	sw	a5,32(s0)
20400274:	00001797          	auipc	a5,0x1
20400278:	00c78793          	addi	a5,a5,12 # 20401280 <__swrite>
2040027c:	d05c                	sw	a5,36(s0)
2040027e:	00001797          	auipc	a5,0x1
20400282:	05078793          	addi	a5,a5,80 # 204012ce <__sseek>
20400286:	d41c                	sw	a5,40(s0)
20400288:	00001797          	auipc	a5,0x1
2040028c:	07c78793          	addi	a5,a5,124 # 20401304 <__sclose>
20400290:	cc40                	sw	s0,28(s0)
20400292:	d45c                	sw	a5,44(s0)
20400294:	40b2                	lw	ra,12(sp)
20400296:	4422                	lw	s0,8(sp)
20400298:	0141                	addi	sp,sp,16
2040029a:	8082                	ret

2040029c <_cleanup_r>:
_cleanup_r():
2040029c:	00001597          	auipc	a1,0x1
204002a0:	1b058593          	addi	a1,a1,432 # 2040144c <_fclose_r>
204002a4:	a175                	j	20400750 <_fwalk_reent>

204002a6 <__fp_unlock>:
__fp_unlock():
204002a6:	4501                	li	a0,0
204002a8:	8082                	ret

204002aa <__sfmoreglue>:
__sfmoreglue():
204002aa:	1141                	addi	sp,sp,-16
204002ac:	c226                	sw	s1,4(sp)
204002ae:	06800613          	li	a2,104
204002b2:	fff58493          	addi	s1,a1,-1
204002b6:	02c484b3          	mul	s1,s1,a2
204002ba:	c04a                	sw	s2,0(sp)
204002bc:	892e                	mv	s2,a1
204002be:	c422                	sw	s0,8(sp)
204002c0:	c606                	sw	ra,12(sp)
204002c2:	07448593          	addi	a1,s1,116
204002c6:	29dd                	jal	204007bc <_malloc_r>
204002c8:	842a                	mv	s0,a0
204002ca:	cd01                	beqz	a0,204002e2 <__sfmoreglue+0x38>
204002cc:	00052023          	sw	zero,0(a0)
204002d0:	01252223          	sw	s2,4(a0)
204002d4:	0531                	addi	a0,a0,12
204002d6:	c408                	sw	a0,8(s0)
204002d8:	06848613          	addi	a2,s1,104
204002dc:	4581                	li	a1,0
204002de:	305000ef          	jal	ra,20400de2 <memset>
204002e2:	8522                	mv	a0,s0
204002e4:	40b2                	lw	ra,12(sp)
204002e6:	4422                	lw	s0,8(sp)
204002e8:	4492                	lw	s1,4(sp)
204002ea:	4902                	lw	s2,0(sp)
204002ec:	0141                	addi	sp,sp,16
204002ee:	8082                	ret

204002f0 <_cleanup>:
_cleanup():
204002f0:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
204002f4:	4388                	lw	a0,0(a5)
204002f6:	b75d                	j	2040029c <_cleanup_r>

204002f8 <__sinit>:
__sinit():
204002f8:	5d1c                	lw	a5,56(a0)
204002fa:	e7a9                	bnez	a5,20400344 <__sinit+0x4c>
204002fc:	1141                	addi	sp,sp,-16
204002fe:	c606                	sw	ra,12(sp)
20400300:	c422                	sw	s0,8(sp)
20400302:	00000797          	auipc	a5,0x0
20400306:	f9a78793          	addi	a5,a5,-102 # 2040029c <_cleanup_r>
2040030a:	dd5c                	sw	a5,60(a0)
2040030c:	478d                	li	a5,3
2040030e:	2ef52223          	sw	a5,740(a0)
20400312:	2ec50793          	addi	a5,a0,748
20400316:	842a                	mv	s0,a0
20400318:	2ef52423          	sw	a5,744(a0)
2040031c:	2e052023          	sw	zero,736(a0)
20400320:	4148                	lw	a0,4(a0)
20400322:	4601                	li	a2,0
20400324:	4591                	li	a1,4
20400326:	3731                	jal	20400232 <std>
20400328:	4408                	lw	a0,8(s0)
2040032a:	4605                	li	a2,1
2040032c:	45a5                	li	a1,9
2040032e:	3711                	jal	20400232 <std>
20400330:	4448                	lw	a0,12(s0)
20400332:	4609                	li	a2,2
20400334:	45c9                	li	a1,18
20400336:	3df5                	jal	20400232 <std>
20400338:	4785                	li	a5,1
2040033a:	dc1c                	sw	a5,56(s0)
2040033c:	40b2                	lw	ra,12(sp)
2040033e:	4422                	lw	s0,8(sp)
20400340:	0141                	addi	sp,sp,16
20400342:	8082                	ret
20400344:	8082                	ret

20400346 <__sfp>:
__sfp():
20400346:	1141                	addi	sp,sp,-16
20400348:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
2040034c:	c226                	sw	s1,4(sp)
2040034e:	4384                	lw	s1,0(a5)
20400350:	c04a                	sw	s2,0(sp)
20400352:	c606                	sw	ra,12(sp)
20400354:	5c9c                	lw	a5,56(s1)
20400356:	c422                	sw	s0,8(sp)
20400358:	892a                	mv	s2,a0
2040035a:	e399                	bnez	a5,20400360 <__sfp+0x1a>
2040035c:	8526                	mv	a0,s1
2040035e:	3f69                	jal	204002f8 <__sinit>
20400360:	2e048493          	addi	s1,s1,736
20400364:	4480                	lw	s0,8(s1)
20400366:	40dc                	lw	a5,4(s1)
20400368:	17fd                	addi	a5,a5,-1
2040036a:	0007d663          	bgez	a5,20400376 <__sfp+0x30>
2040036e:	409c                	lw	a5,0(s1)
20400370:	cfb9                	beqz	a5,204003ce <__sfp+0x88>
20400372:	4084                	lw	s1,0(s1)
20400374:	bfc5                	j	20400364 <__sfp+0x1e>
20400376:	00c41703          	lh	a4,12(s0)
2040037a:	e739                	bnez	a4,204003c8 <__sfp+0x82>
2040037c:	77c1                	lui	a5,0xffff0
2040037e:	0785                	addi	a5,a5,1
20400380:	06042223          	sw	zero,100(s0)
20400384:	00042023          	sw	zero,0(s0)
20400388:	00042223          	sw	zero,4(s0)
2040038c:	00042423          	sw	zero,8(s0)
20400390:	c45c                	sw	a5,12(s0)
20400392:	00042823          	sw	zero,16(s0)
20400396:	00042a23          	sw	zero,20(s0)
2040039a:	00042c23          	sw	zero,24(s0)
2040039e:	4621                	li	a2,8
204003a0:	4581                	li	a1,0
204003a2:	05c40513          	addi	a0,s0,92
204003a6:	23d000ef          	jal	ra,20400de2 <memset>
204003aa:	02042823          	sw	zero,48(s0)
204003ae:	02042a23          	sw	zero,52(s0)
204003b2:	04042223          	sw	zero,68(s0)
204003b6:	04042423          	sw	zero,72(s0)
204003ba:	8522                	mv	a0,s0
204003bc:	40b2                	lw	ra,12(sp)
204003be:	4422                	lw	s0,8(sp)
204003c0:	4492                	lw	s1,4(sp)
204003c2:	4902                	lw	s2,0(sp)
204003c4:	0141                	addi	sp,sp,16
204003c6:	8082                	ret
204003c8:	06840413          	addi	s0,s0,104
204003cc:	bf71                	j	20400368 <__sfp+0x22>
204003ce:	4591                	li	a1,4
204003d0:	854a                	mv	a0,s2
204003d2:	3de1                	jal	204002aa <__sfmoreglue>
204003d4:	c088                	sw	a0,0(s1)
204003d6:	fd51                	bnez	a0,20400372 <__sfp+0x2c>
204003d8:	47b1                	li	a5,12
204003da:	00f92023          	sw	a5,0(s2)
204003de:	4401                	li	s0,0
204003e0:	bfe9                	j	204003ba <__sfp+0x74>

204003e2 <__sfp_lock_acquire>:
__sfp_lock_acquire():
204003e2:	8082                	ret

204003e4 <__sfp_lock_release>:
__sfp_lock_release():
204003e4:	8082                	ret

204003e6 <__sinit_lock_acquire>:
__sinit_lock_acquire():
204003e6:	8082                	ret

204003e8 <__sinit_lock_release>:
__sinit_lock_release():
204003e8:	8082                	ret

204003ea <__fp_lock_all>:
__fp_lock_all():
204003ea:	5fc01797          	auipc	a5,0x5fc01
204003ee:	bfe78793          	addi	a5,a5,-1026 # 80000fe8 <_impure_ptr>
204003f2:	4388                	lw	a0,0(a5)
204003f4:	00000597          	auipc	a1,0x0
204003f8:	e3a58593          	addi	a1,a1,-454 # 2040022e <__fp_lock>
204003fc:	accd                	j	204006ee <_fwalk>

204003fe <__fp_unlock_all>:
__fp_unlock_all():
204003fe:	5fc01797          	auipc	a5,0x5fc01
20400402:	bea78793          	addi	a5,a5,-1046 # 80000fe8 <_impure_ptr>
20400406:	4388                	lw	a0,0(a5)
20400408:	00000597          	auipc	a1,0x0
2040040c:	e9e58593          	addi	a1,a1,-354 # 204002a6 <__fp_unlock>
20400410:	acf9                	j	204006ee <_fwalk>

20400412 <__sfvwrite_r>:
__sfvwrite_r():
20400412:	461c                	lw	a5,8(a2)
20400414:	e781                	bnez	a5,2040041c <__sfvwrite_r+0xa>
20400416:	4781                	li	a5,0
20400418:	853e                	mv	a0,a5
2040041a:	8082                	ret
2040041c:	00c5d783          	lhu	a5,12(a1)
20400420:	715d                	addi	sp,sp,-80
20400422:	c4a2                	sw	s0,72(sp)
20400424:	c0ca                	sw	s2,64(sp)
20400426:	da56                	sw	s5,52(sp)
20400428:	c686                	sw	ra,76(sp)
2040042a:	c2a6                	sw	s1,68(sp)
2040042c:	de4e                	sw	s3,60(sp)
2040042e:	dc52                	sw	s4,56(sp)
20400430:	d85a                	sw	s6,48(sp)
20400432:	d65e                	sw	s7,44(sp)
20400434:	d462                	sw	s8,40(sp)
20400436:	d266                	sw	s9,36(sp)
20400438:	d06a                	sw	s10,32(sp)
2040043a:	ce6e                	sw	s11,28(sp)
2040043c:	8ba1                	andi	a5,a5,8
2040043e:	8ab2                	mv	s5,a2
20400440:	842e                	mv	s0,a1
20400442:	892a                	mv	s2,a0
20400444:	cfd9                	beqz	a5,204004e2 <__sfvwrite_r+0xd0>
20400446:	499c                	lw	a5,16(a1)
20400448:	cfc9                	beqz	a5,204004e2 <__sfvwrite_r+0xd0>
2040044a:	00c45783          	lhu	a5,12(s0)
2040044e:	000aaa03          	lw	s4,0(s5)
20400452:	0027f713          	andi	a4,a5,2
20400456:	0e071863          	bnez	a4,20400546 <__sfvwrite_r+0x134>
2040045a:	8b85                	andi	a5,a5,1
2040045c:	16078063          	beqz	a5,204005bc <__sfvwrite_r+0x1aa>
20400460:	4b81                	li	s7,0
20400462:	4501                	li	a0,0
20400464:	4b01                	li	s6,0
20400466:	4981                	li	s3,0
20400468:	24098563          	beqz	s3,204006b2 <__sfvwrite_r+0x2a0>
2040046c:	ed01                	bnez	a0,20400484 <__sfvwrite_r+0x72>
2040046e:	864e                	mv	a2,s3
20400470:	45a9                	li	a1,10
20400472:	855a                	mv	a0,s6
20400474:	055000ef          	jal	ra,20400cc8 <memchr>
20400478:	00198b93          	addi	s7,s3,1
2040047c:	c501                	beqz	a0,20400484 <__sfvwrite_r+0x72>
2040047e:	0505                	addi	a0,a0,1
20400480:	41650bb3          	sub	s7,a0,s6
20400484:	8c5e                	mv	s8,s7
20400486:	0179f363          	bgeu	s3,s7,2040048c <__sfvwrite_r+0x7a>
2040048a:	8c4e                	mv	s8,s3
2040048c:	4008                	lw	a0,0(s0)
2040048e:	481c                	lw	a5,16(s0)
20400490:	4854                	lw	a3,20(s0)
20400492:	22a7f763          	bgeu	a5,a0,204006c0 <__sfvwrite_r+0x2ae>
20400496:	4404                	lw	s1,8(s0)
20400498:	94b6                	add	s1,s1,a3
2040049a:	2384d363          	bge	s1,s8,204006c0 <__sfvwrite_r+0x2ae>
2040049e:	85da                	mv	a1,s6
204004a0:	8626                	mv	a2,s1
204004a2:	0f7000ef          	jal	ra,20400d98 <memmove>
204004a6:	401c                	lw	a5,0(s0)
204004a8:	85a2                	mv	a1,s0
204004aa:	854a                	mv	a0,s2
204004ac:	97a6                	add	a5,a5,s1
204004ae:	c01c                	sw	a5,0(s0)
204004b0:	18a010ef          	jal	ra,2040163a <_fflush_r>
204004b4:	0e051c63          	bnez	a0,204005ac <__sfvwrite_r+0x19a>
204004b8:	409b8bb3          	sub	s7,s7,s1
204004bc:	4505                	li	a0,1
204004be:	000b9763          	bnez	s7,204004cc <__sfvwrite_r+0xba>
204004c2:	85a2                	mv	a1,s0
204004c4:	854a                	mv	a0,s2
204004c6:	174010ef          	jal	ra,2040163a <_fflush_r>
204004ca:	e16d                	bnez	a0,204005ac <__sfvwrite_r+0x19a>
204004cc:	008aa783          	lw	a5,8(s5)
204004d0:	9b26                	add	s6,s6,s1
204004d2:	409989b3          	sub	s3,s3,s1
204004d6:	409784b3          	sub	s1,a5,s1
204004da:	009aa423          	sw	s1,8(s5)
204004de:	f4c9                	bnez	s1,20400468 <__sfvwrite_r+0x56>
204004e0:	a091                	j	20400524 <__sfvwrite_r+0x112>
204004e2:	85a2                	mv	a1,s0
204004e4:	854a                	mv	a0,s2
204004e6:	65b000ef          	jal	ra,20401340 <__swsetup_r>
204004ea:	57fd                	li	a5,-1
204004ec:	dd39                	beqz	a0,2040044a <__sfvwrite_r+0x38>
204004ee:	a825                	j	20400526 <__sfvwrite_r+0x114>
204004f0:	000a2983          	lw	s3,0(s4)
204004f4:	004a2483          	lw	s1,4(s4)
204004f8:	0a21                	addi	s4,s4,8
204004fa:	d8fd                	beqz	s1,204004f0 <__sfvwrite_r+0xde>
204004fc:	86a6                	mv	a3,s1
204004fe:	009b7363          	bgeu	s6,s1,20400504 <__sfvwrite_r+0xf2>
20400502:	86da                	mv	a3,s6
20400504:	505c                	lw	a5,36(s0)
20400506:	4c4c                	lw	a1,28(s0)
20400508:	864e                	mv	a2,s3
2040050a:	854a                	mv	a0,s2
2040050c:	9782                	jalr	a5
2040050e:	08a05f63          	blez	a0,204005ac <__sfvwrite_r+0x19a>
20400512:	008aa783          	lw	a5,8(s5)
20400516:	99aa                	add	s3,s3,a0
20400518:	8c89                	sub	s1,s1,a0
2040051a:	40a78533          	sub	a0,a5,a0
2040051e:	00aaa423          	sw	a0,8(s5)
20400522:	fd61                	bnez	a0,204004fa <__sfvwrite_r+0xe8>
20400524:	4781                	li	a5,0
20400526:	40b6                	lw	ra,76(sp)
20400528:	4426                	lw	s0,72(sp)
2040052a:	4496                	lw	s1,68(sp)
2040052c:	4906                	lw	s2,64(sp)
2040052e:	59f2                	lw	s3,60(sp)
20400530:	5a62                	lw	s4,56(sp)
20400532:	5ad2                	lw	s5,52(sp)
20400534:	5b42                	lw	s6,48(sp)
20400536:	5bb2                	lw	s7,44(sp)
20400538:	5c22                	lw	s8,40(sp)
2040053a:	5c92                	lw	s9,36(sp)
2040053c:	5d02                	lw	s10,32(sp)
2040053e:	4df2                	lw	s11,28(sp)
20400540:	853e                	mv	a0,a5
20400542:	6161                	addi	sp,sp,80
20400544:	8082                	ret
20400546:	80000b37          	lui	s6,0x80000
2040054a:	4981                	li	s3,0
2040054c:	4481                	li	s1,0
2040054e:	c00b4b13          	xori	s6,s6,-1024
20400552:	b765                	j	204004fa <__sfvwrite_r+0xe8>
20400554:	000a2b03          	lw	s6,0(s4)
20400558:	004a2483          	lw	s1,4(s4)
2040055c:	0a21                	addi	s4,s4,8
2040055e:	d8fd                	beqz	s1,20400554 <__sfvwrite_r+0x142>
20400560:	00c45703          	lhu	a4,12(s0)
20400564:	441c                	lw	a5,8(s0)
20400566:	4008                	lw	a0,0(s0)
20400568:	20077693          	andi	a3,a4,512
2040056c:	0e068763          	beqz	a3,2040065a <__sfvwrite_r+0x248>
20400570:	08f4e863          	bltu	s1,a5,20400600 <__sfvwrite_r+0x1ee>
20400574:	48077693          	andi	a3,a4,1152
20400578:	c6c1                	beqz	a3,20400600 <__sfvwrite_r+0x1ee>
2040057a:	01442d83          	lw	s11,20(s0)
2040057e:	480c                	lw	a1,16(s0)
20400580:	03bc8db3          	mul	s11,s9,s11
20400584:	40b509b3          	sub	s3,a0,a1
20400588:	00198793          	addi	a5,s3,1
2040058c:	97a6                	add	a5,a5,s1
2040058e:	03adcdb3          	div	s11,s11,s10
20400592:	00fdf363          	bgeu	s11,a5,20400598 <__sfvwrite_r+0x186>
20400596:	8dbe                	mv	s11,a5
20400598:	40077713          	andi	a4,a4,1024
2040059c:	cf51                	beqz	a4,20400638 <__sfvwrite_r+0x226>
2040059e:	85ee                	mv	a1,s11
204005a0:	854a                	mv	a0,s2
204005a2:	2c29                	jal	204007bc <_malloc_r>
204005a4:	e51d                	bnez	a0,204005d2 <__sfvwrite_r+0x1c0>
204005a6:	47b1                	li	a5,12
204005a8:	00f92023          	sw	a5,0(s2)
204005ac:	00c45783          	lhu	a5,12(s0)
204005b0:	0407e793          	ori	a5,a5,64
204005b4:	00f41623          	sh	a5,12(s0)
204005b8:	57fd                	li	a5,-1
204005ba:	b7b5                	j	20400526 <__sfvwrite_r+0x114>
204005bc:	80000bb7          	lui	s7,0x80000
204005c0:	ffebcc13          	xori	s8,s7,-2
204005c4:	4b01                	li	s6,0
204005c6:	4481                	li	s1,0
204005c8:	fffbcb93          	not	s7,s7
204005cc:	4c8d                	li	s9,3
204005ce:	4d09                	li	s10,2
204005d0:	b779                	j	2040055e <__sfvwrite_r+0x14c>
204005d2:	480c                	lw	a1,16(s0)
204005d4:	864e                	mv	a2,s3
204005d6:	c62a                	sw	a0,12(sp)
204005d8:	2729                	jal	20400ce2 <memcpy>
204005da:	00c45703          	lhu	a4,12(s0)
204005de:	47b2                	lw	a5,12(sp)
204005e0:	b7f77713          	andi	a4,a4,-1153
204005e4:	08076713          	ori	a4,a4,128
204005e8:	00e41623          	sh	a4,12(s0)
204005ec:	c81c                	sw	a5,16(s0)
204005ee:	01b42a23          	sw	s11,20(s0)
204005f2:	97ce                	add	a5,a5,s3
204005f4:	413d8db3          	sub	s11,s11,s3
204005f8:	c01c                	sw	a5,0(s0)
204005fa:	01b42423          	sw	s11,8(s0)
204005fe:	87a6                	mv	a5,s1
20400600:	89a6                	mv	s3,s1
20400602:	00f4f363          	bgeu	s1,a5,20400608 <__sfvwrite_r+0x1f6>
20400606:	87a6                	mv	a5,s1
20400608:	4008                	lw	a0,0(s0)
2040060a:	863e                	mv	a2,a5
2040060c:	85da                	mv	a1,s6
2040060e:	c63e                	sw	a5,12(sp)
20400610:	2761                	jal	20400d98 <memmove>
20400612:	4418                	lw	a4,8(s0)
20400614:	47b2                	lw	a5,12(sp)
20400616:	8f1d                	sub	a4,a4,a5
20400618:	c418                	sw	a4,8(s0)
2040061a:	4018                	lw	a4,0(s0)
2040061c:	97ba                	add	a5,a5,a4
2040061e:	c01c                	sw	a5,0(s0)
20400620:	008aa783          	lw	a5,8(s5)
20400624:	9b4e                	add	s6,s6,s3
20400626:	413484b3          	sub	s1,s1,s3
2040062a:	413789b3          	sub	s3,a5,s3
2040062e:	013aa423          	sw	s3,8(s5)
20400632:	f20996e3          	bnez	s3,2040055e <__sfvwrite_r+0x14c>
20400636:	b5fd                	j	20400524 <__sfvwrite_r+0x112>
20400638:	866e                	mv	a2,s11
2040063a:	854a                	mv	a0,s2
2040063c:	053000ef          	jal	ra,20400e8e <_realloc_r>
20400640:	87aa                	mv	a5,a0
20400642:	f54d                	bnez	a0,204005ec <__sfvwrite_r+0x1da>
20400644:	480c                	lw	a1,16(s0)
20400646:	854a                	mv	a0,s2
20400648:	10e010ef          	jal	ra,20401756 <_free_r>
2040064c:	00c45783          	lhu	a5,12(s0)
20400650:	f7f7f793          	andi	a5,a5,-129
20400654:	00f41623          	sh	a5,12(s0)
20400658:	b7b9                	j	204005a6 <__sfvwrite_r+0x194>
2040065a:	4818                	lw	a4,16(s0)
2040065c:	00a76563          	bltu	a4,a0,20400666 <__sfvwrite_r+0x254>
20400660:	4854                	lw	a3,20(s0)
20400662:	02d4f763          	bgeu	s1,a3,20400690 <__sfvwrite_r+0x27e>
20400666:	89be                	mv	s3,a5
20400668:	00f4f363          	bgeu	s1,a5,2040066e <__sfvwrite_r+0x25c>
2040066c:	89a6                	mv	s3,s1
2040066e:	864e                	mv	a2,s3
20400670:	85da                	mv	a1,s6
20400672:	271d                	jal	20400d98 <memmove>
20400674:	441c                	lw	a5,8(s0)
20400676:	4018                	lw	a4,0(s0)
20400678:	413787b3          	sub	a5,a5,s3
2040067c:	974e                	add	a4,a4,s3
2040067e:	c41c                	sw	a5,8(s0)
20400680:	c018                	sw	a4,0(s0)
20400682:	ffd9                	bnez	a5,20400620 <__sfvwrite_r+0x20e>
20400684:	85a2                	mv	a1,s0
20400686:	854a                	mv	a0,s2
20400688:	7b3000ef          	jal	ra,2040163a <_fflush_r>
2040068c:	d951                	beqz	a0,20400620 <__sfvwrite_r+0x20e>
2040068e:	bf39                	j	204005ac <__sfvwrite_r+0x19a>
20400690:	87a6                	mv	a5,s1
20400692:	009c7363          	bgeu	s8,s1,20400698 <__sfvwrite_r+0x286>
20400696:	87de                	mv	a5,s7
20400698:	02d7c7b3          	div	a5,a5,a3
2040069c:	5058                	lw	a4,36(s0)
2040069e:	4c4c                	lw	a1,28(s0)
204006a0:	865a                	mv	a2,s6
204006a2:	854a                	mv	a0,s2
204006a4:	02d786b3          	mul	a3,a5,a3
204006a8:	9702                	jalr	a4
204006aa:	89aa                	mv	s3,a0
204006ac:	f6a04ae3          	bgtz	a0,20400620 <__sfvwrite_r+0x20e>
204006b0:	bdf5                	j	204005ac <__sfvwrite_r+0x19a>
204006b2:	000a2b03          	lw	s6,0(s4)
204006b6:	004a2983          	lw	s3,4(s4)
204006ba:	4501                	li	a0,0
204006bc:	0a21                	addi	s4,s4,8
204006be:	b36d                	j	20400468 <__sfvwrite_r+0x56>
204006c0:	00dc4b63          	blt	s8,a3,204006d6 <__sfvwrite_r+0x2c4>
204006c4:	505c                	lw	a5,36(s0)
204006c6:	4c4c                	lw	a1,28(s0)
204006c8:	865a                	mv	a2,s6
204006ca:	854a                	mv	a0,s2
204006cc:	9782                	jalr	a5
204006ce:	84aa                	mv	s1,a0
204006d0:	dea044e3          	bgtz	a0,204004b8 <__sfvwrite_r+0xa6>
204006d4:	bde1                	j	204005ac <__sfvwrite_r+0x19a>
204006d6:	8662                	mv	a2,s8
204006d8:	85da                	mv	a1,s6
204006da:	2d7d                	jal	20400d98 <memmove>
204006dc:	441c                	lw	a5,8(s0)
204006de:	84e2                	mv	s1,s8
204006e0:	418787b3          	sub	a5,a5,s8
204006e4:	c41c                	sw	a5,8(s0)
204006e6:	401c                	lw	a5,0(s0)
204006e8:	97e2                	add	a5,a5,s8
204006ea:	c01c                	sw	a5,0(s0)
204006ec:	b3f1                	j	204004b8 <__sfvwrite_r+0xa6>

204006ee <_fwalk>:
_fwalk():
204006ee:	7179                	addi	sp,sp,-48
204006f0:	d422                	sw	s0,40(sp)
204006f2:	d04a                	sw	s2,32(sp)
204006f4:	cc52                	sw	s4,24(sp)
204006f6:	ca56                	sw	s5,20(sp)
204006f8:	d606                	sw	ra,44(sp)
204006fa:	d226                	sw	s1,36(sp)
204006fc:	ce4e                	sw	s3,28(sp)
204006fe:	2e050413          	addi	s0,a0,736
20400702:	4901                	li	s2,0
20400704:	4a05                	li	s4,1
20400706:	5afd                	li	s5,-1
20400708:	e819                	bnez	s0,2040071e <_fwalk+0x30>
2040070a:	50b2                	lw	ra,44(sp)
2040070c:	5422                	lw	s0,40(sp)
2040070e:	854a                	mv	a0,s2
20400710:	5492                	lw	s1,36(sp)
20400712:	5902                	lw	s2,32(sp)
20400714:	49f2                	lw	s3,28(sp)
20400716:	4a62                	lw	s4,24(sp)
20400718:	4ad2                	lw	s5,20(sp)
2040071a:	6145                	addi	sp,sp,48
2040071c:	8082                	ret
2040071e:	4404                	lw	s1,8(s0)
20400720:	00442983          	lw	s3,4(s0)
20400724:	19fd                	addi	s3,s3,-1
20400726:	0009d463          	bgez	s3,2040072e <_fwalk+0x40>
2040072a:	4000                	lw	s0,0(s0)
2040072c:	bff1                	j	20400708 <_fwalk+0x1a>
2040072e:	00c4d783          	lhu	a5,12(s1)
20400732:	00fa7c63          	bgeu	s4,a5,2040074a <_fwalk+0x5c>
20400736:	00e49783          	lh	a5,14(s1)
2040073a:	01578863          	beq	a5,s5,2040074a <_fwalk+0x5c>
2040073e:	8526                	mv	a0,s1
20400740:	c62e                	sw	a1,12(sp)
20400742:	9582                	jalr	a1
20400744:	45b2                	lw	a1,12(sp)
20400746:	00a96933          	or	s2,s2,a0
2040074a:	06848493          	addi	s1,s1,104
2040074e:	bfd9                	j	20400724 <_fwalk+0x36>

20400750 <_fwalk_reent>:
_fwalk_reent():
20400750:	7179                	addi	sp,sp,-48
20400752:	d422                	sw	s0,40(sp)
20400754:	d04a                	sw	s2,32(sp)
20400756:	cc52                	sw	s4,24(sp)
20400758:	ca56                	sw	s5,20(sp)
2040075a:	c85a                	sw	s6,16(sp)
2040075c:	c65e                	sw	s7,12(sp)
2040075e:	d606                	sw	ra,44(sp)
20400760:	d226                	sw	s1,36(sp)
20400762:	ce4e                	sw	s3,28(sp)
20400764:	8a2a                	mv	s4,a0
20400766:	8aae                	mv	s5,a1
20400768:	2e050413          	addi	s0,a0,736
2040076c:	4901                	li	s2,0
2040076e:	4b05                	li	s6,1
20400770:	5bfd                	li	s7,-1
20400772:	ec09                	bnez	s0,2040078c <_fwalk_reent+0x3c>
20400774:	50b2                	lw	ra,44(sp)
20400776:	5422                	lw	s0,40(sp)
20400778:	854a                	mv	a0,s2
2040077a:	5492                	lw	s1,36(sp)
2040077c:	5902                	lw	s2,32(sp)
2040077e:	49f2                	lw	s3,28(sp)
20400780:	4a62                	lw	s4,24(sp)
20400782:	4ad2                	lw	s5,20(sp)
20400784:	4b42                	lw	s6,16(sp)
20400786:	4bb2                	lw	s7,12(sp)
20400788:	6145                	addi	sp,sp,48
2040078a:	8082                	ret
2040078c:	4404                	lw	s1,8(s0)
2040078e:	00442983          	lw	s3,4(s0)
20400792:	19fd                	addi	s3,s3,-1
20400794:	0009d463          	bgez	s3,2040079c <_fwalk_reent+0x4c>
20400798:	4000                	lw	s0,0(s0)
2040079a:	bfe1                	j	20400772 <_fwalk_reent+0x22>
2040079c:	00c4d783          	lhu	a5,12(s1)
204007a0:	00fb7b63          	bgeu	s6,a5,204007b6 <_fwalk_reent+0x66>
204007a4:	00e49783          	lh	a5,14(s1)
204007a8:	01778763          	beq	a5,s7,204007b6 <_fwalk_reent+0x66>
204007ac:	85a6                	mv	a1,s1
204007ae:	8552                	mv	a0,s4
204007b0:	9a82                	jalr	s5
204007b2:	00a96933          	or	s2,s2,a0
204007b6:	06848493          	addi	s1,s1,104
204007ba:	bfe1                	j	20400792 <_fwalk_reent+0x42>

204007bc <_malloc_r>:
_malloc_r():
204007bc:	7179                	addi	sp,sp,-48
204007be:	d606                	sw	ra,44(sp)
204007c0:	d422                	sw	s0,40(sp)
204007c2:	d226                	sw	s1,36(sp)
204007c4:	d04a                	sw	s2,32(sp)
204007c6:	ce4e                	sw	s3,28(sp)
204007c8:	cc52                	sw	s4,24(sp)
204007ca:	ca56                	sw	s5,20(sp)
204007cc:	c85a                	sw	s6,16(sp)
204007ce:	c65e                	sw	s7,12(sp)
204007d0:	c462                	sw	s8,8(sp)
204007d2:	c266                	sw	s9,4(sp)
204007d4:	00b58793          	addi	a5,a1,11
204007d8:	4759                	li	a4,22
204007da:	02f77663          	bgeu	a4,a5,20400806 <_malloc_r+0x4a>
204007de:	ff87f493          	andi	s1,a5,-8
204007e2:	0204d363          	bgez	s1,20400808 <_malloc_r+0x4c>
204007e6:	47b1                	li	a5,12
204007e8:	c11c                	sw	a5,0(a0)
204007ea:	4501                	li	a0,0
204007ec:	50b2                	lw	ra,44(sp)
204007ee:	5422                	lw	s0,40(sp)
204007f0:	5492                	lw	s1,36(sp)
204007f2:	5902                	lw	s2,32(sp)
204007f4:	49f2                	lw	s3,28(sp)
204007f6:	4a62                	lw	s4,24(sp)
204007f8:	4ad2                	lw	s5,20(sp)
204007fa:	4b42                	lw	s6,16(sp)
204007fc:	4bb2                	lw	s7,12(sp)
204007fe:	4c22                	lw	s8,8(sp)
20400800:	4c92                	lw	s9,4(sp)
20400802:	6145                	addi	sp,sp,48
20400804:	8082                	ret
20400806:	44c1                	li	s1,16
20400808:	fcb4efe3          	bltu	s1,a1,204007e6 <_malloc_r+0x2a>
2040080c:	892a                	mv	s2,a0
2040080e:	2db5                	jal	20400e8a <__malloc_lock>
20400810:	1f700793          	li	a5,503
20400814:	5fc00997          	auipc	s3,0x5fc00
20400818:	c1498993          	addi	s3,s3,-1004 # 80000428 <__malloc_av_>
2040081c:	0297ec63          	bltu	a5,s1,20400854 <_malloc_r+0x98>
20400820:	00848713          	addi	a4,s1,8
20400824:	974e                	add	a4,a4,s3
20400826:	4340                	lw	s0,4(a4)
20400828:	ff870693          	addi	a3,a4,-8 # 1ff8 <__heap_size+0x1bf8>
2040082c:	0034d793          	srli	a5,s1,0x3
20400830:	00d41663          	bne	s0,a3,2040083c <_malloc_r+0x80>
20400834:	4740                	lw	s0,12(a4)
20400836:	0789                	addi	a5,a5,2
20400838:	04870c63          	beq	a4,s0,20400890 <_malloc_r+0xd4>
2040083c:	405c                	lw	a5,4(s0)
2040083e:	4458                	lw	a4,12(s0)
20400840:	4414                	lw	a3,8(s0)
20400842:	9bf1                	andi	a5,a5,-4
20400844:	97a2                	add	a5,a5,s0
20400846:	c6d8                	sw	a4,12(a3)
20400848:	c714                	sw	a3,8(a4)
2040084a:	43d8                	lw	a4,4(a5)
2040084c:	00176713          	ori	a4,a4,1
20400850:	c3d8                	sw	a4,4(a5)
20400852:	a051                	j	204008d6 <_malloc_r+0x11a>
20400854:	0094d713          	srli	a4,s1,0x9
20400858:	03f00793          	li	a5,63
2040085c:	cb01                	beqz	a4,2040086c <_malloc_r+0xb0>
2040085e:	4791                	li	a5,4
20400860:	08e7e063          	bltu	a5,a4,204008e0 <_malloc_r+0x124>
20400864:	0064d793          	srli	a5,s1,0x6
20400868:	03878793          	addi	a5,a5,56
2040086c:	00178713          	addi	a4,a5,1
20400870:	070e                	slli	a4,a4,0x3
20400872:	974e                	add	a4,a4,s3
20400874:	4340                	lw	s0,4(a4)
20400876:	ff870593          	addi	a1,a4,-8
2040087a:	453d                	li	a0,15
2040087c:	00b40963          	beq	s0,a1,2040088e <_malloc_r+0xd2>
20400880:	4058                	lw	a4,4(s0)
20400882:	9b71                	andi	a4,a4,-4
20400884:	40970633          	sub	a2,a4,s1
20400888:	08c55f63          	bge	a0,a2,20400926 <_malloc_r+0x16a>
2040088c:	17fd                	addi	a5,a5,-1
2040088e:	0785                	addi	a5,a5,1
20400890:	0109a403          	lw	s0,16(s3)
20400894:	5fc00597          	auipc	a1,0x5fc00
20400898:	b9c58593          	addi	a1,a1,-1124 # 80000430 <__malloc_av_+0x8>
2040089c:	0eb40c63          	beq	s0,a1,20400994 <_malloc_r+0x1d8>
204008a0:	4058                	lw	a4,4(s0)
204008a2:	46bd                	li	a3,15
204008a4:	9b71                	andi	a4,a4,-4
204008a6:	40970633          	sub	a2,a4,s1
204008aa:	08c6d963          	bge	a3,a2,2040093c <_malloc_r+0x180>
204008ae:	0014e793          	ori	a5,s1,1
204008b2:	c05c                	sw	a5,4(s0)
204008b4:	009406b3          	add	a3,s0,s1
204008b8:	5fc00797          	auipc	a5,0x5fc00
204008bc:	b8d7a223          	sw	a3,-1148(a5) # 8000043c <__malloc_av_+0x14>
204008c0:	5fc00797          	auipc	a5,0x5fc00
204008c4:	b6d7ac23          	sw	a3,-1160(a5) # 80000438 <__malloc_av_+0x10>
204008c8:	00166793          	ori	a5,a2,1
204008cc:	c6cc                	sw	a1,12(a3)
204008ce:	c68c                	sw	a1,8(a3)
204008d0:	c2dc                	sw	a5,4(a3)
204008d2:	9722                	add	a4,a4,s0
204008d4:	c310                	sw	a2,0(a4)
204008d6:	854a                	mv	a0,s2
204008d8:	2b55                	jal	20400e8c <__malloc_unlock>
204008da:	00840513          	addi	a0,s0,8
204008de:	b739                	j	204007ec <_malloc_r+0x30>
204008e0:	47d1                	li	a5,20
204008e2:	00e7e563          	bltu	a5,a4,204008ec <_malloc_r+0x130>
204008e6:	05b70793          	addi	a5,a4,91
204008ea:	b749                	j	2040086c <_malloc_r+0xb0>
204008ec:	05400793          	li	a5,84
204008f0:	00e7e763          	bltu	a5,a4,204008fe <_malloc_r+0x142>
204008f4:	00c4d793          	srli	a5,s1,0xc
204008f8:	06e78793          	addi	a5,a5,110
204008fc:	bf85                	j	2040086c <_malloc_r+0xb0>
204008fe:	15400793          	li	a5,340
20400902:	00e7e763          	bltu	a5,a4,20400910 <_malloc_r+0x154>
20400906:	00f4d793          	srli	a5,s1,0xf
2040090a:	07778793          	addi	a5,a5,119
2040090e:	bfb9                	j	2040086c <_malloc_r+0xb0>
20400910:	55400693          	li	a3,1364
20400914:	07e00793          	li	a5,126
20400918:	f4e6eae3          	bltu	a3,a4,2040086c <_malloc_r+0xb0>
2040091c:	0124d793          	srli	a5,s1,0x12
20400920:	07c78793          	addi	a5,a5,124
20400924:	b7a1                	j	2040086c <_malloc_r+0xb0>
20400926:	4454                	lw	a3,12(s0)
20400928:	00064863          	bltz	a2,20400938 <_malloc_r+0x17c>
2040092c:	441c                	lw	a5,8(s0)
2040092e:	c7d4                	sw	a3,12(a5)
20400930:	c69c                	sw	a5,8(a3)
20400932:	00e407b3          	add	a5,s0,a4
20400936:	bf11                	j	2040084a <_malloc_r+0x8e>
20400938:	8436                	mv	s0,a3
2040093a:	b789                	j	2040087c <_malloc_r+0xc0>
2040093c:	5fc00697          	auipc	a3,0x5fc00
20400940:	b0b6a023          	sw	a1,-1280(a3) # 8000043c <__malloc_av_+0x14>
20400944:	5fc00697          	auipc	a3,0x5fc00
20400948:	aeb6aa23          	sw	a1,-1292(a3) # 80000438 <__malloc_av_+0x10>
2040094c:	00064863          	bltz	a2,2040095c <_malloc_r+0x1a0>
20400950:	9722                	add	a4,a4,s0
20400952:	435c                	lw	a5,4(a4)
20400954:	0017e793          	ori	a5,a5,1
20400958:	c35c                	sw	a5,4(a4)
2040095a:	bfb5                	j	204008d6 <_malloc_r+0x11a>
2040095c:	1ff00693          	li	a3,511
20400960:	0049a803          	lw	a6,4(s3)
20400964:	14e6e863          	bltu	a3,a4,20400ab4 <_malloc_r+0x2f8>
20400968:	830d                	srli	a4,a4,0x3
2040096a:	40275613          	srai	a2,a4,0x2
2040096e:	4685                	li	a3,1
20400970:	0705                	addi	a4,a4,1
20400972:	00c696b3          	sll	a3,a3,a2
20400976:	070e                	slli	a4,a4,0x3
20400978:	974e                	add	a4,a4,s3
2040097a:	0106e6b3          	or	a3,a3,a6
2040097e:	5fc00617          	auipc	a2,0x5fc00
20400982:	aad62723          	sw	a3,-1362(a2) # 8000042c <__malloc_av_+0x4>
20400986:	4314                	lw	a3,0(a4)
20400988:	ff870613          	addi	a2,a4,-8
2040098c:	c450                	sw	a2,12(s0)
2040098e:	c414                	sw	a3,8(s0)
20400990:	c300                	sw	s0,0(a4)
20400992:	c6c0                	sw	s0,12(a3)
20400994:	4027d713          	srai	a4,a5,0x2
20400998:	4305                	li	t1,1
2040099a:	00e31333          	sll	t1,t1,a4
2040099e:	0049a703          	lw	a4,4(s3)
204009a2:	04676e63          	bltu	a4,t1,204009fe <_malloc_r+0x242>
204009a6:	006776b3          	and	a3,a4,t1
204009aa:	e699                	bnez	a3,204009b8 <_malloc_r+0x1fc>
204009ac:	9bf1                	andi	a5,a5,-4
204009ae:	0306                	slli	t1,t1,0x1
204009b0:	006776b3          	and	a3,a4,t1
204009b4:	0791                	addi	a5,a5,4
204009b6:	dee5                	beqz	a3,204009ae <_malloc_r+0x1f2>
204009b8:	4e3d                	li	t3,15
204009ba:	00379693          	slli	a3,a5,0x3
204009be:	96ce                	add	a3,a3,s3
204009c0:	8836                	mv	a6,a3
204009c2:	853e                	mv	a0,a5
204009c4:	00c82403          	lw	s0,12(a6)
204009c8:	19041363          	bne	s0,a6,20400b4e <_malloc_r+0x392>
204009cc:	0505                	addi	a0,a0,1
204009ce:	00357713          	andi	a4,a0,3
204009d2:	0821                	addi	a6,a6,8
204009d4:	fb65                	bnez	a4,204009c4 <_malloc_r+0x208>
204009d6:	0037f713          	andi	a4,a5,3
204009da:	1c071763          	bnez	a4,20400ba8 <_malloc_r+0x3ec>
204009de:	0049a703          	lw	a4,4(s3)
204009e2:	fff34793          	not	a5,t1
204009e6:	8ff9                	and	a5,a5,a4
204009e8:	5fc00717          	auipc	a4,0x5fc00
204009ec:	a4f72223          	sw	a5,-1468(a4) # 8000042c <__malloc_av_+0x4>
204009f0:	0049a703          	lw	a4,4(s3)
204009f4:	0306                	slli	t1,t1,0x1
204009f6:	00676463          	bltu	a4,t1,204009fe <_malloc_r+0x242>
204009fa:	1c031363          	bnez	t1,20400bc0 <_malloc_r+0x404>
204009fe:	0089ab83          	lw	s7,8(s3)
20400a02:	004ba403          	lw	s0,4(s7) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20400a06:	ffc47a93          	andi	s5,s0,-4
20400a0a:	009ae763          	bltu	s5,s1,20400a18 <_malloc_r+0x25c>
20400a0e:	409a8733          	sub	a4,s5,s1
20400a12:	47bd                	li	a5,15
20400a14:	28e7ce63          	blt	a5,a4,20400cb0 <_malloc_r+0x4f4>
20400a18:	5fc00797          	auipc	a5,0x5fc00
20400a1c:	5fc78793          	addi	a5,a5,1532 # 80001014 <__malloc_top_pad>
20400a20:	5fc00717          	auipc	a4,0x5fc00
20400a24:	5cc70713          	addi	a4,a4,1484 # 80000fec <__malloc_sbrk_base>
20400a28:	4380                	lw	s0,0(a5)
20400a2a:	4314                	lw	a3,0(a4)
20400a2c:	57fd                	li	a5,-1
20400a2e:	015b8c33          	add	s8,s7,s5
20400a32:	9426                	add	s0,s0,s1
20400a34:	8a3a                	mv	s4,a4
20400a36:	18f69763          	bne	a3,a5,20400bc4 <_malloc_r+0x408>
20400a3a:	0441                	addi	s0,s0,16
20400a3c:	85a2                	mv	a1,s0
20400a3e:	854a                	mv	a0,s2
20400a40:	7d8000ef          	jal	ra,20401218 <_sbrk_r>
20400a44:	57fd                	li	a5,-1
20400a46:	8b2a                	mv	s6,a0
20400a48:	20f50863          	beq	a0,a5,20400c58 <_malloc_r+0x49c>
20400a4c:	01857463          	bgeu	a0,s8,20400a54 <_malloc_r+0x298>
20400a50:	213b9463          	bne	s7,s3,20400c58 <_malloc_r+0x49c>
20400a54:	5fc00c97          	auipc	s9,0x5fc00
20400a58:	5c4c8c93          	addi	s9,s9,1476 # 80001018 <__malloc_current_mallinfo>
20400a5c:	000ca703          	lw	a4,0(s9)
20400a60:	9722                	add	a4,a4,s0
20400a62:	5fc00797          	auipc	a5,0x5fc00
20400a66:	5ae7ab23          	sw	a4,1462(a5) # 80001018 <__malloc_current_mallinfo>
20400a6a:	176c1363          	bne	s8,s6,20400bd0 <_malloc_r+0x414>
20400a6e:	014c1793          	slli	a5,s8,0x14
20400a72:	14079f63          	bnez	a5,20400bd0 <_malloc_r+0x414>
20400a76:	0089a783          	lw	a5,8(s3)
20400a7a:	9456                	add	s0,s0,s5
20400a7c:	00146413          	ori	s0,s0,1
20400a80:	c3c0                	sw	s0,4(a5)
20400a82:	5fc00717          	auipc	a4,0x5fc00
20400a86:	58e70713          	addi	a4,a4,1422 # 80001010 <__malloc_max_sbrked_mem>
20400a8a:	000ca783          	lw	a5,0(s9)
20400a8e:	4318                	lw	a4,0(a4)
20400a90:	00f77663          	bgeu	a4,a5,20400a9c <_malloc_r+0x2e0>
20400a94:	5fc00717          	auipc	a4,0x5fc00
20400a98:	56f72e23          	sw	a5,1404(a4) # 80001010 <__malloc_max_sbrked_mem>
20400a9c:	5fc00717          	auipc	a4,0x5fc00
20400aa0:	57070713          	addi	a4,a4,1392 # 8000100c <__malloc_max_total_mem>
20400aa4:	4318                	lw	a4,0(a4)
20400aa6:	1af77963          	bgeu	a4,a5,20400c58 <_malloc_r+0x49c>
20400aaa:	5fc00717          	auipc	a4,0x5fc00
20400aae:	56f72123          	sw	a5,1378(a4) # 8000100c <__malloc_max_total_mem>
20400ab2:	a25d                	j	20400c58 <_malloc_r+0x49c>
20400ab4:	00975613          	srli	a2,a4,0x9
20400ab8:	4691                	li	a3,4
20400aba:	02c6ee63          	bltu	a3,a2,20400af6 <_malloc_r+0x33a>
20400abe:	00675693          	srli	a3,a4,0x6
20400ac2:	03868693          	addi	a3,a3,56
20400ac6:	00168613          	addi	a2,a3,1
20400aca:	060e                	slli	a2,a2,0x3
20400acc:	964e                	add	a2,a2,s3
20400ace:	ff860513          	addi	a0,a2,-8
20400ad2:	4210                	lw	a2,0(a2)
20400ad4:	06c51763          	bne	a0,a2,20400b42 <_malloc_r+0x386>
20400ad8:	4705                	li	a4,1
20400ada:	8689                	srai	a3,a3,0x2
20400adc:	00d716b3          	sll	a3,a4,a3
20400ae0:	0106e6b3          	or	a3,a3,a6
20400ae4:	5fc00717          	auipc	a4,0x5fc00
20400ae8:	94d72423          	sw	a3,-1720(a4) # 8000042c <__malloc_av_+0x4>
20400aec:	c448                	sw	a0,12(s0)
20400aee:	c410                	sw	a2,8(s0)
20400af0:	c500                	sw	s0,8(a0)
20400af2:	c640                	sw	s0,12(a2)
20400af4:	b545                	j	20400994 <_malloc_r+0x1d8>
20400af6:	46d1                	li	a3,20
20400af8:	00c6e563          	bltu	a3,a2,20400b02 <_malloc_r+0x346>
20400afc:	05b60693          	addi	a3,a2,91
20400b00:	b7d9                	j	20400ac6 <_malloc_r+0x30a>
20400b02:	05400693          	li	a3,84
20400b06:	00c6e763          	bltu	a3,a2,20400b14 <_malloc_r+0x358>
20400b0a:	00c75693          	srli	a3,a4,0xc
20400b0e:	06e68693          	addi	a3,a3,110
20400b12:	bf55                	j	20400ac6 <_malloc_r+0x30a>
20400b14:	15400693          	li	a3,340
20400b18:	00c6e763          	bltu	a3,a2,20400b26 <_malloc_r+0x36a>
20400b1c:	00f75693          	srli	a3,a4,0xf
20400b20:	07768693          	addi	a3,a3,119
20400b24:	b74d                	j	20400ac6 <_malloc_r+0x30a>
20400b26:	55400513          	li	a0,1364
20400b2a:	07e00693          	li	a3,126
20400b2e:	f8c56ce3          	bltu	a0,a2,20400ac6 <_malloc_r+0x30a>
20400b32:	01275693          	srli	a3,a4,0x12
20400b36:	07c68693          	addi	a3,a3,124
20400b3a:	b771                	j	20400ac6 <_malloc_r+0x30a>
20400b3c:	4610                	lw	a2,8(a2)
20400b3e:	00c50663          	beq	a0,a2,20400b4a <_malloc_r+0x38e>
20400b42:	4254                	lw	a3,4(a2)
20400b44:	9af1                	andi	a3,a3,-4
20400b46:	fed76be3          	bltu	a4,a3,20400b3c <_malloc_r+0x380>
20400b4a:	4648                	lw	a0,12(a2)
20400b4c:	b745                	j	20400aec <_malloc_r+0x330>
20400b4e:	4058                	lw	a4,4(s0)
20400b50:	4450                	lw	a2,12(s0)
20400b52:	9b71                	andi	a4,a4,-4
20400b54:	409708b3          	sub	a7,a4,s1
20400b58:	031e5b63          	bge	t3,a7,20400b8e <_malloc_r+0x3d2>
20400b5c:	0014e793          	ori	a5,s1,1
20400b60:	c05c                	sw	a5,4(s0)
20400b62:	441c                	lw	a5,8(s0)
20400b64:	009406b3          	add	a3,s0,s1
20400b68:	9722                	add	a4,a4,s0
20400b6a:	c7d0                	sw	a2,12(a5)
20400b6c:	c61c                	sw	a5,8(a2)
20400b6e:	5fc00797          	auipc	a5,0x5fc00
20400b72:	8cd7a723          	sw	a3,-1842(a5) # 8000043c <__malloc_av_+0x14>
20400b76:	5fc00797          	auipc	a5,0x5fc00
20400b7a:	8cd7a123          	sw	a3,-1854(a5) # 80000438 <__malloc_av_+0x10>
20400b7e:	0018e793          	ori	a5,a7,1
20400b82:	c6cc                	sw	a1,12(a3)
20400b84:	c68c                	sw	a1,8(a3)
20400b86:	c2dc                	sw	a5,4(a3)
20400b88:	01172023          	sw	a7,0(a4)
20400b8c:	b3a9                	j	204008d6 <_malloc_r+0x11a>
20400b8e:	0008cb63          	bltz	a7,20400ba4 <_malloc_r+0x3e8>
20400b92:	9722                	add	a4,a4,s0
20400b94:	435c                	lw	a5,4(a4)
20400b96:	0017e793          	ori	a5,a5,1
20400b9a:	c35c                	sw	a5,4(a4)
20400b9c:	441c                	lw	a5,8(s0)
20400b9e:	c7d0                	sw	a2,12(a5)
20400ba0:	c61c                	sw	a5,8(a2)
20400ba2:	bb15                	j	204008d6 <_malloc_r+0x11a>
20400ba4:	8432                	mv	s0,a2
20400ba6:	b50d                	j	204009c8 <_malloc_r+0x20c>
20400ba8:	16e1                	addi	a3,a3,-8
20400baa:	4698                	lw	a4,8(a3)
20400bac:	17fd                	addi	a5,a5,-1
20400bae:	e2d704e3          	beq	a4,a3,204009d6 <_malloc_r+0x21a>
20400bb2:	bd3d                	j	204009f0 <_malloc_r+0x234>
20400bb4:	0791                	addi	a5,a5,4
20400bb6:	0306                	slli	t1,t1,0x1
20400bb8:	006776b3          	and	a3,a4,t1
20400bbc:	dee5                	beqz	a3,20400bb4 <_malloc_r+0x3f8>
20400bbe:	bbf5                	j	204009ba <_malloc_r+0x1fe>
20400bc0:	87aa                	mv	a5,a0
20400bc2:	bfdd                	j	20400bb8 <_malloc_r+0x3fc>
20400bc4:	6705                	lui	a4,0x1
20400bc6:	073d                	addi	a4,a4,15
20400bc8:	943a                	add	s0,s0,a4
20400bca:	77fd                	lui	a5,0xfffff
20400bcc:	8c7d                	and	s0,s0,a5
20400bce:	b5bd                	j	20400a3c <_malloc_r+0x280>
20400bd0:	000a2683          	lw	a3,0(s4)
20400bd4:	57fd                	li	a5,-1
20400bd6:	08f69f63          	bne	a3,a5,20400c74 <_malloc_r+0x4b8>
20400bda:	5fc00797          	auipc	a5,0x5fc00
20400bde:	4167a923          	sw	s6,1042(a5) # 80000fec <__malloc_sbrk_base>
20400be2:	007b7c13          	andi	s8,s6,7
20400be6:	4781                	li	a5,0
20400be8:	000c0663          	beqz	s8,20400bf4 <_malloc_r+0x438>
20400bec:	47a1                	li	a5,8
20400bee:	418787b3          	sub	a5,a5,s8
20400bf2:	9b3e                	add	s6,s6,a5
20400bf4:	6505                	lui	a0,0x1
20400bf6:	00a78a33          	add	s4,a5,a0
20400bfa:	945a                	add	s0,s0,s6
20400bfc:	157d                	addi	a0,a0,-1
20400bfe:	00a477b3          	and	a5,s0,a0
20400c02:	40fa0a33          	sub	s4,s4,a5
20400c06:	00aa7a33          	and	s4,s4,a0
20400c0a:	85d2                	mv	a1,s4
20400c0c:	854a                	mv	a0,s2
20400c0e:	2529                	jal	20401218 <_sbrk_r>
20400c10:	57fd                	li	a5,-1
20400c12:	00f51963          	bne	a0,a5,20400c24 <_malloc_r+0x468>
20400c16:	8522                	mv	a0,s0
20400c18:	000c0563          	beqz	s8,20400c22 <_malloc_r+0x466>
20400c1c:	ff8c0513          	addi	a0,s8,-8
20400c20:	9522                	add	a0,a0,s0
20400c22:	4a01                	li	s4,0
20400c24:	000ca783          	lw	a5,0(s9)
20400c28:	41650533          	sub	a0,a0,s6
20400c2c:	97d2                	add	a5,a5,s4
20400c2e:	9a2a                	add	s4,s4,a0
20400c30:	5fc00717          	auipc	a4,0x5fc00
20400c34:	3ef72423          	sw	a5,1000(a4) # 80001018 <__malloc_current_mallinfo>
20400c38:	001a6a13          	ori	s4,s4,1
20400c3c:	5fbff797          	auipc	a5,0x5fbff
20400c40:	7f67aa23          	sw	s6,2036(a5) # 80000430 <__malloc_av_+0x8>
20400c44:	014b2223          	sw	s4,4(s6) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20400c48:	e33b8de3          	beq	s7,s3,20400a82 <_malloc_r+0x2c6>
20400c4c:	473d                	li	a4,15
20400c4e:	03576b63          	bltu	a4,s5,20400c84 <_malloc_r+0x4c8>
20400c52:	4785                	li	a5,1
20400c54:	00fb2223          	sw	a5,4(s6)
20400c58:	0089a783          	lw	a5,8(s3)
20400c5c:	43dc                	lw	a5,4(a5)
20400c5e:	9bf1                	andi	a5,a5,-4
20400c60:	40978733          	sub	a4,a5,s1
20400c64:	0097e563          	bltu	a5,s1,20400c6e <_malloc_r+0x4b2>
20400c68:	47bd                	li	a5,15
20400c6a:	04e7c363          	blt	a5,a4,20400cb0 <_malloc_r+0x4f4>
20400c6e:	854a                	mv	a0,s2
20400c70:	2c31                	jal	20400e8c <__malloc_unlock>
20400c72:	bea5                	j	204007ea <_malloc_r+0x2e>
20400c74:	418b07b3          	sub	a5,s6,s8
20400c78:	97ba                	add	a5,a5,a4
20400c7a:	5fc00717          	auipc	a4,0x5fc00
20400c7e:	38f72f23          	sw	a5,926(a4) # 80001018 <__malloc_current_mallinfo>
20400c82:	b785                	j	20400be2 <_malloc_r+0x426>
20400c84:	004ba783          	lw	a5,4(s7)
20400c88:	ff4a8413          	addi	s0,s5,-12
20400c8c:	9861                	andi	s0,s0,-8
20400c8e:	8b85                	andi	a5,a5,1
20400c90:	8fc1                	or	a5,a5,s0
20400c92:	00fba223          	sw	a5,4(s7)
20400c96:	4695                	li	a3,5
20400c98:	008b87b3          	add	a5,s7,s0
20400c9c:	c3d4                	sw	a3,4(a5)
20400c9e:	c794                	sw	a3,8(a5)
20400ca0:	de8771e3          	bgeu	a4,s0,20400a82 <_malloc_r+0x2c6>
20400ca4:	008b8593          	addi	a1,s7,8
20400ca8:	854a                	mv	a0,s2
20400caa:	2ad000ef          	jal	ra,20401756 <_free_r>
20400cae:	bbd1                	j	20400a82 <_malloc_r+0x2c6>
20400cb0:	0089a403          	lw	s0,8(s3)
20400cb4:	0014e793          	ori	a5,s1,1
20400cb8:	c05c                	sw	a5,4(s0)
20400cba:	009407b3          	add	a5,s0,s1
20400cbe:	5fbff697          	auipc	a3,0x5fbff
20400cc2:	76f6a923          	sw	a5,1906(a3) # 80000430 <__malloc_av_+0x8>
20400cc6:	b659                	j	2040084c <_malloc_r+0x90>

20400cc8 <memchr>:
memchr():
20400cc8:	0ff5f593          	andi	a1,a1,255
20400ccc:	962a                	add	a2,a2,a0
20400cce:	00c51463          	bne	a0,a2,20400cd6 <memchr+0xe>
20400cd2:	4501                	li	a0,0
20400cd4:	8082                	ret
20400cd6:	00054783          	lbu	a5,0(a0) # 1000 <__heap_size+0xc00>
20400cda:	feb78de3          	beq	a5,a1,20400cd4 <memchr+0xc>
20400cde:	0505                	addi	a0,a0,1
20400ce0:	b7fd                	j	20400cce <memchr+0x6>

20400ce2 <memcpy>:
memcpy():
20400ce2:	00a5c7b3          	xor	a5,a1,a0
20400ce6:	8b8d                	andi	a5,a5,3
20400ce8:	00c50733          	add	a4,a0,a2
20400cec:	e781                	bnez	a5,20400cf4 <memcpy+0x12>
20400cee:	478d                	li	a5,3
20400cf0:	00c7ee63          	bltu	a5,a2,20400d0c <memcpy+0x2a>
20400cf4:	87aa                	mv	a5,a0
20400cf6:	0ae57063          	bgeu	a0,a4,20400d96 <memcpy+0xb4>
20400cfa:	0005c683          	lbu	a3,0(a1)
20400cfe:	0785                	addi	a5,a5,1
20400d00:	0585                	addi	a1,a1,1
20400d02:	fed78fa3          	sb	a3,-1(a5)
20400d06:	fee7eae3          	bltu	a5,a4,20400cfa <memcpy+0x18>
20400d0a:	8082                	ret
20400d0c:	00357693          	andi	a3,a0,3
20400d10:	87aa                	mv	a5,a0
20400d12:	ca91                	beqz	a3,20400d26 <memcpy+0x44>
20400d14:	0005c683          	lbu	a3,0(a1)
20400d18:	0785                	addi	a5,a5,1
20400d1a:	0585                	addi	a1,a1,1
20400d1c:	fed78fa3          	sb	a3,-1(a5)
20400d20:	0037f693          	andi	a3,a5,3
20400d24:	b7fd                	j	20400d12 <memcpy+0x30>
20400d26:	ffc77693          	andi	a3,a4,-4
20400d2a:	fe068613          	addi	a2,a3,-32
20400d2e:	06c7f063          	bgeu	a5,a2,20400d8e <memcpy+0xac>
20400d32:	0005a383          	lw	t2,0(a1)
20400d36:	0045a283          	lw	t0,4(a1)
20400d3a:	0085af83          	lw	t6,8(a1)
20400d3e:	00c5af03          	lw	t5,12(a1)
20400d42:	0105ae83          	lw	t4,16(a1)
20400d46:	0145ae03          	lw	t3,20(a1)
20400d4a:	0185a303          	lw	t1,24(a1)
20400d4e:	01c5a883          	lw	a7,28(a1)
20400d52:	02458593          	addi	a1,a1,36
20400d56:	0077a023          	sw	t2,0(a5)
20400d5a:	ffc5a803          	lw	a6,-4(a1)
20400d5e:	0057a223          	sw	t0,4(a5)
20400d62:	01f7a423          	sw	t6,8(a5)
20400d66:	01e7a623          	sw	t5,12(a5)
20400d6a:	01d7a823          	sw	t4,16(a5)
20400d6e:	01c7aa23          	sw	t3,20(a5)
20400d72:	0067ac23          	sw	t1,24(a5)
20400d76:	0117ae23          	sw	a7,28(a5)
20400d7a:	02478793          	addi	a5,a5,36
20400d7e:	ff07ae23          	sw	a6,-4(a5)
20400d82:	b775                	j	20400d2e <memcpy+0x4c>
20400d84:	4190                	lw	a2,0(a1)
20400d86:	0791                	addi	a5,a5,4
20400d88:	0591                	addi	a1,a1,4
20400d8a:	fec7ae23          	sw	a2,-4(a5)
20400d8e:	fed7ebe3          	bltu	a5,a3,20400d84 <memcpy+0xa2>
20400d92:	f6e7e4e3          	bltu	a5,a4,20400cfa <memcpy+0x18>
20400d96:	8082                	ret

20400d98 <memmove>:
memmove():
20400d98:	04a5f363          	bgeu	a1,a0,20400dde <memmove+0x46>
20400d9c:	00c586b3          	add	a3,a1,a2
20400da0:	02d57f63          	bgeu	a0,a3,20400dde <memmove+0x46>
20400da4:	fff64593          	not	a1,a2
20400da8:	4781                	li	a5,0
20400daa:	17fd                	addi	a5,a5,-1
20400dac:	00f59363          	bne	a1,a5,20400db2 <memmove+0x1a>
20400db0:	8082                	ret
20400db2:	00f68733          	add	a4,a3,a5
20400db6:	00074803          	lbu	a6,0(a4)
20400dba:	00c78733          	add	a4,a5,a2
20400dbe:	972a                	add	a4,a4,a0
20400dc0:	01070023          	sb	a6,0(a4)
20400dc4:	b7dd                	j	20400daa <memmove+0x12>
20400dc6:	00f58733          	add	a4,a1,a5
20400dca:	00074683          	lbu	a3,0(a4)
20400dce:	00f50733          	add	a4,a0,a5
20400dd2:	0785                	addi	a5,a5,1
20400dd4:	00d70023          	sb	a3,0(a4)
20400dd8:	fef617e3          	bne	a2,a5,20400dc6 <memmove+0x2e>
20400ddc:	8082                	ret
20400dde:	4781                	li	a5,0
20400de0:	bfe5                	j	20400dd8 <memmove+0x40>

20400de2 <memset>:
memset():
20400de2:	433d                	li	t1,15
20400de4:	872a                	mv	a4,a0
20400de6:	02c37363          	bgeu	t1,a2,20400e0c <memset+0x2a>
20400dea:	00f77793          	andi	a5,a4,15
20400dee:	efbd                	bnez	a5,20400e6c <memset+0x8a>
20400df0:	e5ad                	bnez	a1,20400e5a <memset+0x78>
20400df2:	ff067693          	andi	a3,a2,-16
20400df6:	8a3d                	andi	a2,a2,15
20400df8:	96ba                	add	a3,a3,a4
20400dfa:	c30c                	sw	a1,0(a4)
20400dfc:	c34c                	sw	a1,4(a4)
20400dfe:	c70c                	sw	a1,8(a4)
20400e00:	c74c                	sw	a1,12(a4)
20400e02:	0741                	addi	a4,a4,16
20400e04:	fed76be3          	bltu	a4,a3,20400dfa <memset+0x18>
20400e08:	e211                	bnez	a2,20400e0c <memset+0x2a>
20400e0a:	8082                	ret
20400e0c:	40c306b3          	sub	a3,t1,a2
20400e10:	068a                	slli	a3,a3,0x2
20400e12:	00000297          	auipc	t0,0x0
20400e16:	9696                	add	a3,a3,t0
20400e18:	00a68067          	jr	10(a3)
20400e1c:	00b70723          	sb	a1,14(a4)
20400e20:	00b706a3          	sb	a1,13(a4)
20400e24:	00b70623          	sb	a1,12(a4)
20400e28:	00b705a3          	sb	a1,11(a4)
20400e2c:	00b70523          	sb	a1,10(a4)
20400e30:	00b704a3          	sb	a1,9(a4)
20400e34:	00b70423          	sb	a1,8(a4)
20400e38:	00b703a3          	sb	a1,7(a4)
20400e3c:	00b70323          	sb	a1,6(a4)
20400e40:	00b702a3          	sb	a1,5(a4)
20400e44:	00b70223          	sb	a1,4(a4)
20400e48:	00b701a3          	sb	a1,3(a4)
20400e4c:	00b70123          	sb	a1,2(a4)
20400e50:	00b700a3          	sb	a1,1(a4)
20400e54:	00b70023          	sb	a1,0(a4)
20400e58:	8082                	ret
20400e5a:	0ff5f593          	andi	a1,a1,255
20400e5e:	00859693          	slli	a3,a1,0x8
20400e62:	8dd5                	or	a1,a1,a3
20400e64:	01059693          	slli	a3,a1,0x10
20400e68:	8dd5                	or	a1,a1,a3
20400e6a:	b761                	j	20400df2 <memset+0x10>
20400e6c:	00279693          	slli	a3,a5,0x2
20400e70:	00000297          	auipc	t0,0x0
20400e74:	9696                	add	a3,a3,t0
20400e76:	8286                	mv	t0,ra
20400e78:	fa8680e7          	jalr	-88(a3)
20400e7c:	8096                	mv	ra,t0
20400e7e:	17c1                	addi	a5,a5,-16
20400e80:	8f1d                	sub	a4,a4,a5
20400e82:	963e                	add	a2,a2,a5
20400e84:	f8c374e3          	bgeu	t1,a2,20400e0c <memset+0x2a>
20400e88:	b7a5                	j	20400df0 <memset+0xe>

20400e8a <__malloc_lock>:
__malloc_lock():
20400e8a:	8082                	ret

20400e8c <__malloc_unlock>:
__malloc_unlock():
20400e8c:	8082                	ret

20400e8e <_realloc_r>:
_realloc_r():
20400e8e:	7139                	addi	sp,sp,-64
20400e90:	dc22                	sw	s0,56(sp)
20400e92:	de06                	sw	ra,60(sp)
20400e94:	842e                	mv	s0,a1
20400e96:	da26                	sw	s1,52(sp)
20400e98:	d84a                	sw	s2,48(sp)
20400e9a:	d64e                	sw	s3,44(sp)
20400e9c:	d452                	sw	s4,40(sp)
20400e9e:	d256                	sw	s5,36(sp)
20400ea0:	d05a                	sw	s6,32(sp)
20400ea2:	ce5e                	sw	s7,28(sp)
20400ea4:	85b2                	mv	a1,a2
20400ea6:	ec01                	bnez	s0,20400ebe <_realloc_r+0x30>
20400ea8:	5462                	lw	s0,56(sp)
20400eaa:	50f2                	lw	ra,60(sp)
20400eac:	54d2                	lw	s1,52(sp)
20400eae:	5942                	lw	s2,48(sp)
20400eb0:	59b2                	lw	s3,44(sp)
20400eb2:	5a22                	lw	s4,40(sp)
20400eb4:	5a92                	lw	s5,36(sp)
20400eb6:	5b02                	lw	s6,32(sp)
20400eb8:	4bf2                	lw	s7,28(sp)
20400eba:	6121                	addi	sp,sp,64
20400ebc:	b201                	j	204007bc <_malloc_r>
20400ebe:	8aaa                	mv	s5,a0
20400ec0:	c632                	sw	a2,12(sp)
20400ec2:	37e1                	jal	20400e8a <__malloc_lock>
20400ec4:	45b2                	lw	a1,12(sp)
20400ec6:	47d9                	li	a5,22
20400ec8:	00b58993          	addi	s3,a1,11
20400ecc:	0337f663          	bgeu	a5,s3,20400ef8 <_realloc_r+0x6a>
20400ed0:	ff89fb13          	andi	s6,s3,-8
20400ed4:	020b5363          	bgez	s6,20400efa <_realloc_r+0x6c>
20400ed8:	47b1                	li	a5,12
20400eda:	00faa023          	sw	a5,0(s5)
20400ede:	4a01                	li	s4,0
20400ee0:	50f2                	lw	ra,60(sp)
20400ee2:	5462                	lw	s0,56(sp)
20400ee4:	8552                	mv	a0,s4
20400ee6:	54d2                	lw	s1,52(sp)
20400ee8:	5942                	lw	s2,48(sp)
20400eea:	59b2                	lw	s3,44(sp)
20400eec:	5a22                	lw	s4,40(sp)
20400eee:	5a92                	lw	s5,36(sp)
20400ef0:	5b02                	lw	s6,32(sp)
20400ef2:	4bf2                	lw	s7,28(sp)
20400ef4:	6121                	addi	sp,sp,64
20400ef6:	8082                	ret
20400ef8:	4b41                	li	s6,16
20400efa:	fcbb6fe3          	bltu	s6,a1,20400ed8 <_realloc_r+0x4a>
20400efe:	ffc42683          	lw	a3,-4(s0)
20400f02:	ff840b93          	addi	s7,s0,-8
20400f06:	ffc6f913          	andi	s2,a3,-4
20400f0a:	2f695c63          	bge	s2,s6,20401202 <_realloc_r+0x374>
20400f0e:	5fbff717          	auipc	a4,0x5fbff
20400f12:	51a70713          	addi	a4,a4,1306 # 80000428 <__malloc_av_>
20400f16:	4710                	lw	a2,8(a4)
20400f18:	012b87b3          	add	a5,s7,s2
20400f1c:	43d8                	lw	a4,4(a5)
20400f1e:	00f60863          	beq	a2,a5,20400f2e <_realloc_r+0xa0>
20400f22:	ffe77513          	andi	a0,a4,-2
20400f26:	953e                	add	a0,a0,a5
20400f28:	4148                	lw	a0,4(a0)
20400f2a:	8905                	andi	a0,a0,1
20400f2c:	e929                	bnez	a0,20400f7e <_realloc_r+0xf0>
20400f2e:	9b71                	andi	a4,a4,-4
20400f30:	00e909b3          	add	s3,s2,a4
20400f34:	02f61d63          	bne	a2,a5,20400f6e <_realloc_r+0xe0>
20400f38:	010b0513          	addi	a0,s6,16
20400f3c:	04a9c363          	blt	s3,a0,20400f82 <_realloc_r+0xf4>
20400f40:	9bda                	add	s7,s7,s6
20400f42:	416989b3          	sub	s3,s3,s6
20400f46:	5fbff797          	auipc	a5,0x5fbff
20400f4a:	4f77a523          	sw	s7,1258(a5) # 80000430 <__malloc_av_+0x8>
20400f4e:	0019e993          	ori	s3,s3,1
20400f52:	013ba223          	sw	s3,4(s7)
20400f56:	ffc42983          	lw	s3,-4(s0)
20400f5a:	8556                	mv	a0,s5
20400f5c:	8a22                	mv	s4,s0
20400f5e:	0019f993          	andi	s3,s3,1
20400f62:	0169e9b3          	or	s3,s3,s6
20400f66:	ff342e23          	sw	s3,-4(s0)
20400f6a:	370d                	jal	20400e8c <__malloc_unlock>
20400f6c:	bf95                	j	20400ee0 <_realloc_r+0x52>
20400f6e:	0169ca63          	blt	s3,s6,20400f82 <_realloc_r+0xf4>
20400f72:	47d8                	lw	a4,12(a5)
20400f74:	479c                	lw	a5,8(a5)
20400f76:	c7d8                	sw	a4,12(a5)
20400f78:	c71c                	sw	a5,8(a4)
20400f7a:	84de                	mv	s1,s7
20400f7c:	aa11                	j	20401090 <_realloc_r+0x202>
20400f7e:	4701                	li	a4,0
20400f80:	4781                	li	a5,0
20400f82:	8a85                	andi	a3,a3,1
20400f84:	1e069363          	bnez	a3,2040116a <_realloc_r+0x2dc>
20400f88:	ff842483          	lw	s1,-8(s0)
20400f8c:	409b84b3          	sub	s1,s7,s1
20400f90:	0044aa03          	lw	s4,4(s1)
20400f94:	ffca7a13          	andi	s4,s4,-4
20400f98:	9a4a                	add	s4,s4,s2
20400f9a:	14078f63          	beqz	a5,204010f8 <_realloc_r+0x26a>
20400f9e:	014709b3          	add	s3,a4,s4
20400fa2:	0af61263          	bne	a2,a5,20401046 <_realloc_r+0x1b8>
20400fa6:	010b0793          	addi	a5,s6,16
20400faa:	14f9c763          	blt	s3,a5,204010f8 <_realloc_r+0x26a>
20400fae:	4498                	lw	a4,8(s1)
20400fb0:	44dc                	lw	a5,12(s1)
20400fb2:	ffc90613          	addi	a2,s2,-4
20400fb6:	00848a13          	addi	s4,s1,8
20400fba:	c75c                	sw	a5,12(a4)
20400fbc:	c798                	sw	a4,8(a5)
20400fbe:	02400713          	li	a4,36
20400fc2:	06c76e63          	bltu	a4,a2,2040103e <_realloc_r+0x1b0>
20400fc6:	46cd                	li	a3,19
20400fc8:	87d2                	mv	a5,s4
20400fca:	00c6fc63          	bgeu	a3,a2,20400fe2 <_realloc_r+0x154>
20400fce:	401c                	lw	a5,0(s0)
20400fd0:	c49c                	sw	a5,8(s1)
20400fd2:	405c                	lw	a5,4(s0)
20400fd4:	c4dc                	sw	a5,12(s1)
20400fd6:	47ed                	li	a5,27
20400fd8:	04c7e063          	bltu	a5,a2,20401018 <_realloc_r+0x18a>
20400fdc:	0421                	addi	s0,s0,8
20400fde:	01048793          	addi	a5,s1,16
20400fe2:	4018                	lw	a4,0(s0)
20400fe4:	c398                	sw	a4,0(a5)
20400fe6:	4058                	lw	a4,4(s0)
20400fe8:	c3d8                	sw	a4,4(a5)
20400fea:	4418                	lw	a4,8(s0)
20400fec:	c798                	sw	a4,8(a5)
20400fee:	016487b3          	add	a5,s1,s6
20400ff2:	416989b3          	sub	s3,s3,s6
20400ff6:	5fbff717          	auipc	a4,0x5fbff
20400ffa:	42f72d23          	sw	a5,1082(a4) # 80000430 <__malloc_av_+0x8>
20400ffe:	0019e993          	ori	s3,s3,1
20401002:	0137a223          	sw	s3,4(a5)
20401006:	40dc                	lw	a5,4(s1)
20401008:	8b85                	andi	a5,a5,1
2040100a:	0167e9b3          	or	s3,a5,s6
2040100e:	0134a223          	sw	s3,4(s1)
20401012:	8556                	mv	a0,s5
20401014:	3da5                	jal	20400e8c <__malloc_unlock>
20401016:	b5e9                	j	20400ee0 <_realloc_r+0x52>
20401018:	441c                	lw	a5,8(s0)
2040101a:	c89c                	sw	a5,16(s1)
2040101c:	445c                	lw	a5,12(s0)
2040101e:	c8dc                	sw	a5,20(s1)
20401020:	00e60663          	beq	a2,a4,2040102c <_realloc_r+0x19e>
20401024:	0441                	addi	s0,s0,16
20401026:	01848793          	addi	a5,s1,24
2040102a:	bf65                	j	20400fe2 <_realloc_r+0x154>
2040102c:	481c                	lw	a5,16(s0)
2040102e:	0461                	addi	s0,s0,24
20401030:	cc9c                	sw	a5,24(s1)
20401032:	ffc42703          	lw	a4,-4(s0)
20401036:	02048793          	addi	a5,s1,32
2040103a:	ccd8                	sw	a4,28(s1)
2040103c:	b75d                	j	20400fe2 <_realloc_r+0x154>
2040103e:	85a2                	mv	a1,s0
20401040:	8552                	mv	a0,s4
20401042:	3b99                	jal	20400d98 <memmove>
20401044:	b76d                	j	20400fee <_realloc_r+0x160>
20401046:	0b69c963          	blt	s3,s6,204010f8 <_realloc_r+0x26a>
2040104a:	47d8                	lw	a4,12(a5)
2040104c:	479c                	lw	a5,8(a5)
2040104e:	ffc90613          	addi	a2,s2,-4
20401052:	00848513          	addi	a0,s1,8
20401056:	c7d8                	sw	a4,12(a5)
20401058:	c71c                	sw	a5,8(a4)
2040105a:	4498                	lw	a4,8(s1)
2040105c:	44dc                	lw	a5,12(s1)
2040105e:	c75c                	sw	a5,12(a4)
20401060:	c798                	sw	a4,8(a5)
20401062:	02400793          	li	a5,36
20401066:	08c7e663          	bltu	a5,a2,204010f2 <_realloc_r+0x264>
2040106a:	474d                	li	a4,19
2040106c:	00c77c63          	bgeu	a4,a2,20401084 <_realloc_r+0x1f6>
20401070:	4018                	lw	a4,0(s0)
20401072:	c498                	sw	a4,8(s1)
20401074:	4058                	lw	a4,4(s0)
20401076:	c4d8                	sw	a4,12(s1)
20401078:	476d                	li	a4,27
2040107a:	04c76963          	bltu	a4,a2,204010cc <_realloc_r+0x23e>
2040107e:	0421                	addi	s0,s0,8
20401080:	01048513          	addi	a0,s1,16
20401084:	401c                	lw	a5,0(s0)
20401086:	c11c                	sw	a5,0(a0)
20401088:	405c                	lw	a5,4(s0)
2040108a:	c15c                	sw	a5,4(a0)
2040108c:	441c                	lw	a5,8(s0)
2040108e:	c51c                	sw	a5,8(a0)
20401090:	40d8                	lw	a4,4(s1)
20401092:	416986b3          	sub	a3,s3,s6
20401096:	463d                	li	a2,15
20401098:	8b05                	andi	a4,a4,1
2040109a:	013487b3          	add	a5,s1,s3
2040109e:	16d67463          	bgeu	a2,a3,20401206 <_realloc_r+0x378>
204010a2:	00eb69b3          	or	s3,s6,a4
204010a6:	0134a223          	sw	s3,4(s1)
204010aa:	016485b3          	add	a1,s1,s6
204010ae:	0016e693          	ori	a3,a3,1
204010b2:	c1d4                	sw	a3,4(a1)
204010b4:	43d8                	lw	a4,4(a5)
204010b6:	05a1                	addi	a1,a1,8
204010b8:	8556                	mv	a0,s5
204010ba:	00176713          	ori	a4,a4,1
204010be:	c3d8                	sw	a4,4(a5)
204010c0:	2d59                	jal	20401756 <_free_r>
204010c2:	8556                	mv	a0,s5
204010c4:	33e1                	jal	20400e8c <__malloc_unlock>
204010c6:	00848a13          	addi	s4,s1,8
204010ca:	bd19                	j	20400ee0 <_realloc_r+0x52>
204010cc:	4418                	lw	a4,8(s0)
204010ce:	c898                	sw	a4,16(s1)
204010d0:	4458                	lw	a4,12(s0)
204010d2:	c8d8                	sw	a4,20(s1)
204010d4:	00f60663          	beq	a2,a5,204010e0 <_realloc_r+0x252>
204010d8:	0441                	addi	s0,s0,16
204010da:	01848513          	addi	a0,s1,24
204010de:	b75d                	j	20401084 <_realloc_r+0x1f6>
204010e0:	481c                	lw	a5,16(s0)
204010e2:	02048513          	addi	a0,s1,32
204010e6:	0461                	addi	s0,s0,24
204010e8:	cc9c                	sw	a5,24(s1)
204010ea:	ffc42783          	lw	a5,-4(s0)
204010ee:	ccdc                	sw	a5,28(s1)
204010f0:	bf51                	j	20401084 <_realloc_r+0x1f6>
204010f2:	85a2                	mv	a1,s0
204010f4:	3155                	jal	20400d98 <memmove>
204010f6:	bf69                	j	20401090 <_realloc_r+0x202>
204010f8:	076a4963          	blt	s4,s6,2040116a <_realloc_r+0x2dc>
204010fc:	44dc                	lw	a5,12(s1)
204010fe:	4498                	lw	a4,8(s1)
20401100:	ffc90613          	addi	a2,s2,-4
20401104:	00848513          	addi	a0,s1,8
20401108:	c75c                	sw	a5,12(a4)
2040110a:	c798                	sw	a4,8(a5)
2040110c:	02400793          	li	a5,36
20401110:	04c7ea63          	bltu	a5,a2,20401164 <_realloc_r+0x2d6>
20401114:	474d                	li	a4,19
20401116:	00c77c63          	bgeu	a4,a2,2040112e <_realloc_r+0x2a0>
2040111a:	4018                	lw	a4,0(s0)
2040111c:	c498                	sw	a4,8(s1)
2040111e:	4058                	lw	a4,4(s0)
20401120:	c4d8                	sw	a4,12(s1)
20401122:	476d                	li	a4,27
20401124:	00c76d63          	bltu	a4,a2,2040113e <_realloc_r+0x2b0>
20401128:	0421                	addi	s0,s0,8
2040112a:	01048513          	addi	a0,s1,16
2040112e:	401c                	lw	a5,0(s0)
20401130:	c11c                	sw	a5,0(a0)
20401132:	405c                	lw	a5,4(s0)
20401134:	c15c                	sw	a5,4(a0)
20401136:	441c                	lw	a5,8(s0)
20401138:	c51c                	sw	a5,8(a0)
2040113a:	89d2                	mv	s3,s4
2040113c:	bf91                	j	20401090 <_realloc_r+0x202>
2040113e:	4418                	lw	a4,8(s0)
20401140:	c898                	sw	a4,16(s1)
20401142:	4458                	lw	a4,12(s0)
20401144:	c8d8                	sw	a4,20(s1)
20401146:	00f60663          	beq	a2,a5,20401152 <_realloc_r+0x2c4>
2040114a:	0441                	addi	s0,s0,16
2040114c:	01848513          	addi	a0,s1,24
20401150:	bff9                	j	2040112e <_realloc_r+0x2a0>
20401152:	481c                	lw	a5,16(s0)
20401154:	02048513          	addi	a0,s1,32
20401158:	0461                	addi	s0,s0,24
2040115a:	cc9c                	sw	a5,24(s1)
2040115c:	ffc42783          	lw	a5,-4(s0)
20401160:	ccdc                	sw	a5,28(s1)
20401162:	b7f1                	j	2040112e <_realloc_r+0x2a0>
20401164:	85a2                	mv	a1,s0
20401166:	390d                	jal	20400d98 <memmove>
20401168:	bfc9                	j	2040113a <_realloc_r+0x2ac>
2040116a:	8556                	mv	a0,s5
2040116c:	e50ff0ef          	jal	ra,204007bc <_malloc_r>
20401170:	8a2a                	mv	s4,a0
20401172:	ea0500e3          	beqz	a0,20401012 <_realloc_r+0x184>
20401176:	ffc42783          	lw	a5,-4(s0)
2040117a:	ff850713          	addi	a4,a0,-8
2040117e:	9bf9                	andi	a5,a5,-2
20401180:	97de                	add	a5,a5,s7
20401182:	00e79863          	bne	a5,a4,20401192 <_realloc_r+0x304>
20401186:	ffc52983          	lw	s3,-4(a0)
2040118a:	ffc9f993          	andi	s3,s3,-4
2040118e:	99ca                	add	s3,s3,s2
20401190:	b3ed                	j	20400f7a <_realloc_r+0xec>
20401192:	ffc90613          	addi	a2,s2,-4
20401196:	02400793          	li	a5,36
2040119a:	06c7e163          	bltu	a5,a2,204011fc <_realloc_r+0x36e>
2040119e:	474d                	li	a4,19
204011a0:	04c77b63          	bgeu	a4,a2,204011f6 <_realloc_r+0x368>
204011a4:	4018                	lw	a4,0(s0)
204011a6:	c118                	sw	a4,0(a0)
204011a8:	4058                	lw	a4,4(s0)
204011aa:	c158                	sw	a4,4(a0)
204011ac:	476d                	li	a4,27
204011ae:	02c76063          	bltu	a4,a2,204011ce <_realloc_r+0x340>
204011b2:	00840713          	addi	a4,s0,8
204011b6:	00850793          	addi	a5,a0,8
204011ba:	4314                	lw	a3,0(a4)
204011bc:	c394                	sw	a3,0(a5)
204011be:	4354                	lw	a3,4(a4)
204011c0:	c3d4                	sw	a3,4(a5)
204011c2:	4718                	lw	a4,8(a4)
204011c4:	c798                	sw	a4,8(a5)
204011c6:	85a2                	mv	a1,s0
204011c8:	8556                	mv	a0,s5
204011ca:	2371                	jal	20401756 <_free_r>
204011cc:	b599                	j	20401012 <_realloc_r+0x184>
204011ce:	4418                	lw	a4,8(s0)
204011d0:	c518                	sw	a4,8(a0)
204011d2:	4458                	lw	a4,12(s0)
204011d4:	c558                	sw	a4,12(a0)
204011d6:	00f60763          	beq	a2,a5,204011e4 <_realloc_r+0x356>
204011da:	01040713          	addi	a4,s0,16
204011de:	01050793          	addi	a5,a0,16
204011e2:	bfe1                	j	204011ba <_realloc_r+0x32c>
204011e4:	481c                	lw	a5,16(s0)
204011e6:	01840713          	addi	a4,s0,24
204011ea:	c91c                	sw	a5,16(a0)
204011ec:	4854                	lw	a3,20(s0)
204011ee:	01850793          	addi	a5,a0,24
204011f2:	c954                	sw	a3,20(a0)
204011f4:	b7d9                	j	204011ba <_realloc_r+0x32c>
204011f6:	87aa                	mv	a5,a0
204011f8:	8722                	mv	a4,s0
204011fa:	b7c1                	j	204011ba <_realloc_r+0x32c>
204011fc:	85a2                	mv	a1,s0
204011fe:	3e69                	jal	20400d98 <memmove>
20401200:	b7d9                	j	204011c6 <_realloc_r+0x338>
20401202:	89ca                	mv	s3,s2
20401204:	bb9d                	j	20400f7a <_realloc_r+0xec>
20401206:	00e9e9b3          	or	s3,s3,a4
2040120a:	0134a223          	sw	s3,4(s1)
2040120e:	43d8                	lw	a4,4(a5)
20401210:	00176713          	ori	a4,a4,1
20401214:	c3d8                	sw	a4,4(a5)
20401216:	b575                	j	204010c2 <_realloc_r+0x234>

20401218 <_sbrk_r>:
_sbrk_r():
20401218:	1141                	addi	sp,sp,-16
2040121a:	c422                	sw	s0,8(sp)
2040121c:	842a                	mv	s0,a0
2040121e:	852e                	mv	a0,a1
20401220:	5fc00797          	auipc	a5,0x5fc00
20401224:	e207a023          	sw	zero,-480(a5) # 80001040 <errno>
20401228:	c606                	sw	ra,12(sp)
2040122a:	189000ef          	jal	ra,20401bb2 <_sbrk>
2040122e:	57fd                	li	a5,-1
20401230:	00f51963          	bne	a0,a5,20401242 <_sbrk_r+0x2a>
20401234:	5fc00797          	auipc	a5,0x5fc00
20401238:	e0c78793          	addi	a5,a5,-500 # 80001040 <errno>
2040123c:	439c                	lw	a5,0(a5)
2040123e:	c391                	beqz	a5,20401242 <_sbrk_r+0x2a>
20401240:	c01c                	sw	a5,0(s0)
20401242:	40b2                	lw	ra,12(sp)
20401244:	4422                	lw	s0,8(sp)
20401246:	0141                	addi	sp,sp,16
20401248:	8082                	ret

2040124a <__sread>:
__sread():
2040124a:	1141                	addi	sp,sp,-16
2040124c:	c422                	sw	s0,8(sp)
2040124e:	842e                	mv	s0,a1
20401250:	00e59583          	lh	a1,14(a1)
20401254:	c606                	sw	ra,12(sp)
20401256:	007000ef          	jal	ra,20401a5c <_read_r>
2040125a:	00054963          	bltz	a0,2040126c <__sread+0x22>
2040125e:	483c                	lw	a5,80(s0)
20401260:	97aa                	add	a5,a5,a0
20401262:	c83c                	sw	a5,80(s0)
20401264:	40b2                	lw	ra,12(sp)
20401266:	4422                	lw	s0,8(sp)
20401268:	0141                	addi	sp,sp,16
2040126a:	8082                	ret
2040126c:	00c45783          	lhu	a5,12(s0)
20401270:	777d                	lui	a4,0xfffff
20401272:	177d                	addi	a4,a4,-1
20401274:	8ff9                	and	a5,a5,a4
20401276:	00f41623          	sh	a5,12(s0)
2040127a:	b7ed                	j	20401264 <__sread+0x1a>

2040127c <__seofread>:
__seofread():
2040127c:	4501                	li	a0,0
2040127e:	8082                	ret

20401280 <__swrite>:
__swrite():
20401280:	00c5d783          	lhu	a5,12(a1)
20401284:	1101                	addi	sp,sp,-32
20401286:	cc22                	sw	s0,24(sp)
20401288:	ca26                	sw	s1,20(sp)
2040128a:	c84a                	sw	s2,16(sp)
2040128c:	c64e                	sw	s3,12(sp)
2040128e:	ce06                	sw	ra,28(sp)
20401290:	1007f793          	andi	a5,a5,256
20401294:	84aa                	mv	s1,a0
20401296:	842e                	mv	s0,a1
20401298:	8932                	mv	s2,a2
2040129a:	89b6                	mv	s3,a3
2040129c:	c791                	beqz	a5,204012a8 <__swrite+0x28>
2040129e:	00e59583          	lh	a1,14(a1)
204012a2:	4689                	li	a3,2
204012a4:	4601                	li	a2,0
204012a6:	2541                	jal	20401926 <_lseek_r>
204012a8:	00c45783          	lhu	a5,12(s0)
204012ac:	777d                	lui	a4,0xfffff
204012ae:	177d                	addi	a4,a4,-1
204012b0:	8ff9                	and	a5,a5,a4
204012b2:	00f41623          	sh	a5,12(s0)
204012b6:	00e41583          	lh	a1,14(s0)
204012ba:	4462                	lw	s0,24(sp)
204012bc:	40f2                	lw	ra,28(sp)
204012be:	86ce                	mv	a3,s3
204012c0:	864a                	mv	a2,s2
204012c2:	49b2                	lw	s3,12(sp)
204012c4:	4942                	lw	s2,16(sp)
204012c6:	8526                	mv	a0,s1
204012c8:	44d2                	lw	s1,20(sp)
204012ca:	6105                	addi	sp,sp,32
204012cc:	a83d                	j	2040130a <_write_r>

204012ce <__sseek>:
__sseek():
204012ce:	1141                	addi	sp,sp,-16
204012d0:	c422                	sw	s0,8(sp)
204012d2:	842e                	mv	s0,a1
204012d4:	00e59583          	lh	a1,14(a1)
204012d8:	c606                	sw	ra,12(sp)
204012da:	25b1                	jal	20401926 <_lseek_r>
204012dc:	57fd                	li	a5,-1
204012de:	00c45703          	lhu	a4,12(s0)
204012e2:	00f51b63          	bne	a0,a5,204012f8 <__sseek+0x2a>
204012e6:	77fd                	lui	a5,0xfffff
204012e8:	17fd                	addi	a5,a5,-1
204012ea:	8ff9                	and	a5,a5,a4
204012ec:	00f41623          	sh	a5,12(s0)
204012f0:	40b2                	lw	ra,12(sp)
204012f2:	4422                	lw	s0,8(sp)
204012f4:	0141                	addi	sp,sp,16
204012f6:	8082                	ret
204012f8:	6785                	lui	a5,0x1
204012fa:	8fd9                	or	a5,a5,a4
204012fc:	00f41623          	sh	a5,12(s0)
20401300:	c828                	sw	a0,80(s0)
20401302:	b7fd                	j	204012f0 <__sseek+0x22>

20401304 <__sclose>:
__sclose():
20401304:	00e59583          	lh	a1,14(a1)
20401308:	aa11                	j	2040141c <_close_r>

2040130a <_write_r>:
_write_r():
2040130a:	1141                	addi	sp,sp,-16
2040130c:	c422                	sw	s0,8(sp)
2040130e:	842a                	mv	s0,a0
20401310:	852e                	mv	a0,a1
20401312:	85b2                	mv	a1,a2
20401314:	8636                	mv	a2,a3
20401316:	5fc00797          	auipc	a5,0x5fc00
2040131a:	d207a523          	sw	zero,-726(a5) # 80001040 <errno>
2040131e:	c606                	sw	ra,12(sp)
20401320:	0f7000ef          	jal	ra,20401c16 <_write>
20401324:	57fd                	li	a5,-1
20401326:	00f51963          	bne	a0,a5,20401338 <_write_r+0x2e>
2040132a:	5fc00797          	auipc	a5,0x5fc00
2040132e:	d1678793          	addi	a5,a5,-746 # 80001040 <errno>
20401332:	439c                	lw	a5,0(a5)
20401334:	c391                	beqz	a5,20401338 <_write_r+0x2e>
20401336:	c01c                	sw	a5,0(s0)
20401338:	40b2                	lw	ra,12(sp)
2040133a:	4422                	lw	s0,8(sp)
2040133c:	0141                	addi	sp,sp,16
2040133e:	8082                	ret

20401340 <__swsetup_r>:
__swsetup_r():
20401340:	1141                	addi	sp,sp,-16
20401342:	5fc00797          	auipc	a5,0x5fc00
20401346:	ca678793          	addi	a5,a5,-858 # 80000fe8 <_impure_ptr>
2040134a:	c226                	sw	s1,4(sp)
2040134c:	84aa                	mv	s1,a0
2040134e:	4388                	lw	a0,0(a5)
20401350:	c422                	sw	s0,8(sp)
20401352:	c606                	sw	ra,12(sp)
20401354:	842e                	mv	s0,a1
20401356:	c509                	beqz	a0,20401360 <__swsetup_r+0x20>
20401358:	5d1c                	lw	a5,56(a0)
2040135a:	e399                	bnez	a5,20401360 <__swsetup_r+0x20>
2040135c:	f9dfe0ef          	jal	ra,204002f8 <__sinit>
20401360:	00c41703          	lh	a4,12(s0)
20401364:	01071793          	slli	a5,a4,0x10
20401368:	83c1                	srli	a5,a5,0x10
2040136a:	0087f693          	andi	a3,a5,8
2040136e:	eea1                	bnez	a3,204013c6 <__swsetup_r+0x86>
20401370:	0107f693          	andi	a3,a5,16
20401374:	ee89                	bnez	a3,2040138e <__swsetup_r+0x4e>
20401376:	47a5                	li	a5,9
20401378:	c09c                	sw	a5,0(s1)
2040137a:	04076713          	ori	a4,a4,64
2040137e:	00e41623          	sh	a4,12(s0)
20401382:	557d                	li	a0,-1
20401384:	40b2                	lw	ra,12(sp)
20401386:	4422                	lw	s0,8(sp)
20401388:	4492                	lw	s1,4(sp)
2040138a:	0141                	addi	sp,sp,16
2040138c:	8082                	ret
2040138e:	8b91                	andi	a5,a5,4
20401390:	c78d                	beqz	a5,204013ba <__swsetup_r+0x7a>
20401392:	580c                	lw	a1,48(s0)
20401394:	c989                	beqz	a1,204013a6 <__swsetup_r+0x66>
20401396:	04040793          	addi	a5,s0,64
2040139a:	00f58463          	beq	a1,a5,204013a2 <__swsetup_r+0x62>
2040139e:	8526                	mv	a0,s1
204013a0:	2e5d                	jal	20401756 <_free_r>
204013a2:	02042823          	sw	zero,48(s0)
204013a6:	00c45783          	lhu	a5,12(s0)
204013aa:	00042223          	sw	zero,4(s0)
204013ae:	fdb7f793          	andi	a5,a5,-37
204013b2:	00f41623          	sh	a5,12(s0)
204013b6:	481c                	lw	a5,16(s0)
204013b8:	c01c                	sw	a5,0(s0)
204013ba:	00c45783          	lhu	a5,12(s0)
204013be:	0087e793          	ori	a5,a5,8
204013c2:	00f41623          	sh	a5,12(s0)
204013c6:	481c                	lw	a5,16(s0)
204013c8:	ef81                	bnez	a5,204013e0 <__swsetup_r+0xa0>
204013ca:	00c45783          	lhu	a5,12(s0)
204013ce:	20000713          	li	a4,512
204013d2:	2807f793          	andi	a5,a5,640
204013d6:	00e78563          	beq	a5,a4,204013e0 <__swsetup_r+0xa0>
204013da:	85a2                	mv	a1,s0
204013dc:	8526                	mv	a0,s1
204013de:	23c5                	jal	204019be <__smakebuf_r>
204013e0:	00c45783          	lhu	a5,12(s0)
204013e4:	0017f713          	andi	a4,a5,1
204013e8:	c705                	beqz	a4,20401410 <__swsetup_r+0xd0>
204013ea:	485c                	lw	a5,20(s0)
204013ec:	00042423          	sw	zero,8(s0)
204013f0:	40f007b3          	neg	a5,a5
204013f4:	cc1c                	sw	a5,24(s0)
204013f6:	481c                	lw	a5,16(s0)
204013f8:	4501                	li	a0,0
204013fa:	f7c9                	bnez	a5,20401384 <__swsetup_r+0x44>
204013fc:	00c41783          	lh	a5,12(s0)
20401400:	0807f713          	andi	a4,a5,128
20401404:	d341                	beqz	a4,20401384 <__swsetup_r+0x44>
20401406:	0407e793          	ori	a5,a5,64
2040140a:	00f41623          	sh	a5,12(s0)
2040140e:	bf95                	j	20401382 <__swsetup_r+0x42>
20401410:	8b89                	andi	a5,a5,2
20401412:	4701                	li	a4,0
20401414:	e391                	bnez	a5,20401418 <__swsetup_r+0xd8>
20401416:	4858                	lw	a4,20(s0)
20401418:	c418                	sw	a4,8(s0)
2040141a:	bff1                	j	204013f6 <__swsetup_r+0xb6>

2040141c <_close_r>:
_close_r():
2040141c:	1141                	addi	sp,sp,-16
2040141e:	c422                	sw	s0,8(sp)
20401420:	842a                	mv	s0,a0
20401422:	852e                	mv	a0,a1
20401424:	5fc00797          	auipc	a5,0x5fc00
20401428:	c007ae23          	sw	zero,-996(a5) # 80001040 <errno>
2040142c:	c606                	sw	ra,12(sp)
2040142e:	25e1                	jal	20401af6 <_close>
20401430:	57fd                	li	a5,-1
20401432:	00f51963          	bne	a0,a5,20401444 <_close_r+0x28>
20401436:	5fc00797          	auipc	a5,0x5fc00
2040143a:	c0a78793          	addi	a5,a5,-1014 # 80001040 <errno>
2040143e:	439c                	lw	a5,0(a5)
20401440:	c391                	beqz	a5,20401444 <_close_r+0x28>
20401442:	c01c                	sw	a5,0(s0)
20401444:	40b2                	lw	ra,12(sp)
20401446:	4422                	lw	s0,8(sp)
20401448:	0141                	addi	sp,sp,16
2040144a:	8082                	ret

2040144c <_fclose_r>:
_fclose_r():
2040144c:	1141                	addi	sp,sp,-16
2040144e:	c606                	sw	ra,12(sp)
20401450:	c422                	sw	s0,8(sp)
20401452:	c226                	sw	s1,4(sp)
20401454:	c04a                	sw	s2,0(sp)
20401456:	e989                	bnez	a1,20401468 <_fclose_r+0x1c>
20401458:	4901                	li	s2,0
2040145a:	40b2                	lw	ra,12(sp)
2040145c:	4422                	lw	s0,8(sp)
2040145e:	854a                	mv	a0,s2
20401460:	4492                	lw	s1,4(sp)
20401462:	4902                	lw	s2,0(sp)
20401464:	0141                	addi	sp,sp,16
20401466:	8082                	ret
20401468:	84aa                	mv	s1,a0
2040146a:	842e                	mv	s0,a1
2040146c:	c509                	beqz	a0,20401476 <_fclose_r+0x2a>
2040146e:	5d1c                	lw	a5,56(a0)
20401470:	e399                	bnez	a5,20401476 <_fclose_r+0x2a>
20401472:	e87fe0ef          	jal	ra,204002f8 <__sinit>
20401476:	00c41783          	lh	a5,12(s0)
2040147a:	dff9                	beqz	a5,20401458 <_fclose_r+0xc>
2040147c:	85a2                	mv	a1,s0
2040147e:	8526                	mv	a0,s1
20401480:	2085                	jal	204014e0 <__sflush_r>
20401482:	545c                	lw	a5,44(s0)
20401484:	892a                	mv	s2,a0
20401486:	c799                	beqz	a5,20401494 <_fclose_r+0x48>
20401488:	4c4c                	lw	a1,28(s0)
2040148a:	8526                	mv	a0,s1
2040148c:	9782                	jalr	a5
2040148e:	00055363          	bgez	a0,20401494 <_fclose_r+0x48>
20401492:	597d                	li	s2,-1
20401494:	00c45783          	lhu	a5,12(s0)
20401498:	0807f793          	andi	a5,a5,128
2040149c:	c781                	beqz	a5,204014a4 <_fclose_r+0x58>
2040149e:	480c                	lw	a1,16(s0)
204014a0:	8526                	mv	a0,s1
204014a2:	2c55                	jal	20401756 <_free_r>
204014a4:	580c                	lw	a1,48(s0)
204014a6:	c989                	beqz	a1,204014b8 <_fclose_r+0x6c>
204014a8:	04040793          	addi	a5,s0,64
204014ac:	00f58463          	beq	a1,a5,204014b4 <_fclose_r+0x68>
204014b0:	8526                	mv	a0,s1
204014b2:	2455                	jal	20401756 <_free_r>
204014b4:	02042823          	sw	zero,48(s0)
204014b8:	406c                	lw	a1,68(s0)
204014ba:	c589                	beqz	a1,204014c4 <_fclose_r+0x78>
204014bc:	8526                	mv	a0,s1
204014be:	2c61                	jal	20401756 <_free_r>
204014c0:	04042223          	sw	zero,68(s0)
204014c4:	f1ffe0ef          	jal	ra,204003e2 <__sfp_lock_acquire>
204014c8:	00041623          	sh	zero,12(s0)
204014cc:	f19fe0ef          	jal	ra,204003e4 <__sfp_lock_release>
204014d0:	b769                	j	2040145a <_fclose_r+0xe>

204014d2 <fclose>:
fclose():
204014d2:	5fc00797          	auipc	a5,0x5fc00
204014d6:	b1678793          	addi	a5,a5,-1258 # 80000fe8 <_impure_ptr>
204014da:	85aa                	mv	a1,a0
204014dc:	4388                	lw	a0,0(a5)
204014de:	b7bd                	j	2040144c <_fclose_r>

204014e0 <__sflush_r>:
__sflush_r():
204014e0:	00c59783          	lh	a5,12(a1)
204014e4:	1101                	addi	sp,sp,-32
204014e6:	cc22                	sw	s0,24(sp)
204014e8:	01079713          	slli	a4,a5,0x10
204014ec:	8341                	srli	a4,a4,0x10
204014ee:	ca26                	sw	s1,20(sp)
204014f0:	ce06                	sw	ra,28(sp)
204014f2:	c84a                	sw	s2,16(sp)
204014f4:	c64e                	sw	s3,12(sp)
204014f6:	00877693          	andi	a3,a4,8
204014fa:	84aa                	mv	s1,a0
204014fc:	842e                	mv	s0,a1
204014fe:	eee5                	bnez	a3,204015f6 <__sflush_r+0x116>
20401500:	6705                	lui	a4,0x1
20401502:	80070713          	addi	a4,a4,-2048 # 800 <__heap_size+0x400>
20401506:	8fd9                	or	a5,a5,a4
20401508:	41d8                	lw	a4,4(a1)
2040150a:	00f59623          	sh	a5,12(a1)
2040150e:	00e04d63          	bgtz	a4,20401528 <__sflush_r+0x48>
20401512:	5dd8                	lw	a4,60(a1)
20401514:	00e04a63          	bgtz	a4,20401528 <__sflush_r+0x48>
20401518:	4501                	li	a0,0
2040151a:	40f2                	lw	ra,28(sp)
2040151c:	4462                	lw	s0,24(sp)
2040151e:	44d2                	lw	s1,20(sp)
20401520:	4942                	lw	s2,16(sp)
20401522:	49b2                	lw	s3,12(sp)
20401524:	6105                	addi	sp,sp,32
20401526:	8082                	ret
20401528:	5418                	lw	a4,40(s0)
2040152a:	d77d                	beqz	a4,20401518 <__sflush_r+0x38>
2040152c:	0004a903          	lw	s2,0(s1)
20401530:	01379693          	slli	a3,a5,0x13
20401534:	0004a023          	sw	zero,0(s1)
20401538:	0806d563          	bgez	a3,204015c2 <__sflush_r+0xe2>
2040153c:	4830                	lw	a2,80(s0)
2040153e:	00c45783          	lhu	a5,12(s0)
20401542:	8b91                	andi	a5,a5,4
20401544:	c799                	beqz	a5,20401552 <__sflush_r+0x72>
20401546:	405c                	lw	a5,4(s0)
20401548:	8e1d                	sub	a2,a2,a5
2040154a:	581c                	lw	a5,48(s0)
2040154c:	c399                	beqz	a5,20401552 <__sflush_r+0x72>
2040154e:	5c5c                	lw	a5,60(s0)
20401550:	8e1d                	sub	a2,a2,a5
20401552:	541c                	lw	a5,40(s0)
20401554:	4c4c                	lw	a1,28(s0)
20401556:	4681                	li	a3,0
20401558:	8526                	mv	a0,s1
2040155a:	9782                	jalr	a5
2040155c:	57fd                	li	a5,-1
2040155e:	00c45683          	lhu	a3,12(s0)
20401562:	00f51d63          	bne	a0,a5,2040157c <__sflush_r+0x9c>
20401566:	409c                	lw	a5,0(s1)
20401568:	4775                	li	a4,29
2040156a:	08f76063          	bltu	a4,a5,204015ea <__sflush_r+0x10a>
2040156e:	20400737          	lui	a4,0x20400
20401572:	0705                	addi	a4,a4,1
20401574:	00f75733          	srl	a4,a4,a5
20401578:	8b05                	andi	a4,a4,1
2040157a:	cb25                	beqz	a4,204015ea <__sflush_r+0x10a>
2040157c:	77fd                	lui	a5,0xfffff
2040157e:	7ff78793          	addi	a5,a5,2047 # fffff7ff <metal_segment_heap_target_end+0x7fffb7ff>
20401582:	4818                	lw	a4,16(s0)
20401584:	8ff5                	and	a5,a5,a3
20401586:	07c2                	slli	a5,a5,0x10
20401588:	87c1                	srai	a5,a5,0x10
2040158a:	c018                	sw	a4,0(s0)
2040158c:	00f41623          	sh	a5,12(s0)
20401590:	00042223          	sw	zero,4(s0)
20401594:	01379713          	slli	a4,a5,0x13
20401598:	00075863          	bgez	a4,204015a8 <__sflush_r+0xc8>
2040159c:	57fd                	li	a5,-1
2040159e:	00f51463          	bne	a0,a5,204015a6 <__sflush_r+0xc6>
204015a2:	409c                	lw	a5,0(s1)
204015a4:	e391                	bnez	a5,204015a8 <__sflush_r+0xc8>
204015a6:	c828                	sw	a0,80(s0)
204015a8:	580c                	lw	a1,48(s0)
204015aa:	0124a023          	sw	s2,0(s1)
204015ae:	d5ad                	beqz	a1,20401518 <__sflush_r+0x38>
204015b0:	04040793          	addi	a5,s0,64
204015b4:	00f58463          	beq	a1,a5,204015bc <__sflush_r+0xdc>
204015b8:	8526                	mv	a0,s1
204015ba:	2a71                	jal	20401756 <_free_r>
204015bc:	02042823          	sw	zero,48(s0)
204015c0:	bfa1                	j	20401518 <__sflush_r+0x38>
204015c2:	4c4c                	lw	a1,28(s0)
204015c4:	4601                	li	a2,0
204015c6:	4685                	li	a3,1
204015c8:	8526                	mv	a0,s1
204015ca:	9702                	jalr	a4
204015cc:	57fd                	li	a5,-1
204015ce:	862a                	mv	a2,a0
204015d0:	f6f517e3          	bne	a0,a5,2040153e <__sflush_r+0x5e>
204015d4:	409c                	lw	a5,0(s1)
204015d6:	d7a5                	beqz	a5,2040153e <__sflush_r+0x5e>
204015d8:	4775                	li	a4,29
204015da:	00e78563          	beq	a5,a4,204015e4 <__sflush_r+0x104>
204015de:	4759                	li	a4,22
204015e0:	04e79463          	bne	a5,a4,20401628 <__sflush_r+0x148>
204015e4:	0124a023          	sw	s2,0(s1)
204015e8:	bf05                	j	20401518 <__sflush_r+0x38>
204015ea:	0406e793          	ori	a5,a3,64
204015ee:	00f41623          	sh	a5,12(s0)
204015f2:	557d                	li	a0,-1
204015f4:	b71d                	j	2040151a <__sflush_r+0x3a>
204015f6:	0105a983          	lw	s3,16(a1)
204015fa:	f0098fe3          	beqz	s3,20401518 <__sflush_r+0x38>
204015fe:	0005a903          	lw	s2,0(a1)
20401602:	8b0d                	andi	a4,a4,3
20401604:	0135a023          	sw	s3,0(a1)
20401608:	41390933          	sub	s2,s2,s3
2040160c:	4781                	li	a5,0
2040160e:	e311                	bnez	a4,20401612 <__sflush_r+0x132>
20401610:	49dc                	lw	a5,20(a1)
20401612:	c41c                	sw	a5,8(s0)
20401614:	f12052e3          	blez	s2,20401518 <__sflush_r+0x38>
20401618:	505c                	lw	a5,36(s0)
2040161a:	4c4c                	lw	a1,28(s0)
2040161c:	86ca                	mv	a3,s2
2040161e:	864e                	mv	a2,s3
20401620:	8526                	mv	a0,s1
20401622:	9782                	jalr	a5
20401624:	00a04763          	bgtz	a0,20401632 <__sflush_r+0x152>
20401628:	00c45783          	lhu	a5,12(s0)
2040162c:	0407e793          	ori	a5,a5,64
20401630:	bf7d                	j	204015ee <__sflush_r+0x10e>
20401632:	99aa                	add	s3,s3,a0
20401634:	40a90933          	sub	s2,s2,a0
20401638:	bff1                	j	20401614 <__sflush_r+0x134>

2040163a <_fflush_r>:
_fflush_r():
2040163a:	1101                	addi	sp,sp,-32
2040163c:	cc22                	sw	s0,24(sp)
2040163e:	ce06                	sw	ra,28(sp)
20401640:	842a                	mv	s0,a0
20401642:	c519                	beqz	a0,20401650 <_fflush_r+0x16>
20401644:	5d1c                	lw	a5,56(a0)
20401646:	e789                	bnez	a5,20401650 <_fflush_r+0x16>
20401648:	c62e                	sw	a1,12(sp)
2040164a:	caffe0ef          	jal	ra,204002f8 <__sinit>
2040164e:	45b2                	lw	a1,12(sp)
20401650:	00c59783          	lh	a5,12(a1)
20401654:	c791                	beqz	a5,20401660 <_fflush_r+0x26>
20401656:	8522                	mv	a0,s0
20401658:	4462                	lw	s0,24(sp)
2040165a:	40f2                	lw	ra,28(sp)
2040165c:	6105                	addi	sp,sp,32
2040165e:	b549                	j	204014e0 <__sflush_r>
20401660:	40f2                	lw	ra,28(sp)
20401662:	4462                	lw	s0,24(sp)
20401664:	4501                	li	a0,0
20401666:	6105                	addi	sp,sp,32
20401668:	8082                	ret

2040166a <fflush>:
fflush():
2040166a:	85aa                	mv	a1,a0
2040166c:	e911                	bnez	a0,20401680 <fflush+0x16>
2040166e:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
20401672:	4388                	lw	a0,0(a5)
20401674:	00000597          	auipc	a1,0x0
20401678:	fc658593          	addi	a1,a1,-58 # 2040163a <_fflush_r>
2040167c:	8d4ff06f          	j	20400750 <_fwalk_reent>
20401680:	5fc00797          	auipc	a5,0x5fc00
20401684:	96878793          	addi	a5,a5,-1688 # 80000fe8 <_impure_ptr>
20401688:	4388                	lw	a0,0(a5)
2040168a:	bf45                	j	2040163a <_fflush_r>

2040168c <_malloc_trim_r>:
_malloc_trim_r():
2040168c:	1101                	addi	sp,sp,-32
2040168e:	cc22                	sw	s0,24(sp)
20401690:	ca26                	sw	s1,20(sp)
20401692:	c84a                	sw	s2,16(sp)
20401694:	c64e                	sw	s3,12(sp)
20401696:	842e                	mv	s0,a1
20401698:	ce06                	sw	ra,28(sp)
2040169a:	892a                	mv	s2,a0
2040169c:	5fbff997          	auipc	s3,0x5fbff
204016a0:	d8c98993          	addi	s3,s3,-628 # 80000428 <__malloc_av_>
204016a4:	fe6ff0ef          	jal	ra,20400e8a <__malloc_lock>
204016a8:	0089a783          	lw	a5,8(s3)
204016ac:	6705                	lui	a4,0x1
204016ae:	43c4                	lw	s1,4(a5)
204016b0:	fef70793          	addi	a5,a4,-17 # fef <__heap_size+0xbef>
204016b4:	40878433          	sub	s0,a5,s0
204016b8:	98f1                	andi	s1,s1,-4
204016ba:	9426                	add	s0,s0,s1
204016bc:	8031                	srli	s0,s0,0xc
204016be:	147d                	addi	s0,s0,-1
204016c0:	0432                	slli	s0,s0,0xc
204016c2:	00e45d63          	bge	s0,a4,204016dc <_malloc_trim_r+0x50>
204016c6:	854a                	mv	a0,s2
204016c8:	fc4ff0ef          	jal	ra,20400e8c <__malloc_unlock>
204016cc:	4501                	li	a0,0
204016ce:	40f2                	lw	ra,28(sp)
204016d0:	4462                	lw	s0,24(sp)
204016d2:	44d2                	lw	s1,20(sp)
204016d4:	4942                	lw	s2,16(sp)
204016d6:	49b2                	lw	s3,12(sp)
204016d8:	6105                	addi	sp,sp,32
204016da:	8082                	ret
204016dc:	4581                	li	a1,0
204016de:	854a                	mv	a0,s2
204016e0:	3e25                	jal	20401218 <_sbrk_r>
204016e2:	0089a783          	lw	a5,8(s3)
204016e6:	97a6                	add	a5,a5,s1
204016e8:	fcf51fe3          	bne	a0,a5,204016c6 <_malloc_trim_r+0x3a>
204016ec:	408005b3          	neg	a1,s0
204016f0:	854a                	mv	a0,s2
204016f2:	361d                	jal	20401218 <_sbrk_r>
204016f4:	57fd                	li	a5,-1
204016f6:	02f51a63          	bne	a0,a5,2040172a <_malloc_trim_r+0x9e>
204016fa:	4581                	li	a1,0
204016fc:	854a                	mv	a0,s2
204016fe:	3e29                	jal	20401218 <_sbrk_r>
20401700:	0089a703          	lw	a4,8(s3)
20401704:	46bd                	li	a3,15
20401706:	40e507b3          	sub	a5,a0,a4
2040170a:	faf6dee3          	bge	a3,a5,204016c6 <_malloc_trim_r+0x3a>
2040170e:	5fc00697          	auipc	a3,0x5fc00
20401712:	8de68693          	addi	a3,a3,-1826 # 80000fec <__malloc_sbrk_base>
20401716:	4294                	lw	a3,0(a3)
20401718:	0017e793          	ori	a5,a5,1
2040171c:	c35c                	sw	a5,4(a4)
2040171e:	8d15                	sub	a0,a0,a3
20401720:	5fc00697          	auipc	a3,0x5fc00
20401724:	8ea6ac23          	sw	a0,-1800(a3) # 80001018 <__malloc_current_mallinfo>
20401728:	bf79                	j	204016c6 <_malloc_trim_r+0x3a>
2040172a:	0089a783          	lw	a5,8(s3)
2040172e:	8c81                	sub	s1,s1,s0
20401730:	0014e493          	ori	s1,s1,1
20401734:	c3c4                	sw	s1,4(a5)
20401736:	5fc00797          	auipc	a5,0x5fc00
2040173a:	8e278793          	addi	a5,a5,-1822 # 80001018 <__malloc_current_mallinfo>
2040173e:	439c                	lw	a5,0(a5)
20401740:	854a                	mv	a0,s2
20401742:	40878433          	sub	s0,a5,s0
20401746:	5fc00797          	auipc	a5,0x5fc00
2040174a:	8c87a923          	sw	s0,-1838(a5) # 80001018 <__malloc_current_mallinfo>
2040174e:	f3eff0ef          	jal	ra,20400e8c <__malloc_unlock>
20401752:	4505                	li	a0,1
20401754:	bfad                	j	204016ce <_malloc_trim_r+0x42>

20401756 <_free_r>:
_free_r():
20401756:	1c058763          	beqz	a1,20401924 <_free_r+0x1ce>
2040175a:	1141                	addi	sp,sp,-16
2040175c:	c422                	sw	s0,8(sp)
2040175e:	c226                	sw	s1,4(sp)
20401760:	842a                	mv	s0,a0
20401762:	84ae                	mv	s1,a1
20401764:	c606                	sw	ra,12(sp)
20401766:	f24ff0ef          	jal	ra,20400e8a <__malloc_lock>
2040176a:	ffc4a583          	lw	a1,-4(s1)
2040176e:	ff848693          	addi	a3,s1,-8
20401772:	5fbff517          	auipc	a0,0x5fbff
20401776:	cb650513          	addi	a0,a0,-842 # 80000428 <__malloc_av_>
2040177a:	ffe5f793          	andi	a5,a1,-2
2040177e:	00f68633          	add	a2,a3,a5
20401782:	4258                	lw	a4,4(a2)
20401784:	00852803          	lw	a6,8(a0)
20401788:	8985                	andi	a1,a1,1
2040178a:	9b71                	andi	a4,a4,-4
2040178c:	04c81863          	bne	a6,a2,204017dc <_free_r+0x86>
20401790:	97ba                	add	a5,a5,a4
20401792:	e989                	bnez	a1,204017a4 <_free_r+0x4e>
20401794:	ff84a703          	lw	a4,-8(s1)
20401798:	8e99                	sub	a3,a3,a4
2040179a:	4690                	lw	a2,8(a3)
2040179c:	97ba                	add	a5,a5,a4
2040179e:	46d8                	lw	a4,12(a3)
204017a0:	c658                	sw	a4,12(a2)
204017a2:	c710                	sw	a2,8(a4)
204017a4:	0017e713          	ori	a4,a5,1
204017a8:	c2d8                	sw	a4,4(a3)
204017aa:	5fbff717          	auipc	a4,0x5fbff
204017ae:	c8d72323          	sw	a3,-890(a4) # 80000430 <__malloc_av_+0x8>
204017b2:	5fc00717          	auipc	a4,0x5fc00
204017b6:	83e70713          	addi	a4,a4,-1986 # 80000ff0 <__malloc_trim_threshold>
204017ba:	4318                	lw	a4,0(a4)
204017bc:	00e7e963          	bltu	a5,a4,204017ce <_free_r+0x78>
204017c0:	5fc00797          	auipc	a5,0x5fc00
204017c4:	85478793          	addi	a5,a5,-1964 # 80001014 <__malloc_top_pad>
204017c8:	438c                	lw	a1,0(a5)
204017ca:	8522                	mv	a0,s0
204017cc:	35c1                	jal	2040168c <_malloc_trim_r>
204017ce:	8522                	mv	a0,s0
204017d0:	4422                	lw	s0,8(sp)
204017d2:	40b2                	lw	ra,12(sp)
204017d4:	4492                	lw	s1,4(sp)
204017d6:	0141                	addi	sp,sp,16
204017d8:	eb4ff06f          	j	20400e8c <__malloc_unlock>
204017dc:	c258                	sw	a4,4(a2)
204017de:	4801                	li	a6,0
204017e0:	e195                	bnez	a1,20401804 <_free_r+0xae>
204017e2:	ff84a583          	lw	a1,-8(s1)
204017e6:	5fbff897          	auipc	a7,0x5fbff
204017ea:	c4a88893          	addi	a7,a7,-950 # 80000430 <__malloc_av_+0x8>
204017ee:	8e8d                	sub	a3,a3,a1
204017f0:	97ae                	add	a5,a5,a1
204017f2:	468c                	lw	a1,8(a3)
204017f4:	09158563          	beq	a1,a7,2040187e <_free_r+0x128>
204017f8:	00c6a883          	lw	a7,12(a3)
204017fc:	0115a623          	sw	a7,12(a1)
20401800:	00b8a423          	sw	a1,8(a7)
20401804:	00e605b3          	add	a1,a2,a4
20401808:	41cc                	lw	a1,4(a1)
2040180a:	8985                	andi	a1,a1,1
2040180c:	e595                	bnez	a1,20401838 <_free_r+0xe2>
2040180e:	97ba                	add	a5,a5,a4
20401810:	4618                	lw	a4,8(a2)
20401812:	06081863          	bnez	a6,20401882 <_free_r+0x12c>
20401816:	5fbff597          	auipc	a1,0x5fbff
2040181a:	c1a58593          	addi	a1,a1,-998 # 80000430 <__malloc_av_+0x8>
2040181e:	06b71263          	bne	a4,a1,20401882 <_free_r+0x12c>
20401822:	5fbff617          	auipc	a2,0x5fbff
20401826:	c0d62d23          	sw	a3,-998(a2) # 8000043c <__malloc_av_+0x14>
2040182a:	5fbff617          	auipc	a2,0x5fbff
2040182e:	c0d62723          	sw	a3,-1010(a2) # 80000438 <__malloc_av_+0x10>
20401832:	c6d8                	sw	a4,12(a3)
20401834:	c698                	sw	a4,8(a3)
20401836:	4805                	li	a6,1
20401838:	0017e713          	ori	a4,a5,1
2040183c:	c2d8                	sw	a4,4(a3)
2040183e:	00f68733          	add	a4,a3,a5
20401842:	c31c                	sw	a5,0(a4)
20401844:	f80815e3          	bnez	a6,204017ce <_free_r+0x78>
20401848:	1ff00713          	li	a4,511
2040184c:	02f76f63          	bltu	a4,a5,2040188a <_free_r+0x134>
20401850:	838d                	srli	a5,a5,0x3
20401852:	4027d613          	srai	a2,a5,0x2
20401856:	4705                	li	a4,1
20401858:	00c71733          	sll	a4,a4,a2
2040185c:	4150                	lw	a2,4(a0)
2040185e:	0785                	addi	a5,a5,1
20401860:	078e                	slli	a5,a5,0x3
20401862:	8f51                	or	a4,a4,a2
20401864:	97aa                	add	a5,a5,a0
20401866:	5fbff617          	auipc	a2,0x5fbff
2040186a:	bce62323          	sw	a4,-1082(a2) # 8000042c <__malloc_av_+0x4>
2040186e:	4398                	lw	a4,0(a5)
20401870:	ff878613          	addi	a2,a5,-8
20401874:	c6d0                	sw	a2,12(a3)
20401876:	c698                	sw	a4,8(a3)
20401878:	c394                	sw	a3,0(a5)
2040187a:	c754                	sw	a3,12(a4)
2040187c:	bf89                	j	204017ce <_free_r+0x78>
2040187e:	4805                	li	a6,1
20401880:	b751                	j	20401804 <_free_r+0xae>
20401882:	4650                	lw	a2,12(a2)
20401884:	c750                	sw	a2,12(a4)
20401886:	c618                	sw	a4,8(a2)
20401888:	bf45                	j	20401838 <_free_r+0xe2>
2040188a:	0097d613          	srli	a2,a5,0x9
2040188e:	4711                	li	a4,4
20401890:	02c76e63          	bltu	a4,a2,204018cc <_free_r+0x176>
20401894:	0067d713          	srli	a4,a5,0x6
20401898:	03870713          	addi	a4,a4,56
2040189c:	00170613          	addi	a2,a4,1
204018a0:	060e                	slli	a2,a2,0x3
204018a2:	962a                	add	a2,a2,a0
204018a4:	ff860593          	addi	a1,a2,-8
204018a8:	4210                	lw	a2,0(a2)
204018aa:	06c59763          	bne	a1,a2,20401918 <_free_r+0x1c2>
204018ae:	4785                	li	a5,1
204018b0:	8709                	srai	a4,a4,0x2
204018b2:	00e79733          	sll	a4,a5,a4
204018b6:	415c                	lw	a5,4(a0)
204018b8:	8f5d                	or	a4,a4,a5
204018ba:	5fbff797          	auipc	a5,0x5fbff
204018be:	b6e7a923          	sw	a4,-1166(a5) # 8000042c <__malloc_av_+0x4>
204018c2:	c6cc                	sw	a1,12(a3)
204018c4:	c690                	sw	a2,8(a3)
204018c6:	c594                	sw	a3,8(a1)
204018c8:	c654                	sw	a3,12(a2)
204018ca:	b711                	j	204017ce <_free_r+0x78>
204018cc:	4751                	li	a4,20
204018ce:	00c76563          	bltu	a4,a2,204018d8 <_free_r+0x182>
204018d2:	05b60713          	addi	a4,a2,91
204018d6:	b7d9                	j	2040189c <_free_r+0x146>
204018d8:	05400713          	li	a4,84
204018dc:	00c76763          	bltu	a4,a2,204018ea <_free_r+0x194>
204018e0:	00c7d713          	srli	a4,a5,0xc
204018e4:	06e70713          	addi	a4,a4,110
204018e8:	bf55                	j	2040189c <_free_r+0x146>
204018ea:	15400713          	li	a4,340
204018ee:	00c76763          	bltu	a4,a2,204018fc <_free_r+0x1a6>
204018f2:	00f7d713          	srli	a4,a5,0xf
204018f6:	07770713          	addi	a4,a4,119
204018fa:	b74d                	j	2040189c <_free_r+0x146>
204018fc:	55400593          	li	a1,1364
20401900:	07e00713          	li	a4,126
20401904:	f8c5ece3          	bltu	a1,a2,2040189c <_free_r+0x146>
20401908:	0127d713          	srli	a4,a5,0x12
2040190c:	07c70713          	addi	a4,a4,124
20401910:	b771                	j	2040189c <_free_r+0x146>
20401912:	4610                	lw	a2,8(a2)
20401914:	00c58663          	beq	a1,a2,20401920 <_free_r+0x1ca>
20401918:	4258                	lw	a4,4(a2)
2040191a:	9b71                	andi	a4,a4,-4
2040191c:	fee7ebe3          	bltu	a5,a4,20401912 <_free_r+0x1bc>
20401920:	464c                	lw	a1,12(a2)
20401922:	b745                	j	204018c2 <_free_r+0x16c>
20401924:	8082                	ret

20401926 <_lseek_r>:
_lseek_r():
20401926:	1141                	addi	sp,sp,-16
20401928:	c422                	sw	s0,8(sp)
2040192a:	842a                	mv	s0,a0
2040192c:	852e                	mv	a0,a1
2040192e:	85b2                	mv	a1,a2
20401930:	8636                	mv	a2,a3
20401932:	5fbff797          	auipc	a5,0x5fbff
20401936:	7007a723          	sw	zero,1806(a5) # 80001040 <errno>
2040193a:	c606                	sw	ra,12(sp)
2040193c:	240d                	jal	20401b5e <_lseek>
2040193e:	57fd                	li	a5,-1
20401940:	00f51963          	bne	a0,a5,20401952 <_lseek_r+0x2c>
20401944:	5fbff797          	auipc	a5,0x5fbff
20401948:	6fc78793          	addi	a5,a5,1788 # 80001040 <errno>
2040194c:	439c                	lw	a5,0(a5)
2040194e:	c391                	beqz	a5,20401952 <_lseek_r+0x2c>
20401950:	c01c                	sw	a5,0(s0)
20401952:	40b2                	lw	ra,12(sp)
20401954:	4422                	lw	s0,8(sp)
20401956:	0141                	addi	sp,sp,16
20401958:	8082                	ret

2040195a <__swhatbuf_r>:
__swhatbuf_r():
2040195a:	7119                	addi	sp,sp,-128
2040195c:	daa6                	sw	s1,116(sp)
2040195e:	84ae                	mv	s1,a1
20401960:	00e59583          	lh	a1,14(a1)
20401964:	dca2                	sw	s0,120(sp)
20401966:	de86                	sw	ra,124(sp)
20401968:	8432                	mv	s0,a2
2040196a:	0005dc63          	bgez	a1,20401982 <__swhatbuf_r+0x28>
2040196e:	00c4d783          	lhu	a5,12(s1)
20401972:	0006a023          	sw	zero,0(a3)
20401976:	0807f793          	andi	a5,a5,128
2040197a:	eb8d                	bnez	a5,204019ac <__swhatbuf_r+0x52>
2040197c:	40000793          	li	a5,1024
20401980:	a805                	j	204019b0 <__swhatbuf_r+0x56>
20401982:	0830                	addi	a2,sp,24
20401984:	c636                	sw	a3,12(sp)
20401986:	2229                	jal	20401a90 <_fstat_r>
20401988:	46b2                	lw	a3,12(sp)
2040198a:	fe0542e3          	bltz	a0,2040196e <__swhatbuf_r+0x14>
2040198e:	4772                	lw	a4,28(sp)
20401990:	67bd                	lui	a5,0xf
20401992:	6505                	lui	a0,0x1
20401994:	8ff9                	and	a5,a5,a4
20401996:	7779                	lui	a4,0xffffe
20401998:	97ba                	add	a5,a5,a4
2040199a:	0017b793          	seqz	a5,a5
2040199e:	c29c                	sw	a5,0(a3)
204019a0:	40000793          	li	a5,1024
204019a4:	c01c                	sw	a5,0(s0)
204019a6:	80050513          	addi	a0,a0,-2048 # 800 <__heap_size+0x400>
204019aa:	a029                	j	204019b4 <__swhatbuf_r+0x5a>
204019ac:	04000793          	li	a5,64
204019b0:	c01c                	sw	a5,0(s0)
204019b2:	4501                	li	a0,0
204019b4:	50f6                	lw	ra,124(sp)
204019b6:	5466                	lw	s0,120(sp)
204019b8:	54d6                	lw	s1,116(sp)
204019ba:	6109                	addi	sp,sp,128
204019bc:	8082                	ret

204019be <__smakebuf_r>:
__smakebuf_r():
204019be:	00c5d783          	lhu	a5,12(a1)
204019c2:	1101                	addi	sp,sp,-32
204019c4:	cc22                	sw	s0,24(sp)
204019c6:	ce06                	sw	ra,28(sp)
204019c8:	ca26                	sw	s1,20(sp)
204019ca:	c84a                	sw	s2,16(sp)
204019cc:	8b89                	andi	a5,a5,2
204019ce:	842e                	mv	s0,a1
204019d0:	cf89                	beqz	a5,204019ea <__smakebuf_r+0x2c>
204019d2:	04340793          	addi	a5,s0,67
204019d6:	c01c                	sw	a5,0(s0)
204019d8:	c81c                	sw	a5,16(s0)
204019da:	4785                	li	a5,1
204019dc:	c85c                	sw	a5,20(s0)
204019de:	40f2                	lw	ra,28(sp)
204019e0:	4462                	lw	s0,24(sp)
204019e2:	44d2                	lw	s1,20(sp)
204019e4:	4942                	lw	s2,16(sp)
204019e6:	6105                	addi	sp,sp,32
204019e8:	8082                	ret
204019ea:	0074                	addi	a3,sp,12
204019ec:	0030                	addi	a2,sp,8
204019ee:	84aa                	mv	s1,a0
204019f0:	37ad                	jal	2040195a <__swhatbuf_r>
204019f2:	45a2                	lw	a1,8(sp)
204019f4:	892a                	mv	s2,a0
204019f6:	8526                	mv	a0,s1
204019f8:	dc5fe0ef          	jal	ra,204007bc <_malloc_r>
204019fc:	ed01                	bnez	a0,20401a14 <__smakebuf_r+0x56>
204019fe:	00c41783          	lh	a5,12(s0)
20401a02:	2007f713          	andi	a4,a5,512
20401a06:	ff61                	bnez	a4,204019de <__smakebuf_r+0x20>
20401a08:	9bf1                	andi	a5,a5,-4
20401a0a:	0027e793          	ori	a5,a5,2
20401a0e:	00f41623          	sh	a5,12(s0)
20401a12:	b7c1                	j	204019d2 <__smakebuf_r+0x14>
20401a14:	fffff797          	auipc	a5,0xfffff
20401a18:	88878793          	addi	a5,a5,-1912 # 2040029c <_cleanup_r>
20401a1c:	dcdc                	sw	a5,60(s1)
20401a1e:	00c45783          	lhu	a5,12(s0)
20401a22:	c008                	sw	a0,0(s0)
20401a24:	c808                	sw	a0,16(s0)
20401a26:	0807e793          	ori	a5,a5,128
20401a2a:	00f41623          	sh	a5,12(s0)
20401a2e:	47a2                	lw	a5,8(sp)
20401a30:	c85c                	sw	a5,20(s0)
20401a32:	47b2                	lw	a5,12(sp)
20401a34:	cf89                	beqz	a5,20401a4e <__smakebuf_r+0x90>
20401a36:	00e41583          	lh	a1,14(s0)
20401a3a:	8526                	mv	a0,s1
20401a3c:	2059                	jal	20401ac2 <_isatty_r>
20401a3e:	c901                	beqz	a0,20401a4e <__smakebuf_r+0x90>
20401a40:	00c45783          	lhu	a5,12(s0)
20401a44:	9bf1                	andi	a5,a5,-4
20401a46:	0017e793          	ori	a5,a5,1
20401a4a:	00f41623          	sh	a5,12(s0)
20401a4e:	00c45783          	lhu	a5,12(s0)
20401a52:	00f96933          	or	s2,s2,a5
20401a56:	01241623          	sh	s2,12(s0)
20401a5a:	b751                	j	204019de <__smakebuf_r+0x20>

20401a5c <_read_r>:
_read_r():
20401a5c:	1141                	addi	sp,sp,-16
20401a5e:	c422                	sw	s0,8(sp)
20401a60:	842a                	mv	s0,a0
20401a62:	852e                	mv	a0,a1
20401a64:	85b2                	mv	a1,a2
20401a66:	8636                	mv	a2,a3
20401a68:	5fbff797          	auipc	a5,0x5fbff
20401a6c:	5c07ac23          	sw	zero,1496(a5) # 80001040 <errno>
20401a70:	c606                	sw	ra,12(sp)
20401a72:	2a19                	jal	20401b88 <_read>
20401a74:	57fd                	li	a5,-1
20401a76:	00f51963          	bne	a0,a5,20401a88 <_read_r+0x2c>
20401a7a:	5fbff797          	auipc	a5,0x5fbff
20401a7e:	5c678793          	addi	a5,a5,1478 # 80001040 <errno>
20401a82:	439c                	lw	a5,0(a5)
20401a84:	c391                	beqz	a5,20401a88 <_read_r+0x2c>
20401a86:	c01c                	sw	a5,0(s0)
20401a88:	40b2                	lw	ra,12(sp)
20401a8a:	4422                	lw	s0,8(sp)
20401a8c:	0141                	addi	sp,sp,16
20401a8e:	8082                	ret

20401a90 <_fstat_r>:
_fstat_r():
20401a90:	1141                	addi	sp,sp,-16
20401a92:	c422                	sw	s0,8(sp)
20401a94:	842a                	mv	s0,a0
20401a96:	852e                	mv	a0,a1
20401a98:	85b2                	mv	a1,a2
20401a9a:	5fbff797          	auipc	a5,0x5fbff
20401a9e:	5a07a323          	sw	zero,1446(a5) # 80001040 <errno>
20401aa2:	c606                	sw	ra,12(sp)
20401aa4:	2895                	jal	20401b18 <_fstat>
20401aa6:	57fd                	li	a5,-1
20401aa8:	00f51963          	bne	a0,a5,20401aba <_fstat_r+0x2a>
20401aac:	5fbff797          	auipc	a5,0x5fbff
20401ab0:	59478793          	addi	a5,a5,1428 # 80001040 <errno>
20401ab4:	439c                	lw	a5,0(a5)
20401ab6:	c391                	beqz	a5,20401aba <_fstat_r+0x2a>
20401ab8:	c01c                	sw	a5,0(s0)
20401aba:	40b2                	lw	ra,12(sp)
20401abc:	4422                	lw	s0,8(sp)
20401abe:	0141                	addi	sp,sp,16
20401ac0:	8082                	ret

20401ac2 <_isatty_r>:
_isatty_r():
20401ac2:	1141                	addi	sp,sp,-16
20401ac4:	c422                	sw	s0,8(sp)
20401ac6:	842a                	mv	s0,a0
20401ac8:	852e                	mv	a0,a1
20401aca:	5fbff797          	auipc	a5,0x5fbff
20401ace:	5607ab23          	sw	zero,1398(a5) # 80001040 <errno>
20401ad2:	c606                	sw	ra,12(sp)
20401ad4:	20ad                	jal	20401b3e <_isatty>
20401ad6:	57fd                	li	a5,-1
20401ad8:	00f51963          	bne	a0,a5,20401aea <_isatty_r+0x28>
20401adc:	5fbff797          	auipc	a5,0x5fbff
20401ae0:	56478793          	addi	a5,a5,1380 # 80001040 <errno>
20401ae4:	439c                	lw	a5,0(a5)
20401ae6:	c391                	beqz	a5,20401aea <_isatty_r+0x28>
20401ae8:	c01c                	sw	a5,0(s0)
20401aea:	40b2                	lw	ra,12(sp)
20401aec:	4422                	lw	s0,8(sp)
20401aee:	0141                	addi	sp,sp,16
20401af0:	8082                	ret
	...

20401af4 <early_trap_vector>:
early_trap_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/entry.S:84
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    j early_trap_vector
20401af4:	a001                	j	20401af4 <early_trap_vector>

20401af6 <_close>:
_close():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401af6:	1101                	addi	sp,sp,-32
20401af8:	ce06                	sw	ra,28(sp)
20401afa:	cc22                	sw	s0,24(sp)
20401afc:	1000                	addi	s0,sp,32
20401afe:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401b02:	2271                	jal	20401c8e <__errno>
20401b04:	872a                	mv	a4,a0
20401b06:	05800793          	li	a5,88
20401b0a:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401b0c:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401b0e:	853e                	mv	a0,a5
20401b10:	40f2                	lw	ra,28(sp)
20401b12:	4462                	lw	s0,24(sp)
20401b14:	6105                	addi	sp,sp,32
20401b16:	8082                	ret

20401b18 <_fstat>:
_fstat():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401b18:	1101                	addi	sp,sp,-32
20401b1a:	ce06                	sw	ra,28(sp)
20401b1c:	cc22                	sw	s0,24(sp)
20401b1e:	1000                	addi	s0,sp,32
20401b20:	fea42623          	sw	a0,-20(s0)
20401b24:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401b28:	229d                	jal	20401c8e <__errno>
20401b2a:	872a                	mv	a4,a0
20401b2c:	fa800793          	li	a5,-88
20401b30:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401b32:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401b34:	853e                	mv	a0,a5
20401b36:	40f2                	lw	ra,28(sp)
20401b38:	4462                	lw	s0,24(sp)
20401b3a:	6105                	addi	sp,sp,32
20401b3c:	8082                	ret

20401b3e <_isatty>:
_isatty():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401b3e:	1101                	addi	sp,sp,-32
20401b40:	ce22                	sw	s0,28(sp)
20401b42:	1000                	addi	s0,sp,32
20401b44:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401b48:	fec42783          	lw	a5,-20(s0)
20401b4c:	17fd                	addi	a5,a5,-1
20401b4e:	0017b793          	seqz	a5,a5
20401b52:	0ff7f793          	andi	a5,a5,255
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401b56:	853e                	mv	a0,a5
20401b58:	4472                	lw	s0,28(sp)
20401b5a:	6105                	addi	sp,sp,32
20401b5c:	8082                	ret

20401b5e <_lseek>:
_lseek():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401b5e:	1101                	addi	sp,sp,-32
20401b60:	ce06                	sw	ra,28(sp)
20401b62:	cc22                	sw	s0,24(sp)
20401b64:	1000                	addi	s0,sp,32
20401b66:	fea42623          	sw	a0,-20(s0)
20401b6a:	feb42423          	sw	a1,-24(s0)
20401b6e:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401b72:	2a31                	jal	20401c8e <__errno>
20401b74:	872a                	mv	a4,a0
20401b76:	05800793          	li	a5,88
20401b7a:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401b7c:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401b7e:	853e                	mv	a0,a5
20401b80:	40f2                	lw	ra,28(sp)
20401b82:	4462                	lw	s0,24(sp)
20401b84:	6105                	addi	sp,sp,32
20401b86:	8082                	ret

20401b88 <_read>:
_read():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401b88:	1101                	addi	sp,sp,-32
20401b8a:	ce06                	sw	ra,28(sp)
20401b8c:	cc22                	sw	s0,24(sp)
20401b8e:	1000                	addi	s0,sp,32
20401b90:	fea42623          	sw	a0,-20(s0)
20401b94:	feb42423          	sw	a1,-24(s0)
20401b98:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401b9c:	28cd                	jal	20401c8e <__errno>
20401b9e:	872a                	mv	a4,a0
20401ba0:	05800793          	li	a5,88
20401ba4:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401ba6:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401ba8:	853e                	mv	a0,a5
20401baa:	40f2                	lw	ra,28(sp)
20401bac:	4462                	lw	s0,24(sp)
20401bae:	6105                	addi	sp,sp,32
20401bb0:	8082                	ret

20401bb2 <_sbrk>:
_sbrk():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401bb2:	7179                	addi	sp,sp,-48
20401bb4:	d622                	sw	s0,44(sp)
20401bb6:	1800                	addi	s0,sp,48
20401bb8:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401bbc:	80c1a783          	lw	a5,-2036(gp) # 80000ff4 <brk>
20401bc0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401bc4:	c5c18713          	addi	a4,gp,-932 # 80001444 <metal_segment_stack_end>
20401bc8:	800047b7          	lui	a5,0x80004
20401bcc:	00078793          	mv	a5,a5
20401bd0:	00f71463          	bne	a4,a5,20401bd8 <_sbrk+0x26>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return NULL;
20401bd4:	4781                	li	a5,0
20401bd6:	a825                	j	20401c0e <_sbrk+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401bd8:	80c1a703          	lw	a4,-2036(gp) # 80000ff4 <brk>
20401bdc:	fdc42783          	lw	a5,-36(s0)
20401be0:	973e                	add	a4,a4,a5
20401be2:	800047b7          	lui	a5,0x80004
20401be6:	00078793          	mv	a5,a5
20401bea:	00f77a63          	bgeu	a4,a5,20401bfe <_sbrk+0x4c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401bee:	80c1a703          	lw	a4,-2036(gp) # 80000ff4 <brk>
20401bf2:	fdc42783          	lw	a5,-36(s0)
20401bf6:	973e                	add	a4,a4,a5
20401bf8:	80e1a623          	sw	a4,-2036(gp) # 80000ff4 <brk>
20401bfc:	a039                	j	20401c0a <_sbrk+0x58>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
  } else {
    brk = &metal_segment_heap_target_end;
20401bfe:	80004737          	lui	a4,0x80004
20401c02:	00070713          	mv	a4,a4
20401c06:	80e1a623          	sw	a4,-2036(gp) # 80000ff4 <brk>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:37
  }

  return old;
20401c0a:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
}
20401c0e:	853e                	mv	a0,a5
20401c10:	5432                	lw	s0,44(sp)
20401c12:	6145                	addi	sp,sp,48
20401c14:	8082                	ret

20401c16 <_write>:
_write():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401c16:	7179                	addi	sp,sp,-48
20401c18:	d606                	sw	ra,44(sp)
20401c1a:	d422                	sw	s0,40(sp)
20401c1c:	1800                	addi	s0,sp,48
20401c1e:	fca42e23          	sw	a0,-36(s0)
20401c22:	fcb42c23          	sw	a1,-40(s0)
20401c26:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401c2a:	fdc42703          	lw	a4,-36(s0)
20401c2e:	4785                	li	a5,1
20401c30:	00f70963          	beq	a4,a5,20401c42 <_write+0x2c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401c34:	28a9                	jal	20401c8e <__errno>
20401c36:	872a                	mv	a4,a0
20401c38:	05800793          	li	a5,88
20401c3c:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401c3e:	57fd                	li	a5,-1
20401c40:	a82d                	j	20401c7a <_write+0x64>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401c42:	fd842783          	lw	a5,-40(s0)
20401c46:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401c4a:	fe042623          	sw	zero,-20(s0)
20401c4e:	a839                	j	20401c6c <_write+0x56>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401c50:	fe842703          	lw	a4,-24(s0)
20401c54:	fec42783          	lw	a5,-20(s0)
20401c58:	97ba                	add	a5,a5,a4
20401c5a:	0007c783          	lbu	a5,0(a5) # 80004000 <metal_segment_heap_target_end+0x0>
20401c5e:	853e                	mv	a0,a5
20401c60:	2c01                	jal	20401e70 <metal_tty_putc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401c62:	fec42783          	lw	a5,-20(s0)
20401c66:	0785                	addi	a5,a5,1
20401c68:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401c6c:	fec42703          	lw	a4,-20(s0)
20401c70:	fd442783          	lw	a5,-44(s0)
20401c74:	fcf76ee3          	bltu	a4,a5,20401c50 <_write+0x3a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401c78:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401c7a:	853e                	mv	a0,a5
20401c7c:	50b2                	lw	ra,44(sp)
20401c7e:	5422                	lw	s0,40(sp)
20401c80:	6145                	addi	sp,sp,48
20401c82:	8082                	ret

20401c84 <atexit>:
atexit():
20401c84:	85aa                	mv	a1,a0
20401c86:	4681                	li	a3,0
20401c88:	4601                	li	a2,0
20401c8a:	4501                	li	a0,0
20401c8c:	a8d1                	j	20401d60 <__register_exitproc>

20401c8e <__errno>:
__errno():
20401c8e:	5fbff797          	auipc	a5,0x5fbff
20401c92:	35a78793          	addi	a5,a5,858 # 80000fe8 <_impure_ptr>
20401c96:	4388                	lw	a0,0(a5)
20401c98:	8082                	ret

20401c9a <exit>:
exit():
20401c9a:	1141                	addi	sp,sp,-16
20401c9c:	4581                	li	a1,0
20401c9e:	c422                	sw	s0,8(sp)
20401ca0:	c606                	sw	ra,12(sp)
20401ca2:	842a                	mv	s0,a0
20401ca4:	2a39                	jal	20401dc2 <__call_exitprocs>
20401ca6:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
20401caa:	4388                	lw	a0,0(a5)
20401cac:	5d5c                	lw	a5,60(a0)
20401cae:	c391                	beqz	a5,20401cb2 <exit+0x18>
20401cb0:	9782                	jalr	a5
20401cb2:	8522                	mv	a0,s0
20401cb4:	53f010ef          	jal	ra,204039f2 <_exit>

20401cb8 <__libc_fini_array>:
__libc_fini_array():
20401cb8:	1141                	addi	sp,sp,-16
20401cba:	dfbfe797          	auipc	a5,0xdfbfe
20401cbe:	34678793          	addi	a5,a5,838 # 0 <__heap_size-0x400>
20401cc2:	c422                	sw	s0,8(sp)
20401cc4:	dfbfe417          	auipc	s0,0xdfbfe
20401cc8:	33c40413          	addi	s0,s0,828 # 0 <__heap_size-0x400>
20401ccc:	8c1d                	sub	s0,s0,a5
20401cce:	c226                	sw	s1,4(sp)
20401cd0:	c606                	sw	ra,12(sp)
20401cd2:	8409                	srai	s0,s0,0x2
20401cd4:	84be                	mv	s1,a5
20401cd6:	e419                	bnez	s0,20401ce4 <__libc_fini_array+0x2c>
20401cd8:	4422                	lw	s0,8(sp)
20401cda:	40b2                	lw	ra,12(sp)
20401cdc:	4492                	lw	s1,4(sp)
20401cde:	0141                	addi	sp,sp,16
20401ce0:	c52fe06f          	j	20400132 <_fini>
20401ce4:	147d                	addi	s0,s0,-1
20401ce6:	00241793          	slli	a5,s0,0x2
20401cea:	97a6                	add	a5,a5,s1
20401cec:	439c                	lw	a5,0(a5)
20401cee:	9782                	jalr	a5
20401cf0:	b7dd                	j	20401cd6 <__libc_fini_array+0x1e>

20401cf2 <__libc_init_array>:
__libc_init_array():
20401cf2:	1141                	addi	sp,sp,-16
20401cf4:	00002797          	auipc	a5,0x2
20401cf8:	f8478793          	addi	a5,a5,-124 # 20403c78 <__init_array_start>
20401cfc:	c422                	sw	s0,8(sp)
20401cfe:	00002417          	auipc	s0,0x2
20401d02:	f7a40413          	addi	s0,s0,-134 # 20403c78 <__init_array_start>
20401d06:	8c1d                	sub	s0,s0,a5
20401d08:	c226                	sw	s1,4(sp)
20401d0a:	c04a                	sw	s2,0(sp)
20401d0c:	c606                	sw	ra,12(sp)
20401d0e:	8409                	srai	s0,s0,0x2
20401d10:	4481                	li	s1,0
20401d12:	893e                	mv	s2,a5
20401d14:	02849863          	bne	s1,s0,20401d44 <__libc_init_array+0x52>
20401d18:	c1afe0ef          	jal	ra,20400132 <_fini>
20401d1c:	00002797          	auipc	a5,0x2
20401d20:	f5c78793          	addi	a5,a5,-164 # 20403c78 <__init_array_start>
20401d24:	00002417          	auipc	s0,0x2
20401d28:	f5840413          	addi	s0,s0,-168 # 20403c7c <__init_array_end>
20401d2c:	8c1d                	sub	s0,s0,a5
20401d2e:	8409                	srai	s0,s0,0x2
20401d30:	4481                	li	s1,0
20401d32:	893e                	mv	s2,a5
20401d34:	00849f63          	bne	s1,s0,20401d52 <__libc_init_array+0x60>
20401d38:	40b2                	lw	ra,12(sp)
20401d3a:	4422                	lw	s0,8(sp)
20401d3c:	4492                	lw	s1,4(sp)
20401d3e:	4902                	lw	s2,0(sp)
20401d40:	0141                	addi	sp,sp,16
20401d42:	8082                	ret
20401d44:	00249793          	slli	a5,s1,0x2
20401d48:	97ca                	add	a5,a5,s2
20401d4a:	439c                	lw	a5,0(a5)
20401d4c:	0485                	addi	s1,s1,1
20401d4e:	9782                	jalr	a5
20401d50:	b7d1                	j	20401d14 <__libc_init_array+0x22>
20401d52:	00249793          	slli	a5,s1,0x2
20401d56:	97ca                	add	a5,a5,s2
20401d58:	439c                	lw	a5,0(a5)
20401d5a:	0485                	addi	s1,s1,1
20401d5c:	9782                	jalr	a5
20401d5e:	bfd9                	j	20401d34 <__libc_init_array+0x42>

20401d60 <__register_exitproc>:
__register_exitproc():
20401d60:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
20401d64:	4398                	lw	a4,0(a5)
20401d66:	832a                	mv	t1,a0
20401d68:	14872783          	lw	a5,328(a4) # 80004148 <metal_segment_heap_target_end+0x148>
20401d6c:	e789                	bnez	a5,20401d76 <__register_exitproc+0x16>
20401d6e:	14c70793          	addi	a5,a4,332
20401d72:	14f72423          	sw	a5,328(a4)
20401d76:	43d8                	lw	a4,4(a5)
20401d78:	487d                	li	a6,31
20401d7a:	557d                	li	a0,-1
20401d7c:	04e84263          	blt	a6,a4,20401dc0 <__register_exitproc+0x60>
20401d80:	00271893          	slli	a7,a4,0x2
20401d84:	02030963          	beqz	t1,20401db6 <__register_exitproc+0x56>
20401d88:	01178533          	add	a0,a5,a7
20401d8c:	08c52423          	sw	a2,136(a0)
20401d90:	1887a803          	lw	a6,392(a5)
20401d94:	4605                	li	a2,1
20401d96:	00e61633          	sll	a2,a2,a4
20401d9a:	00c86833          	or	a6,a6,a2
20401d9e:	1907a423          	sw	a6,392(a5)
20401da2:	10d52423          	sw	a3,264(a0)
20401da6:	4689                	li	a3,2
20401da8:	00d31763          	bne	t1,a3,20401db6 <__register_exitproc+0x56>
20401dac:	18c7a683          	lw	a3,396(a5)
20401db0:	8e55                	or	a2,a2,a3
20401db2:	18c7a623          	sw	a2,396(a5)
20401db6:	0705                	addi	a4,a4,1
20401db8:	c3d8                	sw	a4,4(a5)
20401dba:	97c6                	add	a5,a5,a7
20401dbc:	c78c                	sw	a1,8(a5)
20401dbe:	4501                	li	a0,0
20401dc0:	8082                	ret

20401dc2 <__call_exitprocs>:
__call_exitprocs():
20401dc2:	7179                	addi	sp,sp,-48
20401dc4:	82018793          	addi	a5,gp,-2016 # 80001008 <_global_impure_ptr>
20401dc8:	ce4e                	sw	s3,28(sp)
20401dca:	0007a983          	lw	s3,0(a5)
20401dce:	cc52                	sw	s4,24(sp)
20401dd0:	ca56                	sw	s5,20(sp)
20401dd2:	c85a                	sw	s6,16(sp)
20401dd4:	d606                	sw	ra,44(sp)
20401dd6:	d422                	sw	s0,40(sp)
20401dd8:	d226                	sw	s1,36(sp)
20401dda:	d04a                	sw	s2,32(sp)
20401ddc:	c65e                	sw	s7,12(sp)
20401dde:	8aaa                	mv	s5,a0
20401de0:	8a2e                	mv	s4,a1
20401de2:	4b05                	li	s6,1
20401de4:	1489a483          	lw	s1,328(s3)
20401de8:	c881                	beqz	s1,20401df8 <__call_exitprocs+0x36>
20401dea:	40c0                	lw	s0,4(s1)
20401dec:	fff40913          	addi	s2,s0,-1
20401df0:	040a                	slli	s0,s0,0x2
20401df2:	9426                	add	s0,s0,s1
20401df4:	00095d63          	bgez	s2,20401e0e <__call_exitprocs+0x4c>
20401df8:	50b2                	lw	ra,44(sp)
20401dfa:	5422                	lw	s0,40(sp)
20401dfc:	5492                	lw	s1,36(sp)
20401dfe:	5902                	lw	s2,32(sp)
20401e00:	49f2                	lw	s3,28(sp)
20401e02:	4a62                	lw	s4,24(sp)
20401e04:	4ad2                	lw	s5,20(sp)
20401e06:	4b42                	lw	s6,16(sp)
20401e08:	4bb2                	lw	s7,12(sp)
20401e0a:	6145                	addi	sp,sp,48
20401e0c:	8082                	ret
20401e0e:	000a0963          	beqz	s4,20401e20 <__call_exitprocs+0x5e>
20401e12:	10442783          	lw	a5,260(s0)
20401e16:	01478563          	beq	a5,s4,20401e20 <__call_exitprocs+0x5e>
20401e1a:	197d                	addi	s2,s2,-1
20401e1c:	1471                	addi	s0,s0,-4
20401e1e:	bfd9                	j	20401df4 <__call_exitprocs+0x32>
20401e20:	40d8                	lw	a4,4(s1)
20401e22:	405c                	lw	a5,4(s0)
20401e24:	177d                	addi	a4,a4,-1
20401e26:	03271663          	bne	a4,s2,20401e52 <__call_exitprocs+0x90>
20401e2a:	0124a223          	sw	s2,4(s1)
20401e2e:	d7f5                	beqz	a5,20401e1a <__call_exitprocs+0x58>
20401e30:	1884a683          	lw	a3,392(s1)
20401e34:	012b1733          	sll	a4,s6,s2
20401e38:	0044ab83          	lw	s7,4(s1)
20401e3c:	8ef9                	and	a3,a3,a4
20401e3e:	ee89                	bnez	a3,20401e58 <__call_exitprocs+0x96>
20401e40:	9782                	jalr	a5
20401e42:	40dc                	lw	a5,4(s1)
20401e44:	fb7790e3          	bne	a5,s7,20401de4 <__call_exitprocs+0x22>
20401e48:	1489a783          	lw	a5,328(s3)
20401e4c:	fc9787e3          	beq	a5,s1,20401e1a <__call_exitprocs+0x58>
20401e50:	bf51                	j	20401de4 <__call_exitprocs+0x22>
20401e52:	00042223          	sw	zero,4(s0)
20401e56:	bfe1                	j	20401e2e <__call_exitprocs+0x6c>
20401e58:	18c4a683          	lw	a3,396(s1)
20401e5c:	08442583          	lw	a1,132(s0)
20401e60:	8f75                	and	a4,a4,a3
20401e62:	e701                	bnez	a4,20401e6a <__call_exitprocs+0xa8>
20401e64:	8556                	mv	a0,s5
20401e66:	9782                	jalr	a5
20401e68:	bfe9                	j	20401e42 <__call_exitprocs+0x80>
20401e6a:	852e                	mv	a0,a1
20401e6c:	9782                	jalr	a5
20401e6e:	bfd1                	j	20401e42 <__call_exitprocs+0x80>

20401e70 <metal_tty_putc>:
metal_tty_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:11

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(unsigned char c)
{
20401e70:	7179                	addi	sp,sp,-48
20401e72:	d606                	sw	ra,44(sp)
20401e74:	d422                	sw	s0,40(sp)
20401e76:	1800                	addi	s0,sp,48
20401e78:	87aa                	mv	a5,a0
20401e7a:	fcf40fa3          	sb	a5,-33(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:12
    if (c == '\n') {
20401e7e:	fdf44703          	lbu	a4,-33(s0)
20401e82:	47a9                	li	a5,10
20401e84:	02f71063          	bne	a4,a5,20401ea4 <metal_tty_putc+0x34>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:13
        int out = metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, '\r');
20401e88:	45b5                	li	a1,13
20401e8a:	800017b7          	lui	a5,0x80001
20401e8e:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
20401e92:	28ad                	jal	20401f0c <metal_uart_putc>
20401e94:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:14
        if (out != 0)
20401e98:	fec42783          	lw	a5,-20(s0)
20401e9c:	c781                	beqz	a5,20401ea4 <metal_tty_putc+0x34>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:15
            return out;
20401e9e:	fec42783          	lw	a5,-20(s0)
20401ea2:	a811                	j	20401eb6 <metal_tty_putc+0x46>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:17
    }
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401ea4:	fdf44783          	lbu	a5,-33(s0)
20401ea8:	85be                	mv	a1,a5
20401eaa:	800017b7          	lui	a5,0x80001
20401eae:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
20401eb2:	28a9                	jal	20401f0c <metal_uart_putc>
20401eb4:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:18
}
20401eb6:	853e                	mv	a0,a5
20401eb8:	50b2                	lw	ra,44(sp)
20401eba:	5422                	lw	s0,40(sp)
20401ebc:	6145                	addi	sp,sp,48
20401ebe:	8082                	ret

20401ec0 <metal_tty_init>:
metal_tty_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:26
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401ec0:	1141                	addi	sp,sp,-16
20401ec2:	c606                	sw	ra,12(sp)
20401ec4:	c422                	sw	s0,8(sp)
20401ec6:	0800                	addi	s0,sp,16
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:27
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401ec8:	67f1                	lui	a5,0x1c
20401eca:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1be00>
20401ece:	800017b7          	lui	a5,0x80001
20401ed2:	fb878513          	addi	a0,a5,-72 # 80000fb8 <metal_segment_heap_target_end+0xffffcfb8>
20401ed6:	2031                	jal	20401ee2 <metal_uart_init>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/tty.c:28
}
20401ed8:	0001                	nop
20401eda:	40b2                	lw	ra,12(sp)
20401edc:	4422                	lw	s0,8(sp)
20401ede:	0141                	addi	sp,sp,16
20401ee0:	8082                	ret

20401ee2 <metal_uart_init>:
metal_uart_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:42
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
inline void metal_uart_init(struct metal_uart *uart, int baud_rate) { return uart->vtable->init(uart, baud_rate); }
20401ee2:	1101                	addi	sp,sp,-32
20401ee4:	ce06                	sw	ra,28(sp)
20401ee6:	cc22                	sw	s0,24(sp)
20401ee8:	1000                	addi	s0,sp,32
20401eea:	fea42623          	sw	a0,-20(s0)
20401eee:	feb42423          	sw	a1,-24(s0)
20401ef2:	fec42783          	lw	a5,-20(s0)
20401ef6:	439c                	lw	a5,0(a5)
20401ef8:	439c                	lw	a5,0(a5)
20401efa:	fe842583          	lw	a1,-24(s0)
20401efe:	fec42503          	lw	a0,-20(s0)
20401f02:	9782                	jalr	a5
20401f04:	40f2                	lw	ra,28(sp)
20401f06:	4462                	lw	s0,24(sp)
20401f08:	6105                	addi	sp,sp,32
20401f0a:	8082                	ret

20401f0c <metal_uart_putc>:
metal_uart_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:50
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
inline int metal_uart_putc(struct metal_uart *uart, unsigned char c) { return uart->vtable->putc(uart, c); }
20401f0c:	1101                	addi	sp,sp,-32
20401f0e:	ce06                	sw	ra,28(sp)
20401f10:	cc22                	sw	s0,24(sp)
20401f12:	1000                	addi	s0,sp,32
20401f14:	fea42623          	sw	a0,-20(s0)
20401f18:	87ae                	mv	a5,a1
20401f1a:	fef405a3          	sb	a5,-21(s0)
20401f1e:	fec42783          	lw	a5,-20(s0)
20401f22:	439c                	lw	a5,0(a5)
20401f24:	43d8                	lw	a4,4(a5)
20401f26:	feb44783          	lbu	a5,-21(s0)
20401f2a:	85be                	mv	a1,a5
20401f2c:	fec42503          	lw	a0,-20(s0)
20401f30:	9702                	jalr	a4
20401f32:	87aa                	mv	a5,a0
20401f34:	853e                	mv	a0,a5
20401f36:	40f2                	lw	ra,28(sp)
20401f38:	4462                	lw	s0,24(sp)
20401f3a:	6105                	addi	sp,sp,32
20401f3c:	8082                	ret

20401f3e <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/uart.h:73
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
inline int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401f3e:	1101                	addi	sp,sp,-32
20401f40:	ce06                	sw	ra,28(sp)
20401f42:	cc22                	sw	s0,24(sp)
20401f44:	1000                	addi	s0,sp,32
20401f46:	fea42623          	sw	a0,-20(s0)
20401f4a:	feb42423          	sw	a1,-24(s0)
20401f4e:	fec42783          	lw	a5,-20(s0)
20401f52:	439c                	lw	a5,0(a5)
20401f54:	4b9c                	lw	a5,16(a5)
20401f56:	fe842583          	lw	a1,-24(s0)
20401f5a:	fec42503          	lw	a0,-20(s0)
20401f5e:	9782                	jalr	a5
20401f60:	87aa                	mv	a5,a0
20401f62:	853e                	mv	a0,a5
20401f64:	40f2                	lw	ra,28(sp)
20401f66:	4462                	lw	s0,24(sp)
20401f68:	6105                	addi	sp,sp,32
20401f6a:	8082                	ret

20401f6c <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:8

#include <metal/drivers/fixed-clock.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20401f6c:	7179                	addi	sp,sp,-48
20401f6e:	d622                	sw	s0,44(sp)
20401f70:	1800                	addi	s0,sp,48
20401f72:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:9
    const struct __metal_driver_fixed_clock *clk = (void *)gclk;
20401f76:	fdc42783          	lw	a5,-36(s0)
20401f7a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:10
    return clk->rate;
20401f7e:	fec42783          	lw	a5,-20(s0)
20401f82:	4f9c                	lw	a5,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:11
}
20401f84:	853e                	mv	a0,a5
20401f86:	5432                	lw	s0,44(sp)
20401f88:	6145                	addi	sp,sp,48
20401f8a:	8082                	ret

20401f8c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20401f8c:	1101                	addi	sp,sp,-32
20401f8e:	ce06                	sw	ra,28(sp)
20401f90:	cc22                	sw	s0,24(sp)
20401f92:	1000                	addi	s0,sp,32
20401f94:	fea42623          	sw	a0,-20(s0)
20401f98:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20401f9c:	fec42503          	lw	a0,-20(s0)
20401fa0:	37f1                	jal	20401f6c <__metal_driver_fixed_clock_get_rate_hz>
20401fa2:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:16
}
20401fa4:	853e                	mv	a0,a5
20401fa6:	40f2                	lw	ra,28(sp)
20401fa8:	4462                	lw	s0,24(sp)
20401faa:	6105                	addi	sp,sp,32
20401fac:	8082                	ret

20401fae <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:8

#include <metal/io.h>
#include <metal/drivers/riscv,clint0.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401fae:	7179                	addi	sp,sp,-48
20401fb0:	d622                	sw	s0,44(sp)
20401fb2:	1800                	addi	s0,sp,48
20401fb4:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:13 (discriminator 1)
    __metal_io_u32 lo, hi;

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4));
20401fb8:	fdc42503          	lw	a0,-36(s0)
20401fbc:	00852883          	lw	a7,8(a0)
20401fc0:	6531                	lui	a0,0xc
20401fc2:	1571                	addi	a0,a0,-4
20401fc4:	9546                	add	a0,a0,a7
20401fc6:	4108                	lw	a0,0(a0)
20401fc8:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:14 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET));
20401fcc:	fdc42503          	lw	a0,-36(s0)
20401fd0:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20401fd4:	6531                	lui	a0,0xc
20401fd6:	1561                	addi	a0,a0,-8
20401fd8:	9546                	add	a0,a0,a7
20401fda:	4108                	lw	a0,0(a0)
20401fdc:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:15 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4)) != hi);
20401fe0:	fdc42503          	lw	a0,-36(s0)
20401fe4:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20401fe8:	6531                	lui	a0,0xc
20401fea:	1571                	addi	a0,a0,-4
20401fec:	9546                	add	a0,a0,a7
20401fee:	4108                	lw	a0,0(a0)
20401ff0:	fec42883          	lw	a7,-20(s0)
20401ff4:	fca892e3          	bne	a7,a0,20401fb8 <__metal_clint0_mtime_get+0xa>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:17

    return (((unsigned long long)hi) << 32) | lo;
20401ff8:	fec42503          	lw	a0,-20(s0)
20401ffc:	832a                	mv	t1,a0
20401ffe:	4381                	li	t2,0
20402000:	00031813          	slli	a6,t1,0x0
20402004:	4781                	li	a5,0
20402006:	fe842503          	lw	a0,-24(s0)
2040200a:	86aa                	mv	a3,a0
2040200c:	4701                	li	a4,0
2040200e:	00d7e5b3          	or	a1,a5,a3
20402012:	00e86633          	or	a2,a6,a4
20402016:	87ae                	mv	a5,a1
20402018:	8832                	mv	a6,a2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:18
}
2040201a:	853e                	mv	a0,a5
2040201c:	85c2                	mv	a1,a6
2040201e:	5432                	lw	s0,44(sp)
20402020:	6145                	addi	sp,sp,48
20402022:	8082                	ret

20402024 <__metal_clint0_mtime_set>:
__metal_clint0_mtime_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:21

int __metal_clint0_mtime_set (struct __metal_driver_riscv_clint0 *clint, unsigned long long time)
{   
20402024:	1101                	addi	sp,sp,-32
20402026:	ce22                	sw	s0,28(sp)
20402028:	1000                	addi	s0,sp,32
2040202a:	fea42623          	sw	a0,-20(s0)
2040202e:	feb42023          	sw	a1,-32(s0)
20402032:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:28
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = 0xFFFFFFFF;
20402036:	fec42703          	lw	a4,-20(s0)
2040203a:	4714                	lw	a3,8(a4)
2040203c:	6711                	lui	a4,0x4
2040203e:	0711                	addi	a4,a4,4
20402040:	9736                	add	a4,a4,a3
20402042:	86ba                	mv	a3,a4
20402044:	577d                	li	a4,-1
20402046:	c298                	sw	a4,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:29
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET)) = (__metal_io_u32)time;
20402048:	fec42703          	lw	a4,-20(s0)
2040204c:	4714                	lw	a3,8(a4)
2040204e:	6711                	lui	a4,0x4
20402050:	9736                	add	a4,a4,a3
20402052:	86ba                	mv	a3,a4
20402054:	fe042703          	lw	a4,-32(s0)
20402058:	c298                	sw	a4,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:30
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = (__metal_io_u32)(time >> 32);
2040205a:	fe442703          	lw	a4,-28(s0)
2040205e:	00075793          	srli	a5,a4,0x0
20402062:	4801                	li	a6,0
20402064:	fec42703          	lw	a4,-20(s0)
20402068:	4714                	lw	a3,8(a4)
2040206a:	6711                	lui	a4,0x4
2040206c:	0711                	addi	a4,a4,4
2040206e:	9736                	add	a4,a4,a3
20402070:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:31
    return 0;
20402072:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:32
}
20402074:	853e                	mv	a0,a5
20402076:	4472                	lw	s0,28(sp)
20402078:	6105                	addi	sp,sp,32
2040207a:	8082                	ret

2040207c <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:35

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
2040207c:	7179                	addi	sp,sp,-48
2040207e:	d606                	sw	ra,44(sp)
20402080:	d422                	sw	s0,40(sp)
20402082:	1800                	addi	s0,sp,48
20402084:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:36
    struct __metal_driver_riscv_clint0 *clint =
20402088:	fdc42783          	lw	a5,-36(s0)
2040208c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:39
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402090:	fe842783          	lw	a5,-24(s0)
20402094:	4b9c                	lw	a5,16(a5)
20402096:	efa9                	bnez	a5,204020f0 <__metal_driver_riscv_clint0_init+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:40
        struct metal_interrupt *intc = clint->interrupt_parent;
20402098:	fe842783          	lw	a5,-24(s0)
2040209c:	4bdc                	lw	a5,20(a5)
2040209e:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43

	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < clint->num_interrupts; i++) {
204020a2:	fe042623          	sw	zero,-20(s0)
204020a6:	a815                	j	204020da <__metal_driver_riscv_clint0_init+0x5e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:44 (discriminator 3)
            intc->vtable->interrupt_register(intc,
204020a8:	fe442783          	lw	a5,-28(s0)
204020ac:	439c                	lw	a5,0(a5)
204020ae:	0047a803          	lw	a6,4(a5)
204020b2:	fe842703          	lw	a4,-24(s0)
204020b6:	fec42783          	lw	a5,-20(s0)
204020ba:	0791                	addi	a5,a5,4
204020bc:	078a                	slli	a5,a5,0x2
204020be:	97ba                	add	a5,a5,a4
204020c0:	47dc                	lw	a5,12(a5)
204020c2:	fe842683          	lw	a3,-24(s0)
204020c6:	4601                	li	a2,0
204020c8:	85be                	mv	a1,a5
204020ca:	fe442503          	lw	a0,-28(s0)
204020ce:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 3)
        for (int i = 0; i < clint->num_interrupts; i++) {
204020d0:	fec42783          	lw	a5,-20(s0)
204020d4:	0785                	addi	a5,a5,1
204020d6:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 1)
204020da:	fe842783          	lw	a5,-24(s0)
204020de:	4f9c                	lw	a5,24(a5)
204020e0:	fec42703          	lw	a4,-20(s0)
204020e4:	fcf742e3          	blt	a4,a5,204020a8 <__metal_driver_riscv_clint0_init+0x2c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:48
					     clint->interrupt_lines[i],
					     NULL, clint);
	}
	clint->init_done = 1;
204020e8:	fe842783          	lw	a5,-24(s0)
204020ec:	4705                	li	a4,1
204020ee:	cb98                	sw	a4,16(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:50
    }	
}
204020f0:	0001                	nop
204020f2:	50b2                	lw	ra,44(sp)
204020f4:	5422                	lw	s0,40(sp)
204020f6:	6145                	addi	sp,sp,48
204020f8:	8082                	ret

204020fa <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:55

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204020fa:	7179                	addi	sp,sp,-48
204020fc:	d606                	sw	ra,44(sp)
204020fe:	d422                	sw	s0,40(sp)
20402100:	1800                	addi	s0,sp,48
20402102:	fca42e23          	sw	a0,-36(s0)
20402106:	fcb42c23          	sw	a1,-40(s0)
2040210a:	fcc42a23          	sw	a2,-44(s0)
2040210e:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:56
    int rc = -1;
20402112:	57fd                	li	a5,-1
20402114:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:57
    struct __metal_driver_riscv_clint0 *clint =
20402118:	fdc42783          	lw	a5,-36(s0)
2040211c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:59
                              (struct __metal_driver_riscv_clint0 *)(controller);
    struct metal_interrupt *intc = clint->interrupt_parent;
20402120:	fe842783          	lw	a5,-24(s0)
20402124:	4bdc                	lw	a5,20(a5)
20402126:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:62

    /* Register its interrupts with parent controller */
    if (intc) {
2040212a:	fe442783          	lw	a5,-28(s0)
2040212e:	c385                	beqz	a5,2040214e <__metal_driver_riscv_clint0_register+0x54>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:63
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402130:	fe442783          	lw	a5,-28(s0)
20402134:	439c                	lw	a5,0(a5)
20402136:	43dc                	lw	a5,4(a5)
20402138:	fd042683          	lw	a3,-48(s0)
2040213c:	fd442603          	lw	a2,-44(s0)
20402140:	fd842583          	lw	a1,-40(s0)
20402144:	fe442503          	lw	a0,-28(s0)
20402148:	9782                	jalr	a5
2040214a:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:65
    }
    return rc;
2040214e:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:66
}
20402152:	853e                	mv	a0,a5
20402154:	50b2                	lw	ra,44(sp)
20402156:	5422                	lw	s0,40(sp)
20402158:	6145                	addi	sp,sp,48
2040215a:	8082                	ret

2040215c <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:69

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
2040215c:	7179                	addi	sp,sp,-48
2040215e:	d606                	sw	ra,44(sp)
20402160:	d422                	sw	s0,40(sp)
20402162:	1800                	addi	s0,sp,48
20402164:	fca42e23          	sw	a0,-36(s0)
20402168:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:70
    int rc = -1;
2040216c:	57fd                	li	a5,-1
2040216e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:71
    struct __metal_driver_riscv_clint0 *clint =
20402172:	fdc42783          	lw	a5,-36(s0)
20402176:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:74
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
2040217a:	fd842783          	lw	a5,-40(s0)
2040217e:	c785                	beqz	a5,204021a6 <__metal_driver_riscv_clint0_enable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:75
        struct metal_interrupt *intc = clint->interrupt_parent;
20402180:	fe842783          	lw	a5,-24(s0)
20402184:	4bdc                	lw	a5,20(a5)
20402186:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:78
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2040218a:	fe442783          	lw	a5,-28(s0)
2040218e:	cf81                	beqz	a5,204021a6 <__metal_driver_riscv_clint0_enable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:79
            rc = intc->vtable->interrupt_enable(intc, id);
20402190:	fe442783          	lw	a5,-28(s0)
20402194:	439c                	lw	a5,0(a5)
20402196:	479c                	lw	a5,8(a5)
20402198:	fd842583          	lw	a1,-40(s0)
2040219c:	fe442503          	lw	a0,-28(s0)
204021a0:	9782                	jalr	a5
204021a2:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:82
        }
    }
}
204021a6:	0001                	nop
204021a8:	853e                	mv	a0,a5
204021aa:	50b2                	lw	ra,44(sp)
204021ac:	5422                	lw	s0,40(sp)
204021ae:	6145                	addi	sp,sp,48
204021b0:	8082                	ret

204021b2 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:85

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204021b2:	7179                	addi	sp,sp,-48
204021b4:	d606                	sw	ra,44(sp)
204021b6:	d422                	sw	s0,40(sp)
204021b8:	1800                	addi	s0,sp,48
204021ba:	fca42e23          	sw	a0,-36(s0)
204021be:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:86
    int rc = -1;
204021c2:	57fd                	li	a5,-1
204021c4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:87
    struct __metal_driver_riscv_clint0 *clint =
204021c8:	fdc42783          	lw	a5,-36(s0)
204021cc:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:90
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
204021d0:	fd842783          	lw	a5,-40(s0)
204021d4:	c785                	beqz	a5,204021fc <__metal_driver_riscv_clint0_disable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:91
        struct metal_interrupt *intc = clint->interrupt_parent;
204021d6:	fe842783          	lw	a5,-24(s0)
204021da:	4bdc                	lw	a5,20(a5)
204021dc:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:94
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204021e0:	fe442783          	lw	a5,-28(s0)
204021e4:	cf81                	beqz	a5,204021fc <__metal_driver_riscv_clint0_disable+0x4a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:95
            rc = intc->vtable->interrupt_disable(intc, id);
204021e6:	fe442783          	lw	a5,-28(s0)
204021ea:	439c                	lw	a5,0(a5)
204021ec:	47dc                	lw	a5,12(a5)
204021ee:	fd842583          	lw	a1,-40(s0)
204021f2:	fe442503          	lw	a0,-28(s0)
204021f6:	9782                	jalr	a5
204021f8:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:98
        }
    }
}
204021fc:	0001                	nop
204021fe:	853e                	mv	a0,a5
20402200:	50b2                	lw	ra,44(sp)
20402202:	5422                	lw	s0,40(sp)
20402204:	6145                	addi	sp,sp,48
20402206:	8082                	ret

20402208 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:102

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402208:	7179                	addi	sp,sp,-48
2040220a:	d606                	sw	ra,44(sp)
2040220c:	d422                	sw	s0,40(sp)
2040220e:	1800                	addi	s0,sp,48
20402210:	fca42e23          	sw	a0,-36(s0)
20402214:	fcb42c23          	sw	a1,-40(s0)
20402218:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:104
    int hartid;
    int rc = -1;
2040221c:	57fd                	li	a5,-1
2040221e:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:105
    struct __metal_driver_riscv_clint0 *clint =
20402222:	fdc42783          	lw	a5,-36(s0)
20402226:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:108
                              (struct __metal_driver_riscv_clint0 *)(controller);

    switch (command) {
2040222a:	fd842703          	lw	a4,-40(s0)
2040222e:	4795                	li	a5,5
20402230:	0ce7eb63          	bltu	a5,a4,20402306 <__metal_driver_riscv_clint0_command_request+0xfe>
20402234:	fd842783          	lw	a5,-40(s0)
20402238:	00279713          	slli	a4,a5,0x2
2040223c:	204047b7          	lui	a5,0x20404
20402240:	af878793          	addi	a5,a5,-1288 # 20403af8 <__metal_driver_vtable_sifive_uart0+0x1c>
20402244:	97ba                	add	a5,a5,a4
20402246:	439c                	lw	a5,0(a5)
20402248:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:110
    case METAL_TIMER_MTIME_GET:
        if (data) {
2040224a:	fd442783          	lw	a5,-44(s0)
2040224e:	cfd5                	beqz	a5,2040230a <__metal_driver_riscv_clint0_command_request+0x102>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:111
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402250:	fe842503          	lw	a0,-24(s0)
20402254:	3ba9                	jal	20401fae <__metal_clint0_mtime_get>
20402256:	87aa                	mv	a5,a0
20402258:	882e                	mv	a6,a1
2040225a:	fd442703          	lw	a4,-44(s0)
2040225e:	c31c                	sw	a5,0(a4)
20402260:	01072223          	sw	a6,4(a4) # 4004 <__heap_size+0x3c04>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:112
            rc = 0;
20402264:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        }
        break;
20402268:	a04d                	j	2040230a <__metal_driver_riscv_clint0_command_request+0x102>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:116
    case METAL_TIMER_MTIME_SET:
        if (data) {
2040226a:	fd442783          	lw	a5,-44(s0)
2040226e:	c3c5                	beqz	a5,2040230e <__metal_driver_riscv_clint0_command_request+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:117
	    __metal_clint0_mtime_set(clint, *(unsigned long long *)data);
20402270:	fd442783          	lw	a5,-44(s0)
20402274:	0047a803          	lw	a6,4(a5)
20402278:	439c                	lw	a5,0(a5)
2040227a:	85be                	mv	a1,a5
2040227c:	8642                	mv	a2,a6
2040227e:	fe842503          	lw	a0,-24(s0)
20402282:	334d                	jal	20402024 <__metal_clint0_mtime_set>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:118
            rc = 0;
20402284:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        }
        break;
20402288:	a059                	j	2040230e <__metal_driver_riscv_clint0_command_request+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:122
    case METAL_SOFTWARE_IPI_CLEAR:
	if (data) {
2040228a:	fd442783          	lw	a5,-44(s0)
2040228e:	c3d1                	beqz	a5,20402312 <__metal_driver_riscv_clint0_command_request+0x10a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:123
	    hartid = *(int *)data;
20402290:	fd442783          	lw	a5,-44(s0)
20402294:	439c                	lw	a5,0(a5)
20402296:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:124
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
2040229a:	fe842783          	lw	a5,-24(s0)
2040229e:	479c                	lw	a5,8(a5)
204022a0:	fe442703          	lw	a4,-28(s0)
204022a4:	070a                	slli	a4,a4,0x2
204022a6:	97ba                	add	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:125
					       (hartid * 4))) = METAL_DISABLE;
204022a8:	0007a023          	sw	zero,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:126
            rc = 0;
204022ac:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        }
        break;
204022b0:	a08d                	j	20402312 <__metal_driver_riscv_clint0_command_request+0x10a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:130
    case METAL_SOFTWARE_IPI_SET:
	if (data) {
204022b2:	fd442783          	lw	a5,-44(s0)
204022b6:	c3a5                	beqz	a5,20402316 <__metal_driver_riscv_clint0_command_request+0x10e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:131
	    hartid = *(int *)data;
204022b8:	fd442783          	lw	a5,-44(s0)
204022bc:	439c                	lw	a5,0(a5)
204022be:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:132
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
204022c2:	fe842783          	lw	a5,-24(s0)
204022c6:	479c                	lw	a5,8(a5)
204022c8:	fe442703          	lw	a4,-28(s0)
204022cc:	070a                	slli	a4,a4,0x2
204022ce:	97ba                	add	a5,a5,a4
204022d0:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:133
					       (hartid * 4))) = METAL_ENABLE;
204022d2:	4785                	li	a5,1
204022d4:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:134
            rc = 0;
204022d6:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        }
        break;
204022da:	a835                	j	20402316 <__metal_driver_riscv_clint0_command_request+0x10e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:138
    case METAL_SOFTWARE_MSIP_GET:
        rc = 0;
204022dc:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:139
	if (data) {
204022e0:	fd442783          	lw	a5,-44(s0)
204022e4:	cb9d                	beqz	a5,2040231a <__metal_driver_riscv_clint0_command_request+0x112>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:140
	    hartid = *(int *)data;
204022e6:	fd442783          	lw	a5,-44(s0)
204022ea:	439c                	lw	a5,0(a5)
204022ec:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:141
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
204022f0:	fe842783          	lw	a5,-24(s0)
204022f4:	479c                	lw	a5,8(a5)
204022f6:	fe442703          	lw	a4,-28(s0)
204022fa:	070a                	slli	a4,a4,0x2
204022fc:	97ba                	add	a5,a5,a4
204022fe:	439c                	lw	a5,0(a5)
20402300:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
						    (hartid * 4)));
        }
        break;
20402304:	a819                	j	2040231a <__metal_driver_riscv_clint0_command_request+0x112>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:146
    default:
	break;
20402306:	0001                	nop
20402308:	a811                	j	2040231c <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:114
        break;
2040230a:	0001                	nop
2040230c:	a801                	j	2040231c <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:120
        break;
2040230e:	0001                	nop
20402310:	a031                	j	2040231c <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:128
        break;
20402312:	0001                	nop
20402314:	a021                	j	2040231c <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:136
        break;
20402316:	0001                	nop
20402318:	a011                	j	2040231c <__metal_driver_riscv_clint0_command_request+0x114>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:144
        break;
2040231a:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:149
    }

    return rc;
2040231c:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,clint0.c:150
}
20402320:	853e                	mv	a0,a5
20402322:	50b2                	lw	ra,44(sp)
20402324:	5422                	lw	s0,40(sp)
20402326:	6145                	addi	sp,sp,48
20402328:	8082                	ret

2040232a <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:10
#include <metal/io.h>
#include <metal/shutdown.h>
#include <metal/machine.h>

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040232a:	1101                	addi	sp,sp,-32
2040232c:	ce22                	sw	s0,28(sp)
2040232e:	1000                	addi	s0,sp,32
20402330:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:11
    if (hartid < __METAL_DT_MAX_HARTS) {
20402334:	fec42783          	lw	a5,-20(s0)
20402338:	00f04a63          	bgtz	a5,2040234c <__metal_driver_cpu_get+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:12
        return &(__metal_cpu_table[hartid]->cpu);
2040233c:	fec42703          	lw	a4,-20(s0)
20402340:	070a                	slli	a4,a4,0x2
20402342:	81818793          	addi	a5,gp,-2024 # 80001000 <__metal_cpu_table>
20402346:	97ba                	add	a5,a5,a4
20402348:	439c                	lw	a5,0(a5)
2040234a:	a011                	j	2040234e <__metal_driver_cpu_get+0x24>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:14
    }
    return (struct metal_cpu *)NULL;
2040234c:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:15
}
2040234e:	853e                	mv	a0,a5
20402350:	4472                	lw	s0,28(sp)
20402352:	6105                	addi	sp,sp,32
20402354:	8082                	ret

20402356 <__metal_myhart_id>:
__metal_myhart_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:18

uintptr_t __metal_myhart_id (void)
{
20402356:	1101                	addi	sp,sp,-32
20402358:	ce22                	sw	s0,28(sp)
2040235a:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:20
    uintptr_t myhart;
    asm volatile ("csrr %0, mhartid" : "=r"(myhart));
2040235c:	f14027f3          	csrr	a5,mhartid
20402360:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:21
    return myhart;
20402364:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:22
}
20402368:	853e                	mv	a0,a5
2040236a:	4472                	lw	s0,28(sp)
2040236c:	6105                	addi	sp,sp,32
2040236e:	8082                	ret

20402370 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:32
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402370:	1101                	addi	sp,sp,-32
20402372:	ce22                	sw	s0,28(sp)
20402374:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:34
    uintptr_t m;
    asm volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402376:	47a1                	li	a5,8
20402378:	3007a7f3          	csrrs	a5,mstatus,a5
2040237c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:35
}
20402380:	0001                	nop
20402382:	4472                	lw	s0,28(sp)
20402384:	6105                	addi	sp,sp,32
20402386:	8082                	ret

20402388 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:37

void __metal_interrupt_global_disable (void) {
20402388:	1101                	addi	sp,sp,-32
2040238a:	ce22                	sw	s0,28(sp)
2040238c:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:39
    uintptr_t m;
    asm volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040238e:	47a1                	li	a5,8
20402390:	3007b7f3          	csrrc	a5,mstatus,a5
20402394:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:40
}
20402398:	0001                	nop
2040239a:	4472                	lw	s0,28(sp)
2040239c:	6105                	addi	sp,sp,32
2040239e:	8082                	ret

204023a0 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:42

void __metal_interrupt_software_enable (void) {
204023a0:	1101                	addi	sp,sp,-32
204023a2:	ce22                	sw	s0,28(sp)
204023a4:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:44
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204023a6:	47a1                	li	a5,8
204023a8:	3047a7f3          	csrrs	a5,mie,a5
204023ac:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:45
}
204023b0:	0001                	nop
204023b2:	4472                	lw	s0,28(sp)
204023b4:	6105                	addi	sp,sp,32
204023b6:	8082                	ret

204023b8 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:47

void __metal_interrupt_software_disable (void) {
204023b8:	1101                	addi	sp,sp,-32
204023ba:	ce22                	sw	s0,28(sp)
204023bc:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:49
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204023be:	47a1                	li	a5,8
204023c0:	3047b7f3          	csrrc	a5,mie,a5
204023c4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:50
}
204023c8:	0001                	nop
204023ca:	4472                	lw	s0,28(sp)
204023cc:	6105                	addi	sp,sp,32
204023ce:	8082                	ret

204023d0 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:52

void __metal_interrupt_timer_enable (void) {
204023d0:	1101                	addi	sp,sp,-32
204023d2:	ce22                	sw	s0,28(sp)
204023d4:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:54
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204023d6:	08000793          	li	a5,128
204023da:	3047a7f3          	csrrs	a5,mie,a5
204023de:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:55
}
204023e2:	0001                	nop
204023e4:	4472                	lw	s0,28(sp)
204023e6:	6105                	addi	sp,sp,32
204023e8:	8082                	ret

204023ea <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:57

void __metal_interrupt_timer_disable (void) {
204023ea:	1101                	addi	sp,sp,-32
204023ec:	ce22                	sw	s0,28(sp)
204023ee:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:59
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204023f0:	08000793          	li	a5,128
204023f4:	3047b7f3          	csrrc	a5,mie,a5
204023f8:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:60
}
204023fc:	0001                	nop
204023fe:	4472                	lw	s0,28(sp)
20402400:	6105                	addi	sp,sp,32
20402402:	8082                	ret

20402404 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:62

void __metal_interrupt_external_enable (void) {
20402404:	1101                	addi	sp,sp,-32
20402406:	ce22                	sw	s0,28(sp)
20402408:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:64
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040240a:	6785                	lui	a5,0x1
2040240c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
20402410:	3047a7f3          	csrrs	a5,mie,a5
20402414:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:65
}
20402418:	0001                	nop
2040241a:	4472                	lw	s0,28(sp)
2040241c:	6105                	addi	sp,sp,32
2040241e:	8082                	ret

20402420 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:67

void __metal_interrupt_external_disable (void) {
20402420:	1101                	addi	sp,sp,-32
20402422:	ce22                	sw	s0,28(sp)
20402424:	1000                	addi	s0,sp,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:69
    unsigned long m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402426:	6785                	lui	a5,0x1
20402428:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
2040242c:	3047b7f3          	csrrc	a5,mie,a5
20402430:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:70
}
20402434:	0001                	nop
20402436:	4472                	lw	s0,28(sp)
20402438:	6105                	addi	sp,sp,32
2040243a:	8082                	ret

2040243c <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:72

void __metal_interrupt_local_enable (int id) {
2040243c:	7179                	addi	sp,sp,-48
2040243e:	d622                	sw	s0,44(sp)
20402440:	1800                	addi	s0,sp,48
20402442:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:73
    uintptr_t b = 1 << id;
20402446:	fdc42783          	lw	a5,-36(s0)
2040244a:	4705                	li	a4,1
2040244c:	00f717b3          	sll	a5,a4,a5
20402450:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:75
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402454:	fec42783          	lw	a5,-20(s0)
20402458:	3047a7f3          	csrrs	a5,mie,a5
2040245c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:76
}
20402460:	0001                	nop
20402462:	5432                	lw	s0,44(sp)
20402464:	6145                	addi	sp,sp,48
20402466:	8082                	ret

20402468 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:78

void __metal_interrupt_local_disable (int id) {
20402468:	7179                	addi	sp,sp,-48
2040246a:	d622                	sw	s0,44(sp)
2040246c:	1800                	addi	s0,sp,48
2040246e:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:79
    uintptr_t b = 1 << id;
20402472:	fdc42783          	lw	a5,-36(s0)
20402476:	4705                	li	a4,1
20402478:	00f717b3          	sll	a5,a4,a5
2040247c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:81
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402480:	fec42783          	lw	a5,-20(s0)
20402484:	3047b7f3          	csrrc	a5,mie,a5
20402488:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:82
}
2040248c:	0001                	nop
2040248e:	5432                	lw	s0,44(sp)
20402490:	6145                	addi	sp,sp,48
20402492:	8082                	ret

20402494 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:84

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402494:	1101                	addi	sp,sp,-32
20402496:	ce06                	sw	ra,28(sp)
20402498:	cc22                	sw	s0,24(sp)
2040249a:	1000                	addi	s0,sp,32
2040249c:	fea42623          	sw	a0,-20(s0)
204024a0:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:85
    metal_shutdown(100);
204024a4:	06400513          	li	a0,100
204024a8:	53c010ef          	jal	ra,204039e4 <metal_shutdown>

204024ac <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:88
}

void __metal_default_interrupt_handler (int id, void *priv) {
204024ac:	1101                	addi	sp,sp,-32
204024ae:	ce06                	sw	ra,28(sp)
204024b0:	cc22                	sw	s0,24(sp)
204024b2:	1000                	addi	s0,sp,32
204024b4:	fea42623          	sw	a0,-20(s0)
204024b8:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:89
    metal_shutdown(200);
204024bc:	0c800513          	li	a0,200
204024c0:	524010ef          	jal	ra,204039e4 <metal_shutdown>

204024c4 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:92
}

void __metal_default_sw_handler (int id, void *priv) {
204024c4:	7179                	addi	sp,sp,-48
204024c6:	d606                	sw	ra,44(sp)
204024c8:	d422                	sw	s0,40(sp)
204024ca:	1800                	addi	s0,sp,48
204024cc:	fca42e23          	sw	a0,-36(s0)
204024d0:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:95
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204024d4:	3549                	jal	20402356 <__metal_myhart_id>
204024d6:	872a                	mv	a4,a0
204024d8:	070a                	slli	a4,a4,0x2
204024da:	81818793          	addi	a5,gp,-2024 # 80001000 <__metal_cpu_table>
204024de:	97ba                	add	a5,a5,a4
204024e0:	439c                	lw	a5,0(a5)
204024e2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:97

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
204024e6:	342027f3          	csrr	a5,mcause
204024ea:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:98
    if ( cpu ) {
204024ee:	fec42783          	lw	a5,-20(s0)
204024f2:	c795                	beqz	a5,2040251e <__metal_default_sw_handler+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:99
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
204024f4:	fec42783          	lw	a5,-20(s0)
204024f8:	47dc                	lw	a5,12(a5)
204024fa:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:100
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204024fe:	fe842783          	lw	a5,-24(s0)
20402502:	3ff7f793          	andi	a5,a5,1023
20402506:	fe442703          	lw	a4,-28(s0)
2040250a:	0e478793          	addi	a5,a5,228
2040250e:	078a                	slli	a5,a5,0x2
20402510:	97ba                	add	a5,a5,a4
20402512:	439c                	lw	a5,0(a5)
20402514:	fdc42583          	lw	a1,-36(s0)
20402518:	fec42503          	lw	a0,-20(s0)
2040251c:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:102
    }
}
2040251e:	0001                	nop
20402520:	50b2                	lw	ra,44(sp)
20402522:	5422                	lw	s0,40(sp)
20402524:	6145                	addi	sp,sp,48
20402526:	8082                	ret

20402528 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:104

void __metal_default_timer_handler (int id, void *priv) {
20402528:	7179                	addi	sp,sp,-48
2040252a:	d606                	sw	ra,44(sp)
2040252c:	d422                	sw	s0,40(sp)
2040252e:	1800                	addi	s0,sp,48
20402530:	fca42e23          	sw	a0,-36(s0)
20402534:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:105
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402538:	3d39                	jal	20402356 <__metal_myhart_id>
2040253a:	87aa                	mv	a5,a0
2040253c:	853e                	mv	a0,a5
2040253e:	33f5                	jal	2040232a <__metal_driver_cpu_get>
20402540:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:106
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402544:	fec42503          	lw	a0,-20(s0)
20402548:	7f0000ef          	jal	ra,20402d38 <__metal_driver_cpu_mtime_get>
2040254c:	fea42023          	sw	a0,-32(s0)
20402550:	feb42223          	sw	a1,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:109

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402554:	fe042783          	lw	a5,-32(s0)
20402558:	fe442803          	lw	a6,-28(s0)
2040255c:	45a9                	li	a1,10
2040255e:	4601                	li	a2,0
20402560:	00b786b3          	add	a3,a5,a1
20402564:	8536                	mv	a0,a3
20402566:	00f53533          	sltu	a0,a0,a5
2040256a:	00c80733          	add	a4,a6,a2
2040256e:	00e507b3          	add	a5,a0,a4
20402572:	873e                	mv	a4,a5
20402574:	87b6                	mv	a5,a3
20402576:	883a                	mv	a6,a4
20402578:	85be                	mv	a1,a5
2040257a:	8642                	mv	a2,a6
2040257c:	fec42503          	lw	a0,-20(s0)
20402580:	027000ef          	jal	ra,20402da6 <__metal_driver_cpu_mtimecmp_set>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:110
}
20402584:	0001                	nop
20402586:	50b2                	lw	ra,44(sp)
20402588:	5422                	lw	s0,40(sp)
2040258a:	6145                	addi	sp,sp,48
2040258c:	8082                	ret
	...

20402600 <__metal_exception_handler>:
__metal_exception_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:113

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402600:	7119                	addi	sp,sp,-128
20402602:	de86                	sw	ra,124(sp)
20402604:	dc96                	sw	t0,120(sp)
20402606:	da9a                	sw	t1,116(sp)
20402608:	d89e                	sw	t2,112(sp)
2040260a:	d6a2                	sw	s0,108(sp)
2040260c:	d4aa                	sw	a0,104(sp)
2040260e:	d2ae                	sw	a1,100(sp)
20402610:	d0b2                	sw	a2,96(sp)
20402612:	ceb6                	sw	a3,92(sp)
20402614:	ccba                	sw	a4,88(sp)
20402616:	cabe                	sw	a5,84(sp)
20402618:	c8c2                	sw	a6,80(sp)
2040261a:	c6c6                	sw	a7,76(sp)
2040261c:	c4f2                	sw	t3,72(sp)
2040261e:	c2f6                	sw	t4,68(sp)
20402620:	c0fa                	sw	t5,64(sp)
20402622:	de7e                	sw	t6,60(sp)
20402624:	0100                	addi	s0,sp,128
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:118
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402626:	3b05                	jal	20402356 <__metal_myhart_id>
20402628:	872a                	mv	a4,a0
2040262a:	070a                	slli	a4,a4,0x2
2040262c:	81818793          	addi	a5,gp,-2024 # 80001000 <__metal_cpu_table>
20402630:	97ba                	add	a5,a5,a4
20402632:	439c                	lw	a5,0(a5)
20402634:	faf42623          	sw	a5,-84(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:120

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
20402638:	342027f3          	csrr	a5,mcause
2040263c:	faf42423          	sw	a5,-88(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:121
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20402640:	341027f3          	csrr	a5,mepc
20402644:	faf42223          	sw	a5,-92(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:122
    asm volatile ("csrr %0, mtval" : "=r"(mtval));
20402648:	343027f3          	csrr	a5,mtval
2040264c:	faf42023          	sw	a5,-96(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:123
    asm volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402650:	305027f3          	csrr	a5,mtvec
20402654:	f8f42e23          	sw	a5,-100(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:125

    if ( cpu ) {
20402658:	fac42783          	lw	a5,-84(s0)
2040265c:	c3f9                	beqz	a5,20402722 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:126
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
2040265e:	fac42783          	lw	a5,-84(s0)
20402662:	47dc                	lw	a5,12(a5)
20402664:	f8f42c23          	sw	a5,-104(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:127
        id = mcause & METAL_MCAUSE_CAUSE;
20402668:	fa842783          	lw	a5,-88(s0)
2040266c:	3ff7f793          	andi	a5,a5,1023
20402670:	f8f42a23          	sw	a5,-108(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:128
        if (mcause & METAL_MCAUSE_INTR) {
20402674:	fa842783          	lw	a5,-88(s0)
20402678:	0807d763          	bgez	a5,20402706 <__metal_exception_handler+0x106>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2040267c:	f9442703          	lw	a4,-108(s0)
20402680:	47bd                	li	a5,15
20402682:	00e7d763          	bge	a5,a4,20402690 <__metal_exception_handler+0x90>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:130 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402686:	f9c42783          	lw	a5,-100(s0)
2040268a:	03f7f793          	andi	a5,a5,63
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:129 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2040268e:	ef9d                	bnez	a5,204026cc <__metal_exception_handler+0xcc>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:131
                priv = intc->metal_int_table[id].exint_data;
20402690:	f9842683          	lw	a3,-104(s0)
20402694:	f9442703          	lw	a4,-108(s0)
20402698:	87ba                	mv	a5,a4
2040269a:	0786                	slli	a5,a5,0x1
2040269c:	97ba                	add	a5,a5,a4
2040269e:	078e                	slli	a5,a5,0x3
204026a0:	97b6                	add	a5,a5,a3
204026a2:	0a07a783          	lw	a5,160(a5)
204026a6:	f8f42623          	sw	a5,-116(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:132
                intc->metal_int_table[id].handler(id, priv);
204026aa:	f9842683          	lw	a3,-104(s0)
204026ae:	f9442703          	lw	a4,-108(s0)
204026b2:	87ba                	mv	a5,a4
204026b4:	0786                	slli	a5,a5,0x1
204026b6:	97ba                	add	a5,a5,a4
204026b8:	078e                	slli	a5,a5,0x3
204026ba:	97b6                	add	a5,a5,a3
204026bc:	0987a783          	lw	a5,152(a5)
204026c0:	f8c42583          	lw	a1,-116(s0)
204026c4:	f9442503          	lw	a0,-108(s0)
204026c8:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:133
		return;
204026ca:	a8a1                	j	20402722 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:135
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204026cc:	f9c42783          	lw	a5,-100(s0)
204026d0:	03f7f713          	andi	a4,a5,63
204026d4:	4789                	li	a5,2
204026d6:	04f71663          	bne	a4,a5,20402722 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:139
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                asm volatile ("csrr %0, mtvt" : "=r"(mtvt));
204026da:	307027f3          	csrr	a5,mtvt
204026de:	f8f42823          	sw	a5,-112(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:140
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204026e2:	f9842783          	lw	a5,-104(s0)
204026e6:	0e47a783          	lw	a5,228(a5)
204026ea:	f8f42623          	sw	a5,-116(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:141
               	mtvt_handler = (metal_interrupt_handler_t)mtvt;
204026ee:	f9042783          	lw	a5,-112(s0)
204026f2:	f8f42423          	sw	a5,-120(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:142
               	mtvt_handler(id, priv);
204026f6:	f8842783          	lw	a5,-120(s0)
204026fa:	f8c42583          	lw	a1,-116(s0)
204026fe:	f9442503          	lw	a0,-108(s0)
20402702:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:143
		return;
20402704:	a839                	j	20402722 <__metal_exception_handler+0x122>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:146
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402706:	f9842703          	lw	a4,-104(s0)
2040270a:	f9442783          	lw	a5,-108(s0)
2040270e:	0e478793          	addi	a5,a5,228
20402712:	078a                	slli	a5,a5,0x2
20402714:	97ba                	add	a5,a5,a4
20402716:	439c                	lw	a5,0(a5)
20402718:	f9442583          	lw	a1,-108(s0)
2040271c:	fac42503          	lw	a0,-84(s0)
20402720:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:149
        }
    }
}
20402722:	50f6                	lw	ra,124(sp)
20402724:	52e6                	lw	t0,120(sp)
20402726:	5356                	lw	t1,116(sp)
20402728:	53c6                	lw	t2,112(sp)
2040272a:	5436                	lw	s0,108(sp)
2040272c:	5526                	lw	a0,104(sp)
2040272e:	5596                	lw	a1,100(sp)
20402730:	5606                	lw	a2,96(sp)
20402732:	46f6                	lw	a3,92(sp)
20402734:	4766                	lw	a4,88(sp)
20402736:	47d6                	lw	a5,84(sp)
20402738:	4846                	lw	a6,80(sp)
2040273a:	48b6                	lw	a7,76(sp)
2040273c:	4e26                	lw	t3,72(sp)
2040273e:	4e96                	lw	t4,68(sp)
20402740:	4f06                	lw	t5,64(sp)
20402742:	5ff2                	lw	t6,60(sp)
20402744:	6109                	addi	sp,sp,128
20402746:	30200073          	mret
	...

20402778 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:152

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20402778:	7179                	addi	sp,sp,-48
2040277a:	d622                	sw	s0,44(sp)
2040277c:	1800                	addi	s0,sp,48
2040277e:	fca42e23          	sw	a0,-36(s0)
20402782:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:155
    uintptr_t trap_entry, val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20402786:	305027f3          	csrr	a5,mtvec
2040278a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:156
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040278e:	fec42783          	lw	a5,-20(s0)
20402792:	fc07f793          	andi	a5,a5,-64
20402796:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:157
    trap_entry = (uintptr_t)vec_table;
2040279a:	fd842783          	lw	a5,-40(s0)
2040279e:	fef42423          	sw	a5,-24(s0)
204027a2:	fdc42703          	lw	a4,-36(s0)
204027a6:	4785                	li	a5,1
204027a8:	04f70a63          	beq	a4,a5,204027fc <__metal_controller_interrupt_vector+0x84>
204027ac:	fdc42783          	lw	a5,-36(s0)
204027b0:	cfa9                	beqz	a5,2040280a <__metal_controller_interrupt_vector+0x92>
204027b2:	fdc42703          	lw	a4,-36(s0)
204027b6:	4789                	li	a5,2
204027b8:	00f70863          	beq	a4,a5,204027c8 <__metal_controller_interrupt_vector+0x50>
204027bc:	fdc42703          	lw	a4,-36(s0)
204027c0:	478d                	li	a5,3
204027c2:	02f70063          	beq	a4,a5,204027e2 <__metal_controller_interrupt_vector+0x6a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
        break;
    case METAL_DIRECT_MODE:
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
204027c6:	a881                	j	20402816 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:161
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC));
204027c8:	fe842783          	lw	a5,-24(s0)
204027cc:	0027e793          	ori	a5,a5,2
204027d0:	30779073          	csrw	mtvt,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:162
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204027d4:	fec42783          	lw	a5,-20(s0)
204027d8:	0027e793          	ori	a5,a5,2
204027dc:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:163
        break;
204027e0:	a81d                	j	20402816 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:165
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC_VECTORED));
204027e2:	fe842783          	lw	a5,-24(s0)
204027e6:	0037e793          	ori	a5,a5,3
204027ea:	30779073          	csrw	mtvt,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:166
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204027ee:	fec42783          	lw	a5,-20(s0)
204027f2:	0037e793          	ori	a5,a5,3
204027f6:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:167
        break;
204027fa:	a831                	j	20402816 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:169
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204027fc:	fe842783          	lw	a5,-24(s0)
20402800:	0017e793          	ori	a5,a5,1
20402804:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:170
        break;
20402808:	a039                	j	20402816 <__metal_controller_interrupt_vector+0x9e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:172
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040280a:	fe842783          	lw	a5,-24(s0)
2040280e:	9bf1                	andi	a5,a5,-4
20402810:	30579073          	csrw	mtvec,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:173
        break;
20402814:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:175
}
20402816:	0001                	nop
20402818:	5432                	lw	s0,44(sp)
2040281a:	6145                	addi	sp,sp,48
2040281c:	8082                	ret

2040281e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:178

int __metal_valid_interrupt_id (int id)
{
2040281e:	1101                	addi	sp,sp,-32
20402820:	ce22                	sw	s0,28(sp)
20402822:	1000                	addi	s0,sp,32
20402824:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:179
    switch (id) {
20402828:	fec42783          	lw	a5,-20(s0)
2040282c:	17f5                	addi	a5,a5,-3
2040282e:	4771                	li	a4,28
20402830:	00f76d63          	bltu	a4,a5,2040284a <__metal_valid_interrupt_id+0x2c>
20402834:	00279713          	slli	a4,a5,0x2
20402838:	204047b7          	lui	a5,0x20404
2040283c:	b1078793          	addi	a5,a5,-1264 # 20403b10 <__metal_driver_vtable_sifive_uart0+0x34>
20402840:	97ba                	add	a5,a5,a4
20402842:	439c                	lw	a5,0(a5)
20402844:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:199
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20402846:	4785                	li	a5,1
20402848:	a019                	j	2040284e <__metal_valid_interrupt_id+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:201
    default:
        break;
2040284a:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:204
    }

    return 0;
2040284c:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:205
}
2040284e:	853e                	mv	a0,a5
20402850:	4472                	lw	s0,28(sp)
20402852:	6105                	addi	sp,sp,32
20402854:	8082                	ret

20402856 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:210

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20402856:	7179                	addi	sp,sp,-48
20402858:	d606                	sw	ra,44(sp)
2040285a:	d422                	sw	s0,40(sp)
2040285c:	1800                	addi	s0,sp,48
2040285e:	fca42e23          	sw	a0,-36(s0)
20402862:	fcb42c23          	sw	a1,-40(s0)
20402866:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:211
    int rc = 0;
2040286a:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:213
  
    if ( !controller) {
2040286e:	fdc42783          	lw	a5,-36(s0)
20402872:	e399                	bnez	a5,20402878 <__metal_local_interrupt_enable+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:214
        return -1;
20402874:	57fd                	li	a5,-1
20402876:	a8b5                	j	204028f2 <__metal_local_interrupt_enable+0x9c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:217
    }

    switch (id) {
20402878:	fd842703          	lw	a4,-40(s0)
2040287c:	47fd                	li	a5,31
2040287e:	06e7e863          	bltu	a5,a4,204028ee <__metal_local_interrupt_enable+0x98>
20402882:	fd842783          	lw	a5,-40(s0)
20402886:	00279713          	slli	a4,a5,0x2
2040288a:	204047b7          	lui	a5,0x20404
2040288e:	b8478793          	addi	a5,a5,-1148 # 20403b84 <__metal_driver_vtable_sifive_uart0+0xa8>
20402892:	97ba                	add	a5,a5,a4
20402894:	439c                	lw	a5,0(a5)
20402896:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:219
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20402898:	fd442783          	lw	a5,-44(s0)
2040289c:	c781                	beqz	a5,204028a4 <__metal_local_interrupt_enable+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:220
            __metal_interrupt_global_enable();
2040289e:	ad3ff0ef          	jal	ra,20402370 <__metal_interrupt_global_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        } else {
            __metal_interrupt_global_disable();
        }
        break;
204028a2:	a0b1                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:222
            __metal_interrupt_global_disable();
204028a4:	ae5ff0ef          	jal	ra,20402388 <__metal_interrupt_global_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:224
        break;
204028a8:	a099                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:226
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
204028aa:	fd442783          	lw	a5,-44(s0)
204028ae:	c399                	beqz	a5,204028b4 <__metal_local_interrupt_enable+0x5e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:227
            __metal_interrupt_software_enable();
204028b0:	3cc5                	jal	204023a0 <__metal_interrupt_software_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        } else {
            __metal_interrupt_software_disable();
        }
        break;
204028b2:	a835                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:229
            __metal_interrupt_software_disable();
204028b4:	3611                	jal	204023b8 <__metal_interrupt_software_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:231
        break;
204028b6:	a825                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:233
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
204028b8:	fd442783          	lw	a5,-44(s0)
204028bc:	c399                	beqz	a5,204028c2 <__metal_local_interrupt_enable+0x6c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:234
	    __metal_interrupt_timer_enable();
204028be:	3e09                	jal	204023d0 <__metal_interrupt_timer_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204028c0:	a03d                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:236
	    __metal_interrupt_timer_disable();
204028c2:	3625                	jal	204023ea <__metal_interrupt_timer_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:238
	break;
204028c4:	a02d                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:240
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204028c6:	fd442783          	lw	a5,-44(s0)
204028ca:	c399                	beqz	a5,204028d0 <__metal_local_interrupt_enable+0x7a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:241
            __metal_interrupt_external_enable();
204028cc:	3e25                	jal	20402404 <__metal_interrupt_external_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204028ce:	a005                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:243
            __metal_interrupt_external_disable();
204028d0:	3e81                	jal	20402420 <__metal_interrupt_external_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:245
        break;
204028d2:	a831                	j	204028ee <__metal_local_interrupt_enable+0x98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:262
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204028d4:	fd442783          	lw	a5,-44(s0)
204028d8:	c791                	beqz	a5,204028e4 <__metal_local_interrupt_enable+0x8e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:263
            __metal_interrupt_local_enable(id);
204028da:	fd842783          	lw	a5,-40(s0)
204028de:	853e                	mv	a0,a5
204028e0:	3eb1                	jal	2040243c <__metal_interrupt_local_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204028e2:	a029                	j	204028ec <__metal_local_interrupt_enable+0x96>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:265
            __metal_interrupt_local_disable(id);
204028e4:	fd842783          	lw	a5,-40(s0)
204028e8:	853e                	mv	a0,a5
204028ea:	3ebd                	jal	20402468 <__metal_interrupt_local_disable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:267
        break;
204028ec:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:271
    defaut:
        rc = -1;
    }
    return rc;
204028ee:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:272
}
204028f2:	853e                	mv	a0,a5
204028f4:	50b2                	lw	ra,44(sp)
204028f6:	5422                	lw	s0,40(sp)
204028f8:	6145                	addi	sp,sp,48
204028fa:	8082                	ret

204028fc <__metal_exception_register>:
__metal_exception_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:276

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204028fc:	7179                	addi	sp,sp,-48
204028fe:	d622                	sw	s0,44(sp)
20402900:	1800                	addi	s0,sp,48
20402902:	fca42e23          	sw	a0,-36(s0)
20402906:	fcb42c23          	sw	a1,-40(s0)
2040290a:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:277
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040290e:	fdc42783          	lw	a5,-36(s0)
20402912:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20402916:	fd842703          	lw	a4,-40(s0)
2040291a:	47ad                	li	a5,11
2040291c:	02e7c263          	blt	a5,a4,20402940 <__metal_exception_register+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:279 (discriminator 1)
20402920:	fd442783          	lw	a5,-44(s0)
20402924:	cf91                	beqz	a5,20402940 <__metal_exception_register+0x44>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:280
        intc->metal_exception_table[ecode] = isr;
20402926:	fec42703          	lw	a4,-20(s0)
2040292a:	fd842783          	lw	a5,-40(s0)
2040292e:	0e478793          	addi	a5,a5,228
20402932:	078a                	slli	a5,a5,0x2
20402934:	97ba                	add	a5,a5,a4
20402936:	fd442703          	lw	a4,-44(s0)
2040293a:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:281
        return 0;
2040293c:	4781                	li	a5,0
2040293e:	a011                	j	20402942 <__metal_exception_register+0x46>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:283
    }
    return -1;
20402940:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:284
}
20402942:	853e                	mv	a0,a5
20402944:	5432                	lw	s0,44(sp)
20402946:	6145                	addi	sp,sp,48
20402948:	8082                	ret

2040294a <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:287

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040294a:	7179                	addi	sp,sp,-48
2040294c:	d606                	sw	ra,44(sp)
2040294e:	d422                	sw	s0,40(sp)
20402950:	1800                	addi	s0,sp,48
20402952:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:288
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402956:	fdc42783          	lw	a5,-36(s0)
2040295a:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:291
    uintptr_t val;

    if ( !intc->init_done ) {
2040295e:	fe442783          	lw	a5,-28(s0)
20402962:	479c                	lw	a5,8(a5)
20402964:	ebe1                	bnez	a5,20402a34 <__metal_driver_riscv_cpu_controller_interrupt_init+0xea>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20402966:	fe042623          	sw	zero,-20(s0)
2040296a:	a0b9                	j	204029b8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:294 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040296c:	fe442683          	lw	a3,-28(s0)
20402970:	fec42703          	lw	a4,-20(s0)
20402974:	87ba                	mv	a5,a4
20402976:	0786                	slli	a5,a5,0x1
20402978:	97ba                	add	a5,a5,a4
2040297a:	078e                	slli	a5,a5,0x3
2040297c:	97b6                	add	a5,a5,a3
2040297e:	0807ac23          	sw	zero,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:295 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20402982:	fe442683          	lw	a3,-28(s0)
20402986:	fec42703          	lw	a4,-20(s0)
2040298a:	87ba                	mv	a5,a4
2040298c:	0786                	slli	a5,a5,0x1
2040298e:	97ba                	add	a5,a5,a4
20402990:	078e                	slli	a5,a5,0x3
20402992:	97b6                	add	a5,a5,a3
20402994:	0807ae23          	sw	zero,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:296 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20402998:	fe442683          	lw	a3,-28(s0)
2040299c:	fec42703          	lw	a4,-20(s0)
204029a0:	87ba                	mv	a5,a4
204029a2:	0786                	slli	a5,a5,0x1
204029a4:	97ba                	add	a5,a5,a4
204029a6:	078e                	slli	a5,a5,0x3
204029a8:	97b6                	add	a5,a5,a3
204029aa:	0a07a023          	sw	zero,160(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204029ae:	fec42783          	lw	a5,-20(s0)
204029b2:	0785                	addi	a5,a5,1
204029b4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 1)
204029b8:	fec42703          	lw	a4,-20(s0)
204029bc:	47fd                	li	a5,31
204029be:	fae7d7e3          	bge	a5,a4,2040296c <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
204029c2:	fe042423          	sw	zero,-24(s0)
204029c6:	a01d                	j	204029ec <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:299 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
204029c8:	fe442703          	lw	a4,-28(s0)
204029cc:	fe842783          	lw	a5,-24(s0)
204029d0:	0e478793          	addi	a5,a5,228
204029d4:	078a                	slli	a5,a5,0x2
204029d6:	97ba                	add	a5,a5,a4
204029d8:	20402737          	lui	a4,0x20402
204029dc:	49470713          	addi	a4,a4,1172 # 20402494 <__metal_default_exception_handler>
204029e0:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204029e2:	fe842783          	lw	a5,-24(s0)
204029e6:	0785                	addi	a5,a5,1
204029e8:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 1)
204029ec:	fe842703          	lw	a4,-24(s0)
204029f0:	47ad                	li	a5,11
204029f2:	fce7dbe3          	bge	a5,a4,204029c8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:301
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
204029f6:	204027b7          	lui	a5,0x20402
204029fa:	60078593          	addi	a1,a5,1536 # 20402600 <__metal_exception_handler>
204029fe:	4501                	li	a0,0
20402a00:	3ba5                	jal	20402778 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:302
	asm volatile ("csrr %0, misa" : "=r"(val));
20402a02:	301027f3          	csrr	a5,misa
20402a06:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:303
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20402a0a:	fe042703          	lw	a4,-32(s0)
20402a0e:	67c1                	lui	a5,0x10
20402a10:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xfc28>
20402a14:	8ff9                	and	a5,a5,a4
20402a16:	cb99                	beqz	a5,20402a2c <__metal_driver_riscv_cpu_controller_interrupt_init+0xe2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:305
	    /* Floating point architecture, so turn on FP register saving*/
	    asm volatile ("csrr %0, mstatus" : "=r"(val));
20402a18:	300027f3          	csrr	a5,mstatus
20402a1c:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:306
	    asm volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20402a20:	fe042703          	lw	a4,-32(s0)
20402a24:	6789                	lui	a5,0x2
20402a26:	8fd9                	or	a5,a5,a4
20402a28:	30079073          	csrw	mstatus,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:308
	}
	intc->init_done = 1;
20402a2c:	fe442783          	lw	a5,-28(s0)
20402a30:	4705                	li	a4,1
20402a32:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:310
    }
}
20402a34:	0001                	nop
20402a36:	50b2                	lw	ra,44(sp)
20402a38:	5422                	lw	s0,40(sp)
20402a3a:	6145                	addi	sp,sp,48
20402a3c:	8082                	ret

20402a3e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:315

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20402a3e:	7179                	addi	sp,sp,-48
20402a40:	d606                	sw	ra,44(sp)
20402a42:	d422                	sw	s0,40(sp)
20402a44:	1800                	addi	s0,sp,48
20402a46:	fca42e23          	sw	a0,-36(s0)
20402a4a:	fcb42c23          	sw	a1,-40(s0)
20402a4e:	fcc42a23          	sw	a2,-44(s0)
20402a52:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:316
    int rc = 0;
20402a56:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:317
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402a5a:	fdc42783          	lw	a5,-36(s0)
20402a5e:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:319
 
    if ( !__metal_valid_interrupt_id(id) ) {
20402a62:	fd842503          	lw	a0,-40(s0)
20402a66:	3b65                	jal	2040281e <__metal_valid_interrupt_id>
20402a68:	87aa                	mv	a5,a0
20402a6a:	e399                	bnez	a5,20402a70 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:320
        return -11;
20402a6c:	57d5                	li	a5,-11
20402a6e:	a239                	j	20402b7c <__metal_driver_riscv_cpu_controller_interrupt_register+0x13e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:323
    }

    if (isr) {
20402a70:	fd442783          	lw	a5,-44(s0)
20402a74:	cf85                	beqz	a5,20402aac <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:324
        intc->metal_int_table[id].handler = isr;
20402a76:	fe842683          	lw	a3,-24(s0)
20402a7a:	fd842703          	lw	a4,-40(s0)
20402a7e:	87ba                	mv	a5,a4
20402a80:	0786                	slli	a5,a5,0x1
20402a82:	97ba                	add	a5,a5,a4
20402a84:	078e                	slli	a5,a5,0x3
20402a86:	97b6                	add	a5,a5,a3
20402a88:	fd442703          	lw	a4,-44(s0)
20402a8c:	08e7ac23          	sw	a4,152(a5) # 2098 <__heap_size+0x1c98>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:325
        intc->metal_int_table[id].exint_data = priv;
20402a90:	fe842683          	lw	a3,-24(s0)
20402a94:	fd842703          	lw	a4,-40(s0)
20402a98:	87ba                	mv	a5,a4
20402a9a:	0786                	slli	a5,a5,0x1
20402a9c:	97ba                	add	a5,a5,a4
20402a9e:	078e                	slli	a5,a5,0x3
20402aa0:	97b6                	add	a5,a5,a3
20402aa2:	fd042703          	lw	a4,-48(s0)
20402aa6:	0ae7a023          	sw	a4,160(a5)
20402aaa:	a0f9                	j	20402b78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:327
    } else {
	switch (id) {
20402aac:	fd842783          	lw	a5,-40(s0)
20402ab0:	17f5                	addi	a5,a5,-3
20402ab2:	4771                	li	a4,28
20402ab4:	0cf76263          	bltu	a4,a5,20402b78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20402ab8:	00279713          	slli	a4,a5,0x2
20402abc:	204047b7          	lui	a5,0x20404
20402ac0:	c0478793          	addi	a5,a5,-1020 # 20403c04 <__metal_driver_vtable_sifive_uart0+0x128>
20402ac4:	97ba                	add	a5,a5,a4
20402ac6:	439c                	lw	a5,0(a5)
20402ac8:	8782                	jr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:329
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20402aca:	fe842683          	lw	a3,-24(s0)
20402ace:	fd842703          	lw	a4,-40(s0)
20402ad2:	87ba                	mv	a5,a4
20402ad4:	0786                	slli	a5,a5,0x1
20402ad6:	97ba                	add	a5,a5,a4
20402ad8:	078e                	slli	a5,a5,0x3
20402ada:	97b6                	add	a5,a5,a3
20402adc:	20402737          	lui	a4,0x20402
20402ae0:	4c470713          	addi	a4,a4,1220 # 204024c4 <__metal_default_sw_handler>
20402ae4:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:330
            intc->metal_int_table[id].sub_int = priv;
20402ae8:	fe842683          	lw	a3,-24(s0)
20402aec:	fd842703          	lw	a4,-40(s0)
20402af0:	87ba                	mv	a5,a4
20402af2:	0786                	slli	a5,a5,0x1
20402af4:	97ba                	add	a5,a5,a4
20402af6:	078e                	slli	a5,a5,0x3
20402af8:	97b6                	add	a5,a5,a3
20402afa:	fd042703          	lw	a4,-48(s0)
20402afe:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:331
	  break;
20402b02:	a89d                	j	20402b78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:333
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20402b04:	fe842683          	lw	a3,-24(s0)
20402b08:	fd842703          	lw	a4,-40(s0)
20402b0c:	87ba                	mv	a5,a4
20402b0e:	0786                	slli	a5,a5,0x1
20402b10:	97ba                	add	a5,a5,a4
20402b12:	078e                	slli	a5,a5,0x3
20402b14:	97b6                	add	a5,a5,a3
20402b16:	20402737          	lui	a4,0x20402
20402b1a:	52870713          	addi	a4,a4,1320 # 20402528 <__metal_default_timer_handler>
20402b1e:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:334
            intc->metal_int_table[id].sub_int = priv;
20402b22:	fe842683          	lw	a3,-24(s0)
20402b26:	fd842703          	lw	a4,-40(s0)
20402b2a:	87ba                	mv	a5,a4
20402b2c:	0786                	slli	a5,a5,0x1
20402b2e:	97ba                	add	a5,a5,a4
20402b30:	078e                	slli	a5,a5,0x3
20402b32:	97b6                	add	a5,a5,a3
20402b34:	fd042703          	lw	a4,-48(s0)
20402b38:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:335
	  break;
20402b3c:	a835                	j	20402b78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:353
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20402b3e:	fe842683          	lw	a3,-24(s0)
20402b42:	fd842703          	lw	a4,-40(s0)
20402b46:	87ba                	mv	a5,a4
20402b48:	0786                	slli	a5,a5,0x1
20402b4a:	97ba                	add	a5,a5,a4
20402b4c:	078e                	slli	a5,a5,0x3
20402b4e:	97b6                	add	a5,a5,a3
20402b50:	20402737          	lui	a4,0x20402
20402b54:	4ac70713          	addi	a4,a4,1196 # 204024ac <__metal_default_interrupt_handler>
20402b58:	08e7ac23          	sw	a4,152(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:354
            intc->metal_int_table[id].sub_int = priv;
20402b5c:	fe842683          	lw	a3,-24(s0)
20402b60:	fd842703          	lw	a4,-40(s0)
20402b64:	87ba                	mv	a5,a4
20402b66:	0786                	slli	a5,a5,0x1
20402b68:	97ba                	add	a5,a5,a4
20402b6a:	078e                	slli	a5,a5,0x3
20402b6c:	97b6                	add	a5,a5,a3
20402b6e:	fd042703          	lw	a4,-48(s0)
20402b72:	08e7ae23          	sw	a4,156(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:355
	  break;
20402b76:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:360
	defaut:
	  rc = -12;
	}
    }
    return rc;
20402b78:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:361
}
20402b7c:	853e                	mv	a0,a5
20402b7e:	50b2                	lw	ra,44(sp)
20402b80:	5422                	lw	s0,40(sp)
20402b82:	6145                	addi	sp,sp,48
20402b84:	8082                	ret

20402b86 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:365

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20402b86:	1101                	addi	sp,sp,-32
20402b88:	ce06                	sw	ra,28(sp)
20402b8a:	cc22                	sw	s0,24(sp)
20402b8c:	1000                	addi	s0,sp,32
20402b8e:	fea42623          	sw	a0,-20(s0)
20402b92:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:366
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20402b96:	fe842783          	lw	a5,-24(s0)
20402b9a:	4605                	li	a2,1
20402b9c:	85be                	mv	a1,a5
20402b9e:	fec42503          	lw	a0,-20(s0)
20402ba2:	3955                	jal	20402856 <__metal_local_interrupt_enable>
20402ba4:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:367
}
20402ba6:	853e                	mv	a0,a5
20402ba8:	40f2                	lw	ra,28(sp)
20402baa:	4462                	lw	s0,24(sp)
20402bac:	6105                	addi	sp,sp,32
20402bae:	8082                	ret

20402bb0 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:371

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20402bb0:	1101                	addi	sp,sp,-32
20402bb2:	ce06                	sw	ra,28(sp)
20402bb4:	cc22                	sw	s0,24(sp)
20402bb6:	1000                	addi	s0,sp,32
20402bb8:	fea42623          	sw	a0,-20(s0)
20402bbc:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:372
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20402bc0:	fe842783          	lw	a5,-24(s0)
20402bc4:	4601                	li	a2,0
20402bc6:	85be                	mv	a1,a5
20402bc8:	fec42503          	lw	a0,-20(s0)
20402bcc:	3169                	jal	20402856 <__metal_local_interrupt_enable>
20402bce:	87aa                	mv	a5,a0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:373
}
20402bd0:	853e                	mv	a0,a5
20402bd2:	40f2                	lw	ra,28(sp)
20402bd4:	4462                	lw	s0,24(sp)
20402bd6:	6105                	addi	sp,sp,32
20402bd8:	8082                	ret

20402bda <__metal_driver_riscv_cpu_controller_interrupt_enable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_enable_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:377

int __metal_driver_riscv_cpu_controller_interrupt_enable_vector(struct metal_interrupt *controller,
                                                             int id, metal_vector_mode mode)
{
20402bda:	7179                	addi	sp,sp,-48
20402bdc:	d606                	sw	ra,44(sp)
20402bde:	d422                	sw	s0,40(sp)
20402be0:	1800                	addi	s0,sp,48
20402be2:	fca42e23          	sw	a0,-36(s0)
20402be6:	fcb42c23          	sw	a1,-40(s0)
20402bea:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:378
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402bee:	fdc42783          	lw	a5,-36(s0)
20402bf2:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:380

    if (id == METAL_INTERRUPT_ID_BASE) {
20402bf6:	fd842783          	lw	a5,-40(s0)
20402bfa:	eb9d                	bnez	a5,20402c30 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:381
        if (mode == METAL_DIRECT_MODE) {
20402bfc:	fd442783          	lw	a5,-44(s0)
20402c00:	eb91                	bnez	a5,20402c14 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x3a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:382
            __metal_controller_interrupt_vector(mode, &__metal_exception_handler);
20402c02:	204027b7          	lui	a5,0x20402
20402c06:	60078593          	addi	a1,a5,1536 # 20402600 <__metal_exception_handler>
20402c0a:	fd442503          	lw	a0,-44(s0)
20402c0e:	36ad                	jal	20402778 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:383
            return 0;
20402c10:	4781                	li	a5,0
20402c12:	a005                	j	20402c32 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:385
        }   
        if (mode == METAL_VECTOR_MODE) {
20402c14:	fd442703          	lw	a4,-44(s0)
20402c18:	4785                	li	a5,1
20402c1a:	00f71b63          	bne	a4,a5,20402c30 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:386
            __metal_controller_interrupt_vector(mode, &intc->metal_mtvec_table);
20402c1e:	fec42783          	lw	a5,-20(s0)
20402c22:	07c1                	addi	a5,a5,16
20402c24:	85be                	mv	a1,a5
20402c26:	fd442503          	lw	a0,-44(s0)
20402c2a:	36b9                	jal	20402778 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:387
            return 0;
20402c2c:	4781                	li	a5,0
20402c2e:	a011                	j	20402c32 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:390
        }
    }
    return -1;
20402c30:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:391
}
20402c32:	853e                	mv	a0,a5
20402c34:	50b2                	lw	ra,44(sp)
20402c36:	5422                	lw	s0,40(sp)
20402c38:	6145                	addi	sp,sp,48
20402c3a:	8082                	ret

20402c3c <__metal_driver_riscv_cpu_controller_interrupt_disable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_disable_vector():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:395

int __metal_driver_riscv_cpu_controller_interrupt_disable_vector(struct metal_interrupt *controller,
                                                              int id)
{
20402c3c:	7179                	addi	sp,sp,-48
20402c3e:	d606                	sw	ra,44(sp)
20402c40:	d422                	sw	s0,40(sp)
20402c42:	1800                	addi	s0,sp,48
20402c44:	fca42e23          	sw	a0,-36(s0)
20402c48:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:396
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20402c4c:	fdc42783          	lw	a5,-36(s0)
20402c50:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:398

    if (id == METAL_INTERRUPT_ID_BASE) {
20402c54:	fd842783          	lw	a5,-40(s0)
20402c58:	eb89                	bnez	a5,20402c6a <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x2e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:399
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
20402c5a:	204027b7          	lui	a5,0x20402
20402c5e:	60078593          	addi	a1,a5,1536 # 20402600 <__metal_exception_handler>
20402c62:	4501                	li	a0,0
20402c64:	3e11                	jal	20402778 <__metal_controller_interrupt_vector>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:400
        return 0;
20402c66:	4781                	li	a5,0
20402c68:	a011                	j	20402c6c <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x30>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:402
    }
    return -1;
20402c6a:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:403
}
20402c6c:	853e                	mv	a0,a5
20402c6e:	50b2                	lw	ra,44(sp)
20402c70:	5422                	lw	s0,40(sp)
20402c72:	6145                	addi	sp,sp,48
20402c74:	8082                	ret

20402c76 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:407

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20402c76:	1101                	addi	sp,sp,-32
20402c78:	ce22                	sw	s0,28(sp)
20402c7a:	1000                	addi	s0,sp,32
20402c7c:	fea42623          	sw	a0,-20(s0)
20402c80:	feb42423          	sw	a1,-24(s0)
20402c84:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:409
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20402c88:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:410
}
20402c8a:	853e                	mv	a0,a5
20402c8c:	4472                	lw	s0,28(sp)
20402c8e:	6105                	addi	sp,sp,32
20402c90:	8082                	ret

20402c92 <__metal_driver_cpu_timer_get>:
__metal_driver_cpu_timer_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:417
extern inline int __metal_controller_interrupt_is_selective_vectored(void);

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_timer_get(struct metal_cpu *cpu)
{
20402c92:	7139                	addi	sp,sp,-64
20402c94:	de22                	sw	s0,60(sp)
20402c96:	0080                	addi	s0,sp,64
20402c98:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:418
    unsigned long long val = 0;
20402c9c:	4301                	li	t1,0
20402c9e:	4381                	li	t2,0
20402ca0:	fe642423          	sw	t1,-24(s0)
20402ca4:	fe742623          	sw	t2,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:423

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    asm volatile ("csrr %0, mcycleh" : "=r"(hi));
20402ca8:	b8002573          	csrr	a0,mcycleh
20402cac:	fea42223          	sw	a0,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:424
    asm volatile ("csrr %0, mcycle" : "=r"(lo));
20402cb0:	b0002573          	csrr	a0,mcycle
20402cb4:	fea42023          	sw	a0,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:425
    asm volatile ("csrr %0, mcycleh" : "=r"(hi1));
20402cb8:	b8002573          	csrr	a0,mcycleh
20402cbc:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:426
    if (hi == hi1) {
20402cc0:	fe442883          	lw	a7,-28(s0)
20402cc4:	fdc42503          	lw	a0,-36(s0)
20402cc8:	02a89563          	bne	a7,a0,20402cf2 <__metal_driver_cpu_timer_get+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:427
        val = ((unsigned long long)hi << 32) | lo;
20402ccc:	fe442503          	lw	a0,-28(s0)
20402cd0:	85aa                	mv	a1,a0
20402cd2:	4601                	li	a2,0
20402cd4:	00059813          	slli	a6,a1,0x0
20402cd8:	4781                	li	a5,0
20402cda:	fe042603          	lw	a2,-32(s0)
20402cde:	86b2                	mv	a3,a2
20402ce0:	4701                	li	a4,0
20402ce2:	00d7e633          	or	a2,a5,a3
20402ce6:	fec42423          	sw	a2,-24(s0)
20402cea:	00e867b3          	or	a5,a6,a4
20402cee:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:433
    }
#else
    asm volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20402cf2:	fe842783          	lw	a5,-24(s0)
20402cf6:	fec42803          	lw	a6,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:434
}
20402cfa:	853e                	mv	a0,a5
20402cfc:	85c2                	mv	a1,a6
20402cfe:	5472                	lw	s0,60(sp)
20402d00:	6121                	addi	sp,sp,64
20402d02:	8082                	ret

20402d04 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:437

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20402d04:	7179                	addi	sp,sp,-48
20402d06:	d622                	sw	s0,44(sp)
20402d08:	1800                	addi	s0,sp,48
20402d0a:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:438
    struct __metal_driver_cpu *_cpu = (void *)(cpu);
20402d0e:	fdc42703          	lw	a4,-36(s0)
20402d12:	fee42623          	sw	a4,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:439
    if (!_cpu) {
20402d16:	fec42703          	lw	a4,-20(s0)
20402d1a:	e701                	bnez	a4,20402d22 <__metal_driver_cpu_timebase_get+0x1e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:440
        return 0;
20402d1c:	4781                	li	a5,0
20402d1e:	4801                	li	a6,0
20402d20:	a039                	j	20402d2e <__metal_driver_cpu_timebase_get+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:443
    }

    return _cpu->timebase;
20402d22:	fec42703          	lw	a4,-20(s0)
20402d26:	4718                	lw	a4,8(a4)
20402d28:	87ba                	mv	a5,a4
20402d2a:	877d                	srai	a4,a4,0x1f
20402d2c:	883a                	mv	a6,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:444
}
20402d2e:	853e                	mv	a0,a5
20402d30:	85c2                	mv	a1,a6
20402d32:	5432                	lw	s0,44(sp)
20402d34:	6145                	addi	sp,sp,48
20402d36:	8082                	ret

20402d38 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:447

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20402d38:	7139                	addi	sp,sp,-64
20402d3a:	de06                	sw	ra,60(sp)
20402d3c:	dc22                	sw	s0,56(sp)
20402d3e:	0080                	addi	s0,sp,64
20402d40:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:448
    unsigned long long time = 0;
20402d44:	4781                	li	a5,0
20402d46:	4801                	li	a6,0
20402d48:	fcf42c23          	sw	a5,-40(s0)
20402d4c:	fd042e23          	sw	a6,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:451
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402d50:	fcc42783          	lw	a5,-52(s0)
20402d54:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:453

    if (_cpu->interrupt_controller) {
20402d58:	fec42783          	lw	a5,-20(s0)
20402d5c:	47dc                	lw	a5,12(a5)
20402d5e:	cb95                	beqz	a5,20402d92 <__metal_driver_cpu_mtime_get+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:454
        intc = (void *)_cpu->interrupt_controller;
20402d60:	fec42783          	lw	a5,-20(s0)
20402d64:	47dc                	lw	a5,12(a5)
20402d66:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:455
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20402d6a:	fe842783          	lw	a5,-24(s0)
20402d6e:	1447a783          	lw	a5,324(a5)
20402d72:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:456
        if (tmr_intc) {
20402d76:	fe442783          	lw	a5,-28(s0)
20402d7a:	cf81                	beqz	a5,20402d92 <__metal_driver_cpu_mtime_get+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:457
            tmr_intc->vtable->command_request(tmr_intc,
20402d7c:	fe442783          	lw	a5,-28(s0)
20402d80:	439c                	lw	a5,0(a5)
20402d82:	4f98                	lw	a4,24(a5)
20402d84:	fd840793          	addi	a5,s0,-40
20402d88:	863e                	mv	a2,a5
20402d8a:	4585                	li	a1,1
20402d8c:	fe442503          	lw	a0,-28(s0)
20402d90:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:461
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20402d92:	fd842783          	lw	a5,-40(s0)
20402d96:	fdc42803          	lw	a6,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:462
}
20402d9a:	853e                	mv	a0,a5
20402d9c:	85c2                	mv	a1,a6
20402d9e:	50f2                	lw	ra,60(sp)
20402da0:	5462                	lw	s0,56(sp)
20402da2:	6121                	addi	sp,sp,64
20402da4:	8082                	ret

20402da6 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:465

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20402da6:	7179                	addi	sp,sp,-48
20402da8:	d606                	sw	ra,44(sp)
20402daa:	d422                	sw	s0,40(sp)
20402dac:	1800                	addi	s0,sp,48
20402dae:	fca42e23          	sw	a0,-36(s0)
20402db2:	fcb42823          	sw	a1,-48(s0)
20402db6:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:466
    int rc = -1;
20402dba:	57fd                	li	a5,-1
20402dbc:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:469
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402dc0:	fdc42783          	lw	a5,-36(s0)
20402dc4:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:471

    if (_cpu->interrupt_controller) {
20402dc8:	fe842783          	lw	a5,-24(s0)
20402dcc:	47dc                	lw	a5,12(a5)
20402dce:	cf85                	beqz	a5,20402e06 <__metal_driver_cpu_mtimecmp_set+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:472
        intc = (void *)_cpu->interrupt_controller;
20402dd0:	fe842783          	lw	a5,-24(s0)
20402dd4:	47dc                	lw	a5,12(a5)
20402dd6:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:473
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20402dda:	fe442783          	lw	a5,-28(s0)
20402dde:	1447a783          	lw	a5,324(a5)
20402de2:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:474
        if (tmr_intc) {
20402de6:	fe042783          	lw	a5,-32(s0)
20402dea:	cf91                	beqz	a5,20402e06 <__metal_driver_cpu_mtimecmp_set+0x60>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:475
            rc = tmr_intc->vtable->command_request(tmr_intc,
20402dec:	fe042783          	lw	a5,-32(s0)
20402df0:	439c                	lw	a5,0(a5)
20402df2:	4f98                	lw	a4,24(a5)
20402df4:	fd040793          	addi	a5,s0,-48
20402df8:	863e                	mv	a2,a5
20402dfa:	4589                	li	a1,2
20402dfc:	fe042503          	lw	a0,-32(s0)
20402e00:	9702                	jalr	a4
20402e02:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:479
                                                   METAL_TIMER_MTIME_SET, &time);
        }
    }
    return rc;
20402e06:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:480
}
20402e0a:	853e                	mv	a0,a5
20402e0c:	50b2                	lw	ra,44(sp)
20402e0e:	5422                	lw	s0,40(sp)
20402e10:	6145                	addi	sp,sp,48
20402e12:	8082                	ret

20402e14 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:484

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20402e14:	1101                	addi	sp,sp,-32
20402e16:	ce22                	sw	s0,28(sp)
20402e18:	1000                	addi	s0,sp,32
20402e1a:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:486
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20402e1e:	800017b7          	lui	a5,0x80001
20402e22:	84c78793          	addi	a5,a5,-1972 # 8000084c <metal_segment_heap_target_end+0xffffc84c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:495
#else
#warning "There is no interrupt controller for Timer interrupt"
    return NULL;
#endif
#endif
}
20402e26:	853e                	mv	a0,a5
20402e28:	4472                	lw	s0,28(sp)
20402e2a:	6105                	addi	sp,sp,32
20402e2c:	8082                	ret

20402e2e <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:498

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20402e2e:	1101                	addi	sp,sp,-32
20402e30:	ce22                	sw	s0,28(sp)
20402e32:	1000                	addi	s0,sp,32
20402e34:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:499
    return METAL_INTERRUPT_ID_TMR;
20402e38:	479d                	li	a5,7
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:500
}
20402e3a:	853e                	mv	a0,a5
20402e3c:	4472                	lw	s0,28(sp)
20402e3e:	6105                	addi	sp,sp,32
20402e40:	8082                	ret

20402e42 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:504

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20402e42:	1101                	addi	sp,sp,-32
20402e44:	ce22                	sw	s0,28(sp)
20402e46:	1000                	addi	s0,sp,32
20402e48:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:506
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20402e4c:	800017b7          	lui	a5,0x80001
20402e50:	84c78793          	addi	a5,a5,-1972 # 8000084c <metal_segment_heap_target_end+0xffffc84c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:515
#else
#warning "There is no interrupt controller for Software interrupt"
    return NULL;
#endif
#endif
}
20402e54:	853e                	mv	a0,a5
20402e56:	4472                	lw	s0,28(sp)
20402e58:	6105                	addi	sp,sp,32
20402e5a:	8082                	ret

20402e5c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:518

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20402e5c:	1101                	addi	sp,sp,-32
20402e5e:	ce22                	sw	s0,28(sp)
20402e60:	1000                	addi	s0,sp,32
20402e62:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:519
    return METAL_INTERRUPT_ID_SW;
20402e66:	478d                	li	a5,3
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:520
}
20402e68:	853e                	mv	a0,a5
20402e6a:	4472                	lw	s0,28(sp)
20402e6c:	6105                	addi	sp,sp,32
20402e6e:	8082                	ret

20402e70 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:523

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20402e70:	7179                	addi	sp,sp,-48
20402e72:	d606                	sw	ra,44(sp)
20402e74:	d422                	sw	s0,40(sp)
20402e76:	1800                	addi	s0,sp,48
20402e78:	fca42e23          	sw	a0,-36(s0)
20402e7c:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:524
    int rc = -1;
20402e80:	57fd                	li	a5,-1
20402e82:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:527
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402e86:	fdc42783          	lw	a5,-36(s0)
20402e8a:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:529

    if (_cpu->interrupt_controller) {
20402e8e:	fe842783          	lw	a5,-24(s0)
20402e92:	47dc                	lw	a5,12(a5)
20402e94:	cf85                	beqz	a5,20402ecc <__metal_driver_cpu_set_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:530
        intc = (void *)_cpu->interrupt_controller;
20402e96:	fe842783          	lw	a5,-24(s0)
20402e9a:	47dc                	lw	a5,12(a5)
20402e9c:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:531
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402ea0:	fe442783          	lw	a5,-28(s0)
20402ea4:	0e47a783          	lw	a5,228(a5)
20402ea8:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:532
        if (sw_intc) {
20402eac:	fe042783          	lw	a5,-32(s0)
20402eb0:	cf91                	beqz	a5,20402ecc <__metal_driver_cpu_set_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:533
            rc = sw_intc->vtable->command_request(sw_intc,
20402eb2:	fe042783          	lw	a5,-32(s0)
20402eb6:	439c                	lw	a5,0(a5)
20402eb8:	4f98                	lw	a4,24(a5)
20402eba:	fd840793          	addi	a5,s0,-40
20402ebe:	863e                	mv	a2,a5
20402ec0:	4591                	li	a1,4
20402ec2:	fe042503          	lw	a0,-32(s0)
20402ec6:	9702                	jalr	a4
20402ec8:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:537
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20402ecc:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:538
}
20402ed0:	853e                	mv	a0,a5
20402ed2:	50b2                	lw	ra,44(sp)
20402ed4:	5422                	lw	s0,40(sp)
20402ed6:	6145                	addi	sp,sp,48
20402ed8:	8082                	ret

20402eda <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:541

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20402eda:	7179                	addi	sp,sp,-48
20402edc:	d606                	sw	ra,44(sp)
20402ede:	d422                	sw	s0,40(sp)
20402ee0:	1800                	addi	s0,sp,48
20402ee2:	fca42e23          	sw	a0,-36(s0)
20402ee6:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:542
    int rc = -1;
20402eea:	57fd                	li	a5,-1
20402eec:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:545
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402ef0:	fdc42783          	lw	a5,-36(s0)
20402ef4:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:547

    if (_cpu->interrupt_controller) {
20402ef8:	fe842783          	lw	a5,-24(s0)
20402efc:	47dc                	lw	a5,12(a5)
20402efe:	cf85                	beqz	a5,20402f36 <__metal_driver_cpu_clear_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:548
        intc = (void *)_cpu->interrupt_controller;
20402f00:	fe842783          	lw	a5,-24(s0)
20402f04:	47dc                	lw	a5,12(a5)
20402f06:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:549
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402f0a:	fe442783          	lw	a5,-28(s0)
20402f0e:	0e47a783          	lw	a5,228(a5)
20402f12:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:550
        if (sw_intc) {
20402f16:	fe042783          	lw	a5,-32(s0)
20402f1a:	cf91                	beqz	a5,20402f36 <__metal_driver_cpu_clear_sw_ipi+0x5c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:551
            rc = sw_intc->vtable->command_request(sw_intc,
20402f1c:	fe042783          	lw	a5,-32(s0)
20402f20:	439c                	lw	a5,0(a5)
20402f22:	4f98                	lw	a4,24(a5)
20402f24:	fd840793          	addi	a5,s0,-40
20402f28:	863e                	mv	a2,a5
20402f2a:	458d                	li	a1,3
20402f2c:	fe042503          	lw	a0,-32(s0)
20402f30:	9702                	jalr	a4
20402f32:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:555
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20402f36:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:556
}
20402f3a:	853e                	mv	a0,a5
20402f3c:	50b2                	lw	ra,44(sp)
20402f3e:	5422                	lw	s0,40(sp)
20402f40:	6145                	addi	sp,sp,48
20402f42:	8082                	ret

20402f44 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:559

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20402f44:	7179                	addi	sp,sp,-48
20402f46:	d606                	sw	ra,44(sp)
20402f48:	d422                	sw	s0,40(sp)
20402f4a:	1800                	addi	s0,sp,48
20402f4c:	fca42e23          	sw	a0,-36(s0)
20402f50:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:560
    int rc = 0;
20402f54:	fe042623          	sw	zero,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:563
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20402f58:	fdc42783          	lw	a5,-36(s0)
20402f5c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:565

    if (_cpu->interrupt_controller) {
20402f60:	fe842783          	lw	a5,-24(s0)
20402f64:	47dc                	lw	a5,12(a5)
20402f66:	cf85                	beqz	a5,20402f9e <__metal_driver_cpu_get_msip+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:566
        intc = (void *)_cpu->interrupt_controller;
20402f68:	fe842783          	lw	a5,-24(s0)
20402f6c:	47dc                	lw	a5,12(a5)
20402f6e:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:567
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402f72:	fe442783          	lw	a5,-28(s0)
20402f76:	0e47a783          	lw	a5,228(a5)
20402f7a:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:568
        if (sw_intc) {
20402f7e:	fe042783          	lw	a5,-32(s0)
20402f82:	cf91                	beqz	a5,20402f9e <__metal_driver_cpu_get_msip+0x5a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:569
            rc = sw_intc->vtable->command_request(sw_intc,
20402f84:	fe042783          	lw	a5,-32(s0)
20402f88:	439c                	lw	a5,0(a5)
20402f8a:	4f98                	lw	a4,24(a5)
20402f8c:	fd840793          	addi	a5,s0,-40
20402f90:	863e                	mv	a2,a5
20402f92:	4595                	li	a1,5
20402f94:	fe042503          	lw	a0,-32(s0)
20402f98:	9702                	jalr	a4
20402f9a:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:573
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20402f9e:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:574
}
20402fa2:	853e                	mv	a0,a5
20402fa4:	50b2                	lw	ra,44(sp)
20402fa6:	5422                	lw	s0,40(sp)
20402fa8:	6145                	addi	sp,sp,48
20402faa:	8082                	ret

20402fac <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:578

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20402fac:	7179                	addi	sp,sp,-48
20402fae:	d622                	sw	s0,44(sp)
20402fb0:	1800                	addi	s0,sp,48
20402fb2:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:579
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20402fb6:	fdc42783          	lw	a5,-36(s0)
20402fba:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:580
    return (struct metal_interrupt *)cpu0->interrupt_controller;
20402fbe:	fec42783          	lw	a5,-20(s0)
20402fc2:	47dc                	lw	a5,12(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:581
}
20402fc4:	853e                	mv	a0,a5
20402fc6:	5432                	lw	s0,44(sp)
20402fc8:	6145                	addi	sp,sp,48
20402fca:	8082                	ret

20402fcc <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:607
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20402fcc:	7179                	addi	sp,sp,-48
20402fce:	d606                	sw	ra,44(sp)
20402fd0:	d422                	sw	s0,40(sp)
20402fd2:	1800                	addi	s0,sp,48
20402fd4:	fca42e23          	sw	a0,-36(s0)
20402fd8:	fcb42c23          	sw	a1,-40(s0)
20402fdc:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:608
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20402fe0:	fdc42783          	lw	a5,-36(s0)
20402fe4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:609
    if (cpu0->interrupt_controller) {
20402fe8:	fec42783          	lw	a5,-20(s0)
20402fec:	47dc                	lw	a5,12(a5)
20402fee:	cf89                	beqz	a5,20403008 <__metal_driver_cpu_exception_register+0x3c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:610
	return __metal_exception_register(cpu0->interrupt_controller, ecode, isr);
20402ff0:	fec42783          	lw	a5,-20(s0)
20402ff4:	47dc                	lw	a5,12(a5)
20402ff6:	fd442603          	lw	a2,-44(s0)
20402ffa:	fd842583          	lw	a1,-40(s0)
20402ffe:	853e                	mv	a0,a5
20403000:	8fdff0ef          	jal	ra,204028fc <__metal_exception_register>
20403004:	87aa                	mv	a5,a0
20403006:	a011                	j	2040300a <__metal_driver_cpu_exception_register+0x3e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:612
    }
    return -1;
20403008:	57fd                	li	a5,-1
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:613
}
2040300a:	853e                	mv	a0,a5
2040300c:	50b2                	lw	ra,44(sp)
2040300e:	5422                	lw	s0,40(sp)
20403010:	6145                	addi	sp,sp,48
20403012:	8082                	ret

20403014 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:616

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403014:	1101                	addi	sp,sp,-32
20403016:	ce22                	sw	s0,28(sp)
20403018:	1000                	addi	s0,sp,32
2040301a:	fea42623          	sw	a0,-20(s0)
2040301e:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618
    /* Per ISA compressed instruction has last two bits of opcode set */
    return (*(unsigned short*)epc & 3) ? 4 : 2;
20403022:	fe842783          	lw	a5,-24(s0)
20403026:	0007d783          	lhu	a5,0(a5)
2040302a:	8b8d                	andi	a5,a5,3
2040302c:	c399                	beqz	a5,20403032 <__metal_driver_cpu_get_instruction_length+0x1e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 1)
2040302e:	4791                	li	a5,4
20403030:	a011                	j	20403034 <__metal_driver_cpu_get_instruction_length+0x20>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 2)
20403032:	4789                	li	a5,2
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:619 (discriminator 5)
}
20403034:	853e                	mv	a0,a5
20403036:	4472                	lw	s0,28(sp)
20403038:	6105                	addi	sp,sp,32
2040303a:	8082                	ret

2040303c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:622

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
2040303c:	7179                	addi	sp,sp,-48
2040303e:	d622                	sw	s0,44(sp)
20403040:	1800                	addi	s0,sp,48
20403042:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:624
    uintptr_t mepc;
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20403046:	341027f3          	csrr	a5,mepc
2040304a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:625
    return mepc;
2040304e:	fec42783          	lw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:626
}
20403052:	853e                	mv	a0,a5
20403054:	5432                	lw	s0,44(sp)
20403056:	6145                	addi	sp,sp,48
20403058:	8082                	ret

2040305a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:629

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2040305a:	1101                	addi	sp,sp,-32
2040305c:	ce22                	sw	s0,28(sp)
2040305e:	1000                	addi	s0,sp,32
20403060:	fea42623          	sw	a0,-20(s0)
20403064:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:630
    asm volatile ("csrw mepc, %0" :: "r"(mepc));
20403068:	fe842783          	lw	a5,-24(s0)
2040306c:	34179073          	csrw	mepc,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:631
    return 0;
20403070:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,cpu.c:632
}
20403072:	853e                	mv	a0,a5
20403074:	4472                	lw	s0,28(sp)
20403076:	6105                	addi	sp,sp,32
20403078:	8082                	ret

2040307a <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:10
#include <metal/shutdown.h>
#include <metal/drivers/riscv,plic0.h>


unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2040307a:	1101                	addi	sp,sp,-32
2040307c:	ce22                	sw	s0,28(sp)
2040307e:	1000                	addi	s0,sp,32
20403080:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20403084:	fec42783          	lw	a5,-20(s0)
20403088:	4798                	lw	a4,8(a5)
2040308a:	002007b7          	lui	a5,0x200
2040308e:	0791                	addi	a5,a5,4
20403090:	97ba                	add	a5,a5,a4
20403092:	439c                	lw	a5,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:13
					      METAL_PLIC_CLAIM_OFFSET));
}
20403094:	853e                	mv	a0,a5
20403096:	4472                	lw	s0,28(sp)
20403098:	6105                	addi	sp,sp,32
2040309a:	8082                	ret

2040309c <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:17

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
2040309c:	1101                	addi	sp,sp,-32
2040309e:	ce22                	sw	s0,28(sp)
204030a0:	1000                	addi	s0,sp,32
204030a2:	fea42623          	sw	a0,-20(s0)
204030a6:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:18
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204030aa:	fec42783          	lw	a5,-20(s0)
204030ae:	4798                	lw	a4,8(a5)
204030b0:	002007b7          	lui	a5,0x200
204030b4:	0791                	addi	a5,a5,4
204030b6:	97ba                	add	a5,a5,a4
204030b8:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:19
				       METAL_PLIC_CLAIM_OFFSET)) = id;
204030ba:	fe842783          	lw	a5,-24(s0)
204030be:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:20
}
204030c0:	0001                	nop
204030c2:	4472                	lw	s0,28(sp)
204030c4:	6105                	addi	sp,sp,32
204030c6:	8082                	ret

204030c8 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:24

void __metal_plic0_set_threshold(struct __metal_driver_riscv_plic0 *plic,
			       unsigned int threshold)
{
204030c8:	1101                	addi	sp,sp,-32
204030ca:	ce22                	sw	s0,28(sp)
204030cc:	1000                	addi	s0,sp,32
204030ce:	fea42623          	sw	a0,-20(s0)
204030d2:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:25
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204030d6:	fec42783          	lw	a5,-20(s0)
204030da:	4798                	lw	a4,8(a5)
204030dc:	002007b7          	lui	a5,0x200
204030e0:	97ba                	add	a5,a5,a4
204030e2:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:26
				       METAL_PLIC_THRESHOLD_OFFSET)) = threshold;
204030e4:	fe842783          	lw	a5,-24(s0)
204030e8:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:27
}
204030ea:	0001                	nop
204030ec:	4472                	lw	s0,28(sp)
204030ee:	6105                	addi	sp,sp,32
204030f0:	8082                	ret

204030f2 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:31

void __metal_plic0_set_priority(struct __metal_driver_riscv_plic0 *plic,
			      int id, unsigned int priority)
{
204030f2:	1101                	addi	sp,sp,-32
204030f4:	ce22                	sw	s0,28(sp)
204030f6:	1000                	addi	s0,sp,32
204030f8:	fea42623          	sw	a0,-20(s0)
204030fc:	feb42423          	sw	a1,-24(s0)
20403100:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32
    if ( (plic->max_priority) &&
20403104:	fec42783          	lw	a5,-20(s0)
20403108:	4f9c                	lw	a5,24(a5)
2040310a:	c785                	beqz	a5,20403132 <__metal_plic0_set_priority+0x40>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:33 (discriminator 1)
	 (priority < plic->max_priority) ) {
2040310c:	fec42783          	lw	a5,-20(s0)
20403110:	4f9c                	lw	a5,24(a5)
20403112:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:32 (discriminator 1)
    if ( (plic->max_priority) &&
20403114:	fe442783          	lw	a5,-28(s0)
20403118:	00e7fd63          	bgeu	a5,a4,20403132 <__metal_plic0_set_priority+0x40>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:34
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
2040311c:	fec42783          	lw	a5,-20(s0)
20403120:	479c                	lw	a5,8(a5)
20403122:	fe842703          	lw	a4,-24(s0)
20403126:	070a                	slli	a4,a4,0x2
20403128:	97ba                	add	a5,a5,a4
2040312a:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:36
					   METAL_PLIC_PRIORITY_OFFSET +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
2040312c:	fe442783          	lw	a5,-28(s0)
20403130:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:38
    }
}
20403132:	0001                	nop
20403134:	4472                	lw	s0,28(sp)
20403136:	6105                	addi	sp,sp,32
20403138:	8082                	ret

2040313a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:41

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
2040313a:	7179                	addi	sp,sp,-48
2040313c:	d606                	sw	ra,44(sp)
2040313e:	d422                	sw	s0,40(sp)
20403140:	1800                	addi	s0,sp,48
20403142:	fca42e23          	sw	a0,-36(s0)
20403146:	fcb42c23          	sw	a1,-40(s0)
2040314a:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:43
    unsigned int current;
    unsigned long hartid = __metal_myhart_id();
2040314e:	a08ff0ef          	jal	ra,20402356 <__metal_myhart_id>
20403152:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:45

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20403156:	fdc42783          	lw	a5,-36(s0)
2040315a:	479c                	lw	a5,8(a5)
2040315c:	fd842703          	lw	a4,-40(s0)
20403160:	8715                	srai	a4,a4,0x5
20403162:	070a                	slli	a4,a4,0x2
20403164:	973e                	add	a4,a4,a5
20403166:	6789                	lui	a5,0x2
20403168:	97ba                	add	a5,a5,a4
2040316a:	439c                	lw	a5,0(a5)
2040316c:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
					METAL_PLIC_ENABLE_OFFSET +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403170:	fd442783          	lw	a5,-44(s0)
20403174:	cf81                	beqz	a5,2040318c <__metal_plic0_enable+0x52>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:51 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403176:	fd842783          	lw	a5,-40(s0)
2040317a:	8bfd                	andi	a5,a5,31
2040317c:	4705                	li	a4,1
2040317e:	00f717b3          	sll	a5,a4,a5
20403182:	873e                	mv	a4,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403184:	fe842783          	lw	a5,-24(s0)
20403188:	8fd9                	or	a5,a5,a4
2040318a:	a829                	j	204031a4 <__metal_plic0_enable+0x6a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 2)
2040318c:	fd842783          	lw	a5,-40(s0)
20403190:	8bfd                	andi	a5,a5,31
20403192:	4705                	li	a4,1
20403194:	00f717b3          	sll	a5,a4,a5
20403198:	fff7c793          	not	a5,a5
2040319c:	873e                	mv	a4,a5
2040319e:	fe842783          	lw	a5,-24(s0)
204031a2:	8ff9                	and	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
204031a4:	fdc42703          	lw	a4,-36(s0)
204031a8:	4718                	lw	a4,8(a4)
204031aa:	fd842683          	lw	a3,-40(s0)
204031ae:	8695                	srai	a3,a3,0x5
204031b0:	068a                	slli	a3,a3,0x2
204031b2:	96ba                	add	a3,a3,a4
204031b4:	6709                	lui	a4,0x2
204031b6:	9736                	add	a4,a4,a3
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:50
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204031b8:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:53
}
204031ba:	0001                	nop
204031bc:	50b2                	lw	ra,44(sp)
204031be:	5422                	lw	s0,40(sp)
204031c0:	6145                	addi	sp,sp,48
204031c2:	8082                	ret

204031c4 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:55

void __metal_plic0_default_handler (int id, void *priv) {
204031c4:	1101                	addi	sp,sp,-32
204031c6:	ce06                	sw	ra,28(sp)
204031c8:	cc22                	sw	s0,24(sp)
204031ca:	1000                	addi	s0,sp,32
204031cc:	fea42623          	sw	a0,-20(s0)
204031d0:	feb42423          	sw	a1,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:56
    metal_shutdown(300);
204031d4:	12c00513          	li	a0,300
204031d8:	00d000ef          	jal	ra,204039e4 <metal_shutdown>

204031dc <__metal_plic0_handler>:
__metal_plic0_handler():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:60
}

void __metal_plic0_handler (int id, void *priv)
{
204031dc:	7179                	addi	sp,sp,-48
204031de:	d606                	sw	ra,44(sp)
204031e0:	d422                	sw	s0,40(sp)
204031e2:	1800                	addi	s0,sp,48
204031e4:	fca42e23          	sw	a0,-36(s0)
204031e8:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:61
    struct __metal_driver_riscv_plic0 *plic = priv;
204031ec:	fd842783          	lw	a5,-40(s0)
204031f0:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:62
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
204031f4:	fec42503          	lw	a0,-20(s0)
204031f8:	3549                	jal	2040307a <__metal_plic0_claim_interrupt>
204031fa:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64

    if ( (idx < plic->num_interrupts) &&
204031fe:	fec42783          	lw	a5,-20(s0)
20403202:	4fdc                	lw	a5,28(a5)
20403204:	873e                	mv	a4,a5
20403206:	fe842783          	lw	a5,-24(s0)
2040320a:	04e7f463          	bgeu	a5,a4,20403252 <__metal_plic0_handler+0x76>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:65 (discriminator 1)
	 (plic->metal_exint_table[idx]) ) {
2040320e:	fec42703          	lw	a4,-20(s0)
20403212:	fe842783          	lw	a5,-24(s0)
20403216:	07a1                	addi	a5,a5,8
20403218:	078a                	slli	a5,a5,0x2
2040321a:	97ba                	add	a5,a5,a4
2040321c:	479c                	lw	a5,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:64 (discriminator 1)
    if ( (idx < plic->num_interrupts) &&
2040321e:	cb95                	beqz	a5,20403252 <__metal_plic0_handler+0x76>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:66
	plic->metal_exint_table[idx](idx,
20403220:	fec42703          	lw	a4,-20(s0)
20403224:	fe842783          	lw	a5,-24(s0)
20403228:	07a1                	addi	a5,a5,8
2040322a:	078a                	slli	a5,a5,0x2
2040322c:	97ba                	add	a5,a5,a4
2040322e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1c08>
20403232:	fe842603          	lw	a2,-24(s0)
20403236:	fec42683          	lw	a3,-20(s0)
2040323a:	fe842703          	lw	a4,-24(s0)
2040323e:	87ba                	mv	a5,a4
20403240:	0786                	slli	a5,a5,0x1
20403242:	97ba                	add	a5,a5,a4
20403244:	078e                	slli	a5,a5,0x3
20403246:	97b6                	add	a5,a5,a3
20403248:	0a87a783          	lw	a5,168(a5)
2040324c:	85be                	mv	a1,a5
2040324e:	8532                	mv	a0,a2
20403250:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:70
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403252:	fe842583          	lw	a1,-24(s0)
20403256:	fec42503          	lw	a0,-20(s0)
2040325a:	3589                	jal	2040309c <__metal_plic0_complete_interrupt>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:71
}
2040325c:	0001                	nop
2040325e:	50b2                	lw	ra,44(sp)
20403260:	5422                	lw	s0,40(sp)
20403262:	6145                	addi	sp,sp,48
20403264:	8082                	ret

20403266 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:74

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403266:	7179                	addi	sp,sp,-48
20403268:	d606                	sw	ra,44(sp)
2040326a:	d422                	sw	s0,40(sp)
2040326c:	1800                	addi	s0,sp,48
2040326e:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:75
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403272:	fdc42783          	lw	a5,-36(s0)
20403276:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:77

    if ( !plic->init_done ) {
2040327a:	fe842783          	lw	a5,-24(s0)
2040327e:	539c                	lw	a5,32(a5)
20403280:	0e079b63          	bnez	a5,20403376 <__metal_driver_riscv_plic0_init+0x110>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:80
        struct metal_interrupt *intc;

        intc = plic->interrupt_parent;
20403284:	fe842783          	lw	a5,-24(s0)
20403288:	4b9c                	lw	a5,16(a5)
2040328a:	fef42223          	sw	a5,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:83

	/* Initialize ist parent controller, aka cpu_intc. */
	intc->vtable->interrupt_init(intc);
2040328e:	fe442783          	lw	a5,-28(s0)
20403292:	439c                	lw	a5,0(a5)
20403294:	439c                	lw	a5,0(a5)
20403296:	fe442503          	lw	a0,-28(s0)
2040329a:	9782                	jalr	a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85

	for (int i = 0; i < plic->num_interrupts; i++) {
2040329c:	fe042623          	sw	zero,-20(s0)
204032a0:	a08d                	j	20403302 <__metal_driver_riscv_plic0_init+0x9c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:86 (discriminator 3)
	    __metal_plic0_enable(plic, i, METAL_DISABLE);
204032a2:	4601                	li	a2,0
204032a4:	fec42583          	lw	a1,-20(s0)
204032a8:	fe842503          	lw	a0,-24(s0)
204032ac:	3579                	jal	2040313a <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:87 (discriminator 3)
	    __metal_plic0_set_priority(plic, i, 0);
204032ae:	4601                	li	a2,0
204032b0:	fec42583          	lw	a1,-20(s0)
204032b4:	fe842503          	lw	a0,-24(s0)
204032b8:	3d2d                	jal	204030f2 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:88 (discriminator 3)
	    plic->metal_exint_table[i] = NULL;
204032ba:	fe842703          	lw	a4,-24(s0)
204032be:	fec42783          	lw	a5,-20(s0)
204032c2:	07a1                	addi	a5,a5,8
204032c4:	078a                	slli	a5,a5,0x2
204032c6:	97ba                	add	a5,a5,a4
204032c8:	0007a423          	sw	zero,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:89 (discriminator 3)
	    plic->metal_exdata_table[i].sub_int = NULL;
204032cc:	fe842683          	lw	a3,-24(s0)
204032d0:	fec42703          	lw	a4,-20(s0)
204032d4:	87ba                	mv	a5,a4
204032d6:	0786                	slli	a5,a5,0x1
204032d8:	97ba                	add	a5,a5,a4
204032da:	078e                	slli	a5,a5,0x3
204032dc:	97b6                	add	a5,a5,a3
204032de:	0a07a223          	sw	zero,164(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:90 (discriminator 3)
	    plic->metal_exdata_table[i].exint_data = NULL;
204032e2:	fe842683          	lw	a3,-24(s0)
204032e6:	fec42703          	lw	a4,-20(s0)
204032ea:	87ba                	mv	a5,a4
204032ec:	0786                	slli	a5,a5,0x1
204032ee:	97ba                	add	a5,a5,a4
204032f0:	078e                	slli	a5,a5,0x3
204032f2:	97b6                	add	a5,a5,a3
204032f4:	0a07a423          	sw	zero,168(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 3)
	for (int i = 0; i < plic->num_interrupts; i++) {
204032f8:	fec42783          	lw	a5,-20(s0)
204032fc:	0785                	addi	a5,a5,1
204032fe:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 1)
20403302:	fe842783          	lw	a5,-24(s0)
20403306:	4fdc                	lw	a5,28(a5)
20403308:	fec42703          	lw	a4,-20(s0)
2040330c:	f8f74be3          	blt	a4,a5,204032a2 <__metal_driver_riscv_plic0_init+0x3c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:93
	}

	__metal_plic0_set_threshold(plic, 0);
20403310:	4581                	li	a1,0
20403312:	fe842503          	lw	a0,-24(s0)
20403316:	3b4d                	jal	204030c8 <__metal_plic0_set_threshold>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:96

	/* Register plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_register(intc,
20403318:	fe442783          	lw	a5,-28(s0)
2040331c:	439c                	lw	a5,0(a5)
2040331e:	43d8                	lw	a4,4(a5)
20403320:	fe842783          	lw	a5,-24(s0)
20403324:	4bdc                	lw	a5,20(a5)
20403326:	fe842683          	lw	a3,-24(s0)
2040332a:	4601                	li	a2,0
2040332c:	85be                	mv	a1,a5
2040332e:	fe442503          	lw	a0,-28(s0)
20403332:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:100
                                         plic->interrupt_line,
                                         NULL, plic);
	/* Register plic handler for dispatching its device interrupts */
	intc->vtable->interrupt_register(intc,
20403334:	fe442783          	lw	a5,-28(s0)
20403338:	439c                	lw	a5,0(a5)
2040333a:	0047a803          	lw	a6,4(a5)
2040333e:	fe842783          	lw	a5,-24(s0)
20403342:	4bd8                	lw	a4,20(a5)
20403344:	fe842683          	lw	a3,-24(s0)
20403348:	204037b7          	lui	a5,0x20403
2040334c:	1dc78613          	addi	a2,a5,476 # 204031dc <__metal_plic0_handler>
20403350:	85ba                	mv	a1,a4
20403352:	fe442503          	lw	a0,-28(s0)
20403356:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:104
					 plic->interrupt_line,
					 __metal_plic0_handler, plic);
	/* Enable plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_enable(intc, plic->interrupt_line);
20403358:	fe442783          	lw	a5,-28(s0)
2040335c:	439c                	lw	a5,0(a5)
2040335e:	4798                	lw	a4,8(a5)
20403360:	fe842783          	lw	a5,-24(s0)
20403364:	4bdc                	lw	a5,20(a5)
20403366:	85be                	mv	a1,a5
20403368:	fe442503          	lw	a0,-28(s0)
2040336c:	9702                	jalr	a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:105
        plic->init_done = 1;
2040336e:	fe842783          	lw	a5,-24(s0)
20403372:	4705                	li	a4,1
20403374:	d398                	sw	a4,32(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:107
    }
}
20403376:	0001                	nop
20403378:	50b2                	lw	ra,44(sp)
2040337a:	5422                	lw	s0,40(sp)
2040337c:	6145                	addi	sp,sp,48
2040337e:	8082                	ret

20403380 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:112

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403380:	7179                	addi	sp,sp,-48
20403382:	d606                	sw	ra,44(sp)
20403384:	d422                	sw	s0,40(sp)
20403386:	1800                	addi	s0,sp,48
20403388:	fca42e23          	sw	a0,-36(s0)
2040338c:	fcb42c23          	sw	a1,-40(s0)
20403390:	fcc42a23          	sw	a2,-44(s0)
20403394:	fcd42823          	sw	a3,-48(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:113
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403398:	fdc42783          	lw	a5,-36(s0)
2040339c:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:115

    if (id >= plic->num_interrupts ) {
204033a0:	fec42783          	lw	a5,-20(s0)
204033a4:	4fdc                	lw	a5,28(a5)
204033a6:	fd842703          	lw	a4,-40(s0)
204033aa:	00f74463          	blt	a4,a5,204033b2 <__metal_driver_riscv_plic0_register+0x32>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:116
        return -1;
204033ae:	57fd                	li	a5,-1
204033b0:	a051                	j	20403434 <__metal_driver_riscv_plic0_register+0xb4>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:119
    }
 
    if (isr) {
204033b2:	fd442783          	lw	a5,-44(s0)
204033b6:	cf9d                	beqz	a5,204033f4 <__metal_driver_riscv_plic0_register+0x74>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:120
        __metal_plic0_set_priority(plic ,id, 2);
204033b8:	4609                	li	a2,2
204033ba:	fd842583          	lw	a1,-40(s0)
204033be:	fec42503          	lw	a0,-20(s0)
204033c2:	3b05                	jal	204030f2 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:121
	plic->metal_exint_table[id] = isr;
204033c4:	fec42703          	lw	a4,-20(s0)
204033c8:	fd842783          	lw	a5,-40(s0)
204033cc:	07a1                	addi	a5,a5,8
204033ce:	078a                	slli	a5,a5,0x2
204033d0:	97ba                	add	a5,a5,a4
204033d2:	fd442703          	lw	a4,-44(s0)
204033d6:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:122
	plic->metal_exdata_table[id].exint_data = priv;
204033d8:	fec42683          	lw	a3,-20(s0)
204033dc:	fd842703          	lw	a4,-40(s0)
204033e0:	87ba                	mv	a5,a4
204033e2:	0786                	slli	a5,a5,0x1
204033e4:	97ba                	add	a5,a5,a4
204033e6:	078e                	slli	a5,a5,0x3
204033e8:	97b6                	add	a5,a5,a3
204033ea:	fd042703          	lw	a4,-48(s0)
204033ee:	0ae7a423          	sw	a4,168(a5)
204033f2:	a081                	j	20403432 <__metal_driver_riscv_plic0_register+0xb2>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:124
    } else {
        __metal_plic0_set_priority(plic, id, 1);
204033f4:	4605                	li	a2,1
204033f6:	fd842583          	lw	a1,-40(s0)
204033fa:	fec42503          	lw	a0,-20(s0)
204033fe:	39d5                	jal	204030f2 <__metal_plic0_set_priority>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:125
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403400:	fec42703          	lw	a4,-20(s0)
20403404:	fd842783          	lw	a5,-40(s0)
20403408:	07a1                	addi	a5,a5,8
2040340a:	078a                	slli	a5,a5,0x2
2040340c:	97ba                	add	a5,a5,a4
2040340e:	20403737          	lui	a4,0x20403
20403412:	1c470713          	addi	a4,a4,452 # 204031c4 <__metal_plic0_default_handler>
20403416:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:126
	plic->metal_exdata_table[id].sub_int = priv;
20403418:	fec42683          	lw	a3,-20(s0)
2040341c:	fd842703          	lw	a4,-40(s0)
20403420:	87ba                	mv	a5,a4
20403422:	0786                	slli	a5,a5,0x1
20403424:	97ba                	add	a5,a5,a4
20403426:	078e                	slli	a5,a5,0x3
20403428:	97b6                	add	a5,a5,a3
2040342a:	fd042703          	lw	a4,-48(s0)
2040342e:	0ae7a223          	sw	a4,164(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:129
    }

    return 0;
20403432:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:130
}
20403434:	853e                	mv	a0,a5
20403436:	50b2                	lw	ra,44(sp)
20403438:	5422                	lw	s0,40(sp)
2040343a:	6145                	addi	sp,sp,48
2040343c:	8082                	ret

2040343e <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:133

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
2040343e:	7179                	addi	sp,sp,-48
20403440:	d606                	sw	ra,44(sp)
20403442:	d422                	sw	s0,40(sp)
20403444:	1800                	addi	s0,sp,48
20403446:	fca42e23          	sw	a0,-36(s0)
2040344a:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:134
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040344e:	fdc42783          	lw	a5,-36(s0)
20403452:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:136

    if ( id >= plic->num_interrupts ) {
20403456:	fec42783          	lw	a5,-20(s0)
2040345a:	4fdc                	lw	a5,28(a5)
2040345c:	fd842703          	lw	a4,-40(s0)
20403460:	00f74463          	blt	a4,a5,20403468 <__metal_driver_riscv_plic0_enable+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:137
        return -1;
20403464:	57fd                	li	a5,-1
20403466:	a801                	j	20403476 <__metal_driver_riscv_plic0_enable+0x38>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:140
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20403468:	4605                	li	a2,1
2040346a:	fd842583          	lw	a1,-40(s0)
2040346e:	fec42503          	lw	a0,-20(s0)
20403472:	31e1                	jal	2040313a <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:141
    return 0;
20403474:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:142
}
20403476:	853e                	mv	a0,a5
20403478:	50b2                	lw	ra,44(sp)
2040347a:	5422                	lw	s0,40(sp)
2040347c:	6145                	addi	sp,sp,48
2040347e:	8082                	ret

20403480 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:145

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20403480:	7179                	addi	sp,sp,-48
20403482:	d606                	sw	ra,44(sp)
20403484:	d422                	sw	s0,40(sp)
20403486:	1800                	addi	s0,sp,48
20403488:	fca42e23          	sw	a0,-36(s0)
2040348c:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:146
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403490:	fdc42783          	lw	a5,-36(s0)
20403494:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:148

    if ( id >= plic->num_interrupts ) {
20403498:	fec42783          	lw	a5,-20(s0)
2040349c:	4fdc                	lw	a5,28(a5)
2040349e:	fd842703          	lw	a4,-40(s0)
204034a2:	00f74463          	blt	a4,a5,204034aa <__metal_driver_riscv_plic0_disable+0x2a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:149
        return -1;
204034a6:	57fd                	li	a5,-1
204034a8:	a801                	j	204034b8 <__metal_driver_riscv_plic0_disable+0x38>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:151
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204034aa:	4601                	li	a2,0
204034ac:	fd842583          	lw	a1,-40(s0)
204034b0:	fec42503          	lw	a0,-20(s0)
204034b4:	3159                	jal	2040313a <__metal_plic0_enable>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:152
    return 0;
204034b6:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/riscv,plic0.c:153
}
204034b8:	853e                	mv	a0,a5
204034ba:	50b2                	lw	ra,44(sp)
204034bc:	5422                	lw	s0,40(sp)
204034be:	6145                	addi	sp,sp,48
204034c0:	8082                	ret

204034c2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:16

#define GPIO_IOF_EN     (0x38)
#define GPIO_IOF_SEL    (0x3C)

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204034c2:	7179                	addi	sp,sp,-48
204034c4:	d622                	sw	s0,44(sp)
204034c6:	1800                	addi	s0,sp,48
204034c8:	fca42e23          	sw	a0,-36(s0)
204034cc:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:17
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204034d0:	fdc42783          	lw	a5,-36(s0)
204034d4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:19

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_INPUT_EN))  &= ~source;
204034d8:	fec42783          	lw	a5,-20(s0)
204034dc:	479c                	lw	a5,8(a5)
204034de:	0791                	addi	a5,a5,4
204034e0:	439c                	lw	a5,0(a5)
204034e2:	fd842703          	lw	a4,-40(s0)
204034e6:	fff74713          	not	a4,a4
204034ea:	86ba                	mv	a3,a4
204034ec:	fec42703          	lw	a4,-20(s0)
204034f0:	4718                	lw	a4,8(a4)
204034f2:	0711                	addi	a4,a4,4
204034f4:	8ff5                	and	a5,a5,a3
204034f6:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:21

    return 0;
204034f8:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:22
}
204034fa:	853e                	mv	a0,a5
204034fc:	5432                	lw	s0,44(sp)
204034fe:	6145                	addi	sp,sp,48
20403500:	8082                	ret

20403502 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:25

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20403502:	7179                	addi	sp,sp,-48
20403504:	d622                	sw	s0,44(sp)
20403506:	1800                	addi	s0,sp,48
20403508:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:26
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040350c:	fdc42783          	lw	a5,-36(s0)
20403510:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:28

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL));
20403514:	fec42783          	lw	a5,-20(s0)
20403518:	479c                	lw	a5,8(a5)
2040351a:	07b1                	addi	a5,a5,12
2040351c:	439c                	lw	a5,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:29
}
2040351e:	853e                	mv	a0,a5
20403520:	5432                	lw	s0,44(sp)
20403522:	6145                	addi	sp,sp,48
20403524:	8082                	ret

20403526 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:32

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20403526:	7179                	addi	sp,sp,-48
20403528:	d622                	sw	s0,44(sp)
2040352a:	1800                	addi	s0,sp,48
2040352c:	fca42e23          	sw	a0,-36(s0)
20403530:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:33
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403534:	fdc42783          	lw	a5,-36(s0)
20403538:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:35

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_EN))  |= source;
2040353c:	fec42783          	lw	a5,-20(s0)
20403540:	479c                	lw	a5,8(a5)
20403542:	07a1                	addi	a5,a5,8
20403544:	4398                	lw	a4,0(a5)
20403546:	fd842783          	lw	a5,-40(s0)
2040354a:	fec42683          	lw	a3,-20(s0)
2040354e:	4694                	lw	a3,8(a3)
20403550:	06a1                	addi	a3,a3,8
20403552:	8fd9                	or	a5,a5,a4
20403554:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:37

    return 0;
20403556:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:38
}
20403558:	853e                	mv	a0,a5
2040355a:	5432                	lw	s0,44(sp)
2040355c:	6145                	addi	sp,sp,48
2040355e:	8082                	ret

20403560 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:41

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20403560:	7179                	addi	sp,sp,-48
20403562:	d622                	sw	s0,44(sp)
20403564:	1800                	addi	s0,sp,48
20403566:	fca42e23          	sw	a0,-36(s0)
2040356a:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:42
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
2040356e:	fdc42783          	lw	a5,-36(s0)
20403572:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:44

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) |= value;
20403576:	fec42783          	lw	a5,-20(s0)
2040357a:	479c                	lw	a5,8(a5)
2040357c:	07b1                	addi	a5,a5,12
2040357e:	4398                	lw	a4,0(a5)
20403580:	fd842783          	lw	a5,-40(s0)
20403584:	fec42683          	lw	a3,-20(s0)
20403588:	4694                	lw	a3,8(a3)
2040358a:	06b1                	addi	a3,a3,12
2040358c:	8fd9                	or	a5,a5,a4
2040358e:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:46

    return 0;
20403590:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:47
}
20403592:	853e                	mv	a0,a5
20403594:	5432                	lw	s0,44(sp)
20403596:	6145                	addi	sp,sp,48
20403598:	8082                	ret

2040359a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:50

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040359a:	7179                	addi	sp,sp,-48
2040359c:	d622                	sw	s0,44(sp)
2040359e:	1800                	addi	s0,sp,48
204035a0:	fca42e23          	sw	a0,-36(s0)
204035a4:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:51
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204035a8:	fdc42783          	lw	a5,-36(s0)
204035ac:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:53

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) &= ~value;
204035b0:	fec42783          	lw	a5,-20(s0)
204035b4:	479c                	lw	a5,8(a5)
204035b6:	07b1                	addi	a5,a5,12
204035b8:	439c                	lw	a5,0(a5)
204035ba:	fd842703          	lw	a4,-40(s0)
204035be:	fff74713          	not	a4,a4
204035c2:	86ba                	mv	a3,a4
204035c4:	fec42703          	lw	a4,-20(s0)
204035c8:	4718                	lw	a4,8(a4)
204035ca:	0731                	addi	a4,a4,12
204035cc:	8ff5                	and	a5,a5,a3
204035ce:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:55

    return 0;
204035d0:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:56
}
204035d2:	853e                	mv	a0,a5
204035d4:	5432                	lw	s0,44(sp)
204035d6:	6145                	addi	sp,sp,48
204035d8:	8082                	ret

204035da <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:59

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204035da:	7179                	addi	sp,sp,-48
204035dc:	d622                	sw	s0,44(sp)
204035de:	1800                	addi	s0,sp,48
204035e0:	fca42e23          	sw	a0,-36(s0)
204035e4:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:60
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
204035e8:	fdc42783          	lw	a5,-36(s0)
204035ec:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
204035f0:	fec42783          	lw	a5,-20(s0)
204035f4:	479c                	lw	a5,8(a5)
204035f6:	07b1                	addi	a5,a5,12
204035f8:	4398                	lw	a4,0(a5)
204035fa:	fd842783          	lw	a5,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
204035fe:	fec42683          	lw	a3,-20(s0)
20403602:	4694                	lw	a3,8(a3)
20403604:	06b1                	addi	a3,a3,12
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:63
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20403606:	8fb9                	xor	a5,a5,a4
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20403608:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:65

    return 0;
2040360a:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:66
}
2040360c:	853e                	mv	a0,a5
2040360e:	5432                	lw	s0,44(sp)
20403610:	6145                	addi	sp,sp,48
20403612:	8082                	ret

20403614 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:69

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20403614:	7179                	addi	sp,sp,-48
20403616:	d622                	sw	s0,44(sp)
20403618:	1800                	addi	s0,sp,48
2040361a:	fca42e23          	sw	a0,-36(s0)
2040361e:	fcb42c23          	sw	a1,-40(s0)
20403622:	fcc42a23          	sw	a2,-44(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:70
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20403626:	fdc42783          	lw	a5,-36(s0)
2040362a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:72

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_SEL)) &= ~source;
2040362e:	fec42783          	lw	a5,-20(s0)
20403632:	479c                	lw	a5,8(a5)
20403634:	03c78793          	addi	a5,a5,60
20403638:	439c                	lw	a5,0(a5)
2040363a:	fd842703          	lw	a4,-40(s0)
2040363e:	fff74713          	not	a4,a4
20403642:	86ba                	mv	a3,a4
20403644:	fec42703          	lw	a4,-20(s0)
20403648:	4718                	lw	a4,8(a4)
2040364a:	03c70713          	addi	a4,a4,60
2040364e:	8ff5                	and	a5,a5,a3
20403650:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:73
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_EN))  |= dest;
20403652:	fec42783          	lw	a5,-20(s0)
20403656:	479c                	lw	a5,8(a5)
20403658:	03878793          	addi	a5,a5,56
2040365c:	4398                	lw	a4,0(a5)
2040365e:	fd442783          	lw	a5,-44(s0)
20403662:	fec42683          	lw	a3,-20(s0)
20403666:	4694                	lw	a3,8(a3)
20403668:	03868693          	addi	a3,a3,56
2040366c:	8fd9                	or	a5,a5,a4
2040366e:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:75

    return 0;
20403670:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,gpio0.c:76
}
20403672:	853e                	mv	a0,a5
20403674:	5432                	lw	s0,44(sp)
20403676:	6145                	addi	sp,sp,48
20403678:	8082                	ret

2040367a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:37
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
2040367a:	7179                	addi	sp,sp,-48
2040367c:	d622                	sw	s0,44(sp)
2040367e:	1800                	addi	s0,sp,48
20403680:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:38
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20403684:	fdc42783          	lw	a5,-36(s0)
20403688:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:39
    return (struct metal_interrupt *)uart0->interrupt_parent;
2040368c:	fec42783          	lw	a5,-20(s0)
20403690:	53dc                	lw	a5,36(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:40
}
20403692:	853e                	mv	a0,a5
20403694:	5432                	lw	s0,44(sp)
20403696:	6145                	addi	sp,sp,48
20403698:	8082                	ret

2040369a <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:43

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
2040369a:	7179                	addi	sp,sp,-48
2040369c:	d622                	sw	s0,44(sp)
2040369e:	1800                	addi	s0,sp,48
204036a0:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:44
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
204036a4:	fdc42783          	lw	a5,-36(s0)
204036a8:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:45
    return (uart0->interrupt_line + METAL_INTERRUPT_ID_GL0);
204036ac:	fec42783          	lw	a5,-20(s0)
204036b0:	57dc                	lw	a5,44(a5)
204036b2:	02078793          	addi	a5,a5,32
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:46
}
204036b6:	853e                	mv	a0,a5
204036b8:	5432                	lw	s0,44(sp)
204036ba:	6145                	addi	sp,sp,48
204036bc:	8082                	ret

204036be <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:49

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, unsigned char c)
{
204036be:	1101                	addi	sp,sp,-32
204036c0:	ce22                	sw	s0,28(sp)
204036c2:	1000                	addi	s0,sp,32
204036c4:	fea42623          	sw	a0,-20(s0)
204036c8:	87ae                	mv	a5,a1
204036ca:	fef405a3          	sb	a5,-21(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50
    while ((UART_REGW(UART_REG_TXDATA) & UART_TXFULL) != 0) { }
204036ce:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:50 (discriminator 1)
204036d0:	fec42783          	lw	a5,-20(s0)
204036d4:	47dc                	lw	a5,12(a5)
204036d6:	439c                	lw	a5,0(a5)
204036d8:	fe07cce3          	bltz	a5,204036d0 <__metal_driver_sifive_uart0_putc+0x12>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:51
    UART_REGW(UART_REG_TXDATA) = c;
204036dc:	fec42783          	lw	a5,-20(s0)
204036e0:	47dc                	lw	a5,12(a5)
204036e2:	873e                	mv	a4,a5
204036e4:	feb44783          	lbu	a5,-21(s0)
204036e8:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:52
    return 0;
204036ea:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:53
}
204036ec:	853e                	mv	a0,a5
204036ee:	4472                	lw	s0,28(sp)
204036f0:	6105                	addi	sp,sp,32
204036f2:	8082                	ret

204036f4 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:56

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, unsigned char *c)
{
204036f4:	7179                	addi	sp,sp,-48
204036f6:	d622                	sw	s0,44(sp)
204036f8:	1800                	addi	s0,sp,48
204036fa:	fca42e23          	sw	a0,-36(s0)
204036fe:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:57
    uint32_t ch = UART_RXEMPTY;
20403702:	800007b7          	lui	a5,0x80000
20403706:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
2040370a:	a801                	j	2040371a <__metal_driver_sifive_uart0_getc+0x26>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:59
        ch = UART_REGW(UART_REG_RXDATA);
2040370c:	fdc42783          	lw	a5,-36(s0)
20403710:	47dc                	lw	a5,12(a5)
20403712:	0791                	addi	a5,a5,4
20403714:	439c                	lw	a5,0(a5)
20403716:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
2040371a:	fec42783          	lw	a5,-20(s0)
2040371e:	fe07c7e3          	bltz	a5,2040370c <__metal_driver_sifive_uart0_getc+0x18>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:61
    }
    *c = ch & 0xff;
20403722:	fec42783          	lw	a5,-20(s0)
20403726:	0ff7f713          	andi	a4,a5,255
2040372a:	fd842783          	lw	a5,-40(s0)
2040372e:	00e78023          	sb	a4,0(a5) # 80000000 <metal_segment_heap_target_end+0xffffc000>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:62
    return 0;
20403732:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:63
}
20403734:	853e                	mv	a0,a5
20403736:	5432                	lw	s0,44(sp)
20403738:	6145                	addi	sp,sp,48
2040373a:	8082                	ret

2040373c <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:66

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
2040373c:	7179                	addi	sp,sp,-48
2040373e:	d622                	sw	s0,44(sp)
20403740:	1800                	addi	s0,sp,48
20403742:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:67
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20403746:	fdc42783          	lw	a5,-36(s0)
2040374a:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:68
    return uart->baud_rate;
2040374e:	fec42783          	lw	a5,-20(s0)
20403752:	4bdc                	lw	a5,20(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:69
}
20403754:	853e                	mv	a0,a5
20403756:	5432                	lw	s0,44(sp)
20403758:	6145                	addi	sp,sp,48
2040375a:	8082                	ret

2040375c <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:72

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
2040375c:	7179                	addi	sp,sp,-48
2040375e:	d606                	sw	ra,44(sp)
20403760:	d422                	sw	s0,40(sp)
20403762:	1800                	addi	s0,sp,48
20403764:	fca42e23          	sw	a0,-36(s0)
20403768:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:73
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040376c:	fdc42783          	lw	a5,-36(s0)
20403770:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:75

    uart->baud_rate = baud_rate;
20403774:	fd842703          	lw	a4,-40(s0)
20403778:	fec42783          	lw	a5,-20(s0)
2040377c:	cbd8                	sw	a4,20(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:77

    if (uart->clock != NULL) {
2040377e:	fec42783          	lw	a5,-20(s0)
20403782:	479c                	lw	a5,8(a5)
20403784:	c3b5                	beqz	a5,204037e8 <__metal_driver_sifive_uart0_set_baud_rate+0x8c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:78
        long clock_rate = uart->clock->vtable->get_rate_hz(uart->clock);
20403786:	fec42783          	lw	a5,-20(s0)
2040378a:	479c                	lw	a5,8(a5)
2040378c:	439c                	lw	a5,0(a5)
2040378e:	4398                	lw	a4,0(a5)
20403790:	fec42783          	lw	a5,-20(s0)
20403794:	479c                	lw	a5,8(a5)
20403796:	853e                	mv	a0,a5
20403798:	9702                	jalr	a4
2040379a:	fea42423          	sw	a0,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:79
        UART_REGW(UART_REG_DIV) = clock_rate / baud_rate - 1;
2040379e:	fe842703          	lw	a4,-24(s0)
204037a2:	fd842783          	lw	a5,-40(s0)
204037a6:	02f747b3          	div	a5,a4,a5
204037aa:	fff78713          	addi	a4,a5,-1
204037ae:	fec42783          	lw	a5,-20(s0)
204037b2:	47dc                	lw	a5,12(a5)
204037b4:	07e1                	addi	a5,a5,24
204037b6:	c398                	sw	a4,0(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:80
        UART_REGW(UART_REG_TXCTRL) |= UART_TXEN;
204037b8:	fec42783          	lw	a5,-20(s0)
204037bc:	47dc                	lw	a5,12(a5)
204037be:	07a1                	addi	a5,a5,8
204037c0:	439c                	lw	a5,0(a5)
204037c2:	fec42703          	lw	a4,-20(s0)
204037c6:	4758                	lw	a4,12(a4)
204037c8:	0721                	addi	a4,a4,8
204037ca:	0017e793          	ori	a5,a5,1
204037ce:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:81
        UART_REGW(UART_REG_RXCTRL) |= UART_RXEN;
204037d0:	fec42783          	lw	a5,-20(s0)
204037d4:	47dc                	lw	a5,12(a5)
204037d6:	07b1                	addi	a5,a5,12
204037d8:	439c                	lw	a5,0(a5)
204037da:	fec42703          	lw	a4,-20(s0)
204037de:	4758                	lw	a4,12(a4)
204037e0:	0731                	addi	a4,a4,12
204037e2:	0017e793          	ori	a5,a5,1
204037e6:	c31c                	sw	a5,0(a4)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:83
    }
    return 0;
204037e8:	4781                	li	a5,0
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:84
}
204037ea:	853e                	mv	a0,a5
204037ec:	50b2                	lw	ra,44(sp)
204037ee:	5422                	lw	s0,40(sp)
204037f0:	6145                	addi	sp,sp,48
204037f2:	8082                	ret

204037f4 <pre_rate_change_callback>:
pre_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:87

static void pre_rate_change_callback(void *priv)
{
204037f4:	7139                	addi	sp,sp,-64
204037f6:	de06                	sw	ra,60(sp)
204037f8:	dc22                	sw	s0,56(sp)
204037fa:	0080                	addi	s0,sp,64
204037fc:	fca42623          	sw	a0,-52(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:88
    struct __metal_driver_sifive_uart0 *uart = priv;
20403800:	fcc42783          	lw	a5,-52(s0)
20403804:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:93

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(UART_REG_TXCTRL) &= ~(UART_TXCNT(0x7));
20403808:	fec42783          	lw	a5,-20(s0)
2040380c:	47dc                	lw	a5,12(a5)
2040380e:	07a1                	addi	a5,a5,8
20403810:	4398                	lw	a4,0(a5)
20403812:	fec42783          	lw	a5,-20(s0)
20403816:	47dc                	lw	a5,12(a5)
20403818:	07a1                	addi	a5,a5,8
2040381a:	86be                	mv	a3,a5
2040381c:	fff907b7          	lui	a5,0xfff90
20403820:	17fd                	addi	a5,a5,-1
20403822:	8ff9                	and	a5,a5,a4
20403824:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:94
    UART_REGW(UART_REG_TXCTRL) |= UART_TXCNT(1);
20403826:	fec42783          	lw	a5,-20(s0)
2040382a:	47dc                	lw	a5,12(a5)
2040382c:	07a1                	addi	a5,a5,8
2040382e:	4398                	lw	a4,0(a5)
20403830:	fec42783          	lw	a5,-20(s0)
20403834:	47dc                	lw	a5,12(a5)
20403836:	07a1                	addi	a5,a5,8
20403838:	86be                	mv	a3,a5
2040383a:	67c1                	lui	a5,0x10
2040383c:	8fd9                	or	a5,a5,a4
2040383e:	c29c                	sw	a5,0(a3)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96

    while((UART_REGW(UART_REG_IP) & UART_TXWM) == 0) ;
20403840:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:96 (discriminator 1)
20403842:	fec42783          	lw	a5,-20(s0)
20403846:	47dc                	lw	a5,12(a5)
20403848:	07d1                	addi	a5,a5,20
2040384a:	439c                	lw	a5,0(a5)
2040384c:	8b85                	andi	a5,a5,1
2040384e:	dbf5                	beqz	a5,20403842 <pre_rate_change_callback+0x4e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(UART_REG_TXCTRL) & (1 << 1)) ? 9 : 10;
20403850:	fec42783          	lw	a5,-20(s0)
20403854:	47dc                	lw	a5,12(a5)
20403856:	07a1                	addi	a5,a5,8
20403858:	439c                	lw	a5,0(a5)
2040385a:	8b89                	andi	a5,a5,2
2040385c:	c399                	beqz	a5,20403862 <pre_rate_change_callback+0x6e>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 1)
2040385e:	47a5                	li	a5,9
20403860:	a011                	j	20403864 <pre_rate_change_callback+0x70>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 2)
20403862:	47a9                	li	a5,10
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 4)
20403864:	fef42423          	sw	a5,-24(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:103 (discriminator 4)
    long clk_freq = uart->clock->vtable->get_rate_hz(uart->clock);
20403868:	fec42783          	lw	a5,-20(s0)
2040386c:	479c                	lw	a5,8(a5)
2040386e:	439c                	lw	a5,0(a5)
20403870:	4398                	lw	a4,0(a5)
20403872:	fec42783          	lw	a5,-20(s0)
20403876:	479c                	lw	a5,8(a5)
20403878:	853e                	mv	a0,a5
2040387a:	9702                	jalr	a4
2040387c:	fea42223          	sw	a0,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:104 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20403880:	fe842703          	lw	a4,-24(s0)
20403884:	fe442783          	lw	a5,-28(s0)
20403888:	02f707b3          	mul	a5,a4,a5
2040388c:	873e                	mv	a4,a5
2040388e:	fec42783          	lw	a5,-20(s0)
20403892:	4bdc                	lw	a5,20(a5)
20403894:	02f757b3          	divu	a5,a4,a5
20403898:	fef42023          	sw	a5,-32(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
2040389c:	fc042e23          	sw	zero,-36(s0)
204038a0:	a039                	j	204038ae <pre_rate_change_callback+0xba>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:107 (discriminator 3)
        asm("nop");
204038a2:	0001                	nop
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204038a4:	fdc42783          	lw	a5,-36(s0)
204038a8:	0785                	addi	a5,a5,1
204038aa:	fcf42e23          	sw	a5,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 1)
204038ae:	fdc42783          	lw	a5,-36(s0)
204038b2:	fe042703          	lw	a4,-32(s0)
204038b6:	fee7c6e3          	blt	a5,a4,204038a2 <pre_rate_change_callback+0xae>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:108
}
204038ba:	0001                	nop
204038bc:	50f2                	lw	ra,60(sp)
204038be:	5462                	lw	s0,56(sp)
204038c0:	6121                	addi	sp,sp,64
204038c2:	8082                	ret

204038c4 <post_rate_change_callback>:
post_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:111

static void post_rate_change_callback(void *priv)
{
204038c4:	7179                	addi	sp,sp,-48
204038c6:	d606                	sw	ra,44(sp)
204038c8:	d422                	sw	s0,40(sp)
204038ca:	1800                	addi	s0,sp,48
204038cc:	fca42e23          	sw	a0,-36(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:112
    struct __metal_driver_sifive_uart0 *uart = priv;
204038d0:	fdc42783          	lw	a5,-36(s0)
204038d4:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:113
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
204038d8:	fec42703          	lw	a4,-20(s0)
204038dc:	fec42783          	lw	a5,-20(s0)
204038e0:	4bdc                	lw	a5,20(a5)
204038e2:	85be                	mv	a1,a5
204038e4:	853a                	mv	a0,a4
204038e6:	e58fe0ef          	jal	ra,20401f3e <metal_uart_set_baud_rate>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:114
}
204038ea:	0001                	nop
204038ec:	50b2                	lw	ra,44(sp)
204038ee:	5422                	lw	s0,40(sp)
204038f0:	6145                	addi	sp,sp,48
204038f2:	8082                	ret

204038f4 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:117

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204038f4:	7179                	addi	sp,sp,-48
204038f6:	d606                	sw	ra,44(sp)
204038f8:	d422                	sw	s0,40(sp)
204038fa:	1800                	addi	s0,sp,48
204038fc:	fca42e23          	sw	a0,-36(s0)
20403900:	fcb42c23          	sw	a1,-40(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:118
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20403904:	fdc42783          	lw	a5,-36(s0)
20403908:	fef42623          	sw	a5,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:120

    if(uart->clock != NULL) {
2040390c:	fec42783          	lw	a5,-20(s0)
20403910:	479c                	lw	a5,8(a5)
20403912:	c79d                	beqz	a5,20403940 <__metal_driver_sifive_uart0_init+0x4c>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:121
        metal_clock_register_pre_rate_change_callback(uart->clock, &pre_rate_change_callback, uart);
20403914:	fec42783          	lw	a5,-20(s0)
20403918:	4798                	lw	a4,8(a5)
2040391a:	fec42603          	lw	a2,-20(s0)
2040391e:	204037b7          	lui	a5,0x20403
20403922:	7f478593          	addi	a1,a5,2036 # 204037f4 <pre_rate_change_callback>
20403926:	853a                	mv	a0,a4
20403928:	2085                	jal	20403988 <metal_clock_register_pre_rate_change_callback>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:122
        metal_clock_register_post_rate_change_callback(uart->clock, &post_rate_change_callback, uart);
2040392a:	fec42783          	lw	a5,-20(s0)
2040392e:	4798                	lw	a4,8(a5)
20403930:	fec42603          	lw	a2,-20(s0)
20403934:	204047b7          	lui	a5,0x20404
20403938:	8c478593          	addi	a1,a5,-1852 # 204038c4 <post_rate_change_callback>
2040393c:	853a                	mv	a0,a4
2040393e:	28a5                	jal	204039b6 <metal_clock_register_post_rate_change_callback>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:125
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20403940:	fec42783          	lw	a5,-20(s0)
20403944:	fd842583          	lw	a1,-40(s0)
20403948:	853e                	mv	a0,a5
2040394a:	df4fe0ef          	jal	ra,20401f3e <metal_uart_set_baud_rate>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:127

    if (uart->pinmux != NULL) {
2040394e:	fec42783          	lw	a5,-20(s0)
20403952:	4f9c                	lw	a5,24(a5)
20403954:	c78d                	beqz	a5,2040397e <__metal_driver_sifive_uart0_init+0x8a>
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20403956:	fec42783          	lw	a5,-20(s0)
2040395a:	4f9c                	lw	a5,24(a5)
2040395c:	43dc                	lw	a5,4(a5)
2040395e:	0187a803          	lw	a6,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:129
            (struct metal_gpio *) uart->pinmux,
20403962:	fec42783          	lw	a5,-20(s0)
20403966:	4f98                	lw	a4,24(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:130
            uart->pinmux_output_selector,
20403968:	fec42783          	lw	a5,-20(s0)
2040396c:	4fdc                	lw	a5,28(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
2040396e:	86be                	mv	a3,a5
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:131
            uart->pinmux_source_selector
20403970:	fec42783          	lw	a5,-20(s0)
20403974:	539c                	lw	a5,32(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20403976:	863e                	mv	a2,a5
20403978:	85b6                	mv	a1,a3
2040397a:	853a                	mv	a0,a4
2040397c:	9802                	jalr	a6
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/drivers/sifive,uart0.c:134
        );
    }
}
2040397e:	0001                	nop
20403980:	50b2                	lw	ra,44(sp)
20403982:	5422                	lw	s0,40(sp)
20403984:	6145                	addi	sp,sp,48
20403986:	8082                	ret

20403988 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:101
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_pre_rate_change_callback cb, void *priv)
{
20403988:	1101                	addi	sp,sp,-32
2040398a:	ce22                	sw	s0,28(sp)
2040398c:	1000                	addi	s0,sp,32
2040398e:	fea42623          	sw	a0,-20(s0)
20403992:	feb42423          	sw	a1,-24(s0)
20403996:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:102
    clk->_pre_rate_change_callback = cb;
2040399a:	fec42783          	lw	a5,-20(s0)
2040399e:	fe842703          	lw	a4,-24(s0)
204039a2:	c3d8                	sw	a4,4(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:103
    clk->_pre_rate_change_callback_priv = priv;
204039a4:	fec42783          	lw	a5,-20(s0)
204039a8:	fe442703          	lw	a4,-28(s0)
204039ac:	c798                	sw	a4,8(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:104
}
204039ae:	0001                	nop
204039b0:	4472                	lw	s0,28(sp)
204039b2:	6105                	addi	sp,sp,32
204039b4:	8082                	ret

204039b6 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:114
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_post_rate_change_callback cb, void *priv)
{
204039b6:	1101                	addi	sp,sp,-32
204039b8:	ce22                	sw	s0,28(sp)
204039ba:	1000                	addi	s0,sp,32
204039bc:	fea42623          	sw	a0,-20(s0)
204039c0:	feb42423          	sw	a1,-24(s0)
204039c4:	fec42223          	sw	a2,-28(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:115
    clk->_post_rate_change_callback = cb;
204039c8:	fec42783          	lw	a5,-20(s0)
204039cc:	fe842703          	lw	a4,-24(s0)
204039d0:	c7d8                	sw	a4,12(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:116
    clk->_post_rate_change_callback_priv = priv;
204039d2:	fec42783          	lw	a5,-20(s0)
204039d6:	fe442703          	lw	a4,-28(s0)
204039da:	cb98                	sw	a4,16(a5)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/metal/clock.h:117
}
204039dc:	0001                	nop
204039de:	4472                	lw	s0,28(sp)
204039e0:	6105                	addi	sp,sp,32
204039e2:	8082                	ret

204039e4 <metal_shutdown>:
metal_shutdown():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
# warning "There is no defined shutdown mechanism, metal_shutdown() will spin."
void metal_shutdown(int code)
{
204039e4:	1101                	addi	sp,sp,-32
204039e6:	ce22                	sw	s0,28(sp)
204039e8:	1000                	addi	s0,sp,32
204039ea:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204039ee:	0001                	nop
204039f0:	bffd                	j	204039ee <metal_shutdown+0xa>

204039f2 <_exit>:
_exit():
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204039f2:	1101                	addi	sp,sp,-32
204039f4:	ce06                	sw	ra,28(sp)
204039f6:	cc22                	sw	s0,24(sp)
204039f8:	1000                	addi	s0,sp,32
204039fa:	fea42623          	sw	a0,-20(s0)
/home/tanqinhan/Desktop/riscv/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204039fe:	fec42503          	lw	a0,-20(s0)
20403a02:	37cd                	jal	204039e4 <metal_shutdown>
